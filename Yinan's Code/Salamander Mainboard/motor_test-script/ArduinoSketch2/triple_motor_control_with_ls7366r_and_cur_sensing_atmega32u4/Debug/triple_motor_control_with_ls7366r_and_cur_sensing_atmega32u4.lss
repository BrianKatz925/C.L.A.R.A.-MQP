
triple_motor_control_with_ls7366r_and_cur_sensing_atmega32u4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c2  00800100  00002e5a  00002eee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002e5a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000248  008001c2  008001c2  00002fb0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002fb0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002fe0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000580  00000000  00000000  00003020  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000f4ee  00000000  00000000  000035a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000334c  00000000  00000000  00012a8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000039c1  00000000  00000000  00015dda  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001238  00000000  00000000  0001979c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003b3d  00000000  00000000  0001a9d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006000  00000000  00000000  0001e511  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000600  00000000  00000000  00024511  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ed 00 	jmp	0x1da	; 0x1da <__ctors_end>
       4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
       8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
       c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      10:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      14:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      18:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      1c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      20:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      24:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      28:	0c 94 e8 0e 	jmp	0x1dd0	; 0x1dd0 <__vector_10>
      2c:	0c 94 77 0d 	jmp	0x1aee	; 0x1aee <__vector_11>
      30:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      34:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      38:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      3c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      40:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      44:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      48:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      4c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      50:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      54:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      58:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      5c:	0c 94 88 0f 	jmp	0x1f10	; 0x1f10 <__vector_23>
      60:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      64:	0c 94 4c 0a 	jmp	0x1498	; 0x1498 <__vector_25>
      68:	0c 94 7e 0a 	jmp	0x14fc	; 0x14fc <__vector_26>
      6c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      70:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      74:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      78:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      7c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      80:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      84:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      88:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      8c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      90:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      94:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      98:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      9c:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a0:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a4:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      a8:	0c 94 15 01 	jmp	0x22a	; 0x22a <__bad_interrupt>
      ac:	e9 10       	cpse	r14, r9
      ae:	ec 10       	cpse	r14, r12
      b0:	db 10       	cpse	r13, r11
      b2:	df 10       	cpse	r13, r15
      b4:	e5 10       	cpse	r14, r5
      b6:	0d 11       	cpse	r16, r13
      b8:	0d 11       	cpse	r16, r13
      ba:	0d 11       	cpse	r16, r13
      bc:	f0 10       	cpse	r15, r0
      be:	f4 10       	cpse	r15, r4
      c0:	f8 10       	cpse	r15, r8
      c2:	fe 10       	cpse	r15, r14
      c4:	02 11       	cpse	r16, r2
      c6:	0d 11       	cpse	r16, r13
      c8:	08 11       	cpse	r16, r8

000000ca <USB_DeviceDescriptorB>:
      ca:	12 01 00 02 ef 02 01 40 41 23 37 80 00 01 01 02     .......@A#7.....
      da:	03 01                                               ..

000000dc <USB_DeviceDescriptor>:
      dc:	12 01 00 02 00 00 00 40 41 23 37 80 00 01 01 02     .......@A#7.....
      ec:	03 01                                               ..

000000ee <STRING_MANUFACTURER>:
      ee:	41 72 64 75 69 6e 6f 20 4c 4c 43 00                 Arduino LLC.

000000fa <STRING_PRODUCT>:
      fa:	41 72 64 75 69 6e 6f 20 4d 69 63 72 6f 00           Arduino Micro.

00000108 <STRING_LANGUAGE>:
     108:	04 03 09 04                                         ....

0000010c <analog_pin_to_channel_PGM>:
     10c:	07 06 05 04 01 00 08 0a 0b 0c 0d 09                 ............

00000118 <digital_pin_to_timer_PGM>:
     118:	00 00 00 02 00 09 0f 00 00 03 04 01 00 0c 00 00     ................
	...

00000137 <digital_pin_to_bit_mask_PGM>:
     137:	04 08 02 01 10 40 80 40 10 20 40 80 40 80 08 02     .....@.@. @.@...
     147:	04 01 80 40 20 10 02 01 10 80 10 20 40 40 20        ...@ ...... @@ 

00000156 <digital_pin_to_port_PGM>:
     156:	04 04 04 04 04 03 04 05 02 02 02 02 04 03 02 02     ................
     166:	02 02 06 06 06 06 06 06 04 04 02 02 02 04 04        ...............

00000175 <port_to_output_PGM>:
     175:	00 00 00 00 25 00 28 00 2b 00 2e 00 31 00           ....%.(.+...1.

00000183 <port_to_mode_PGM>:
     183:	00 00 00 00 24 00 27 00 2a 00 2d 00 30 00           ....$.'.*.-.0.

00000191 <_cdcInterface>:
     191:	08 0b 00 02 02 02 01 00 09 04 00 00 01 02 02 00     ................
     1a1:	00 05 24 00 10 01 05 24 01 01 01 04 24 02 06 05     ..$....$....$...
     1b1:	24 06 00 01 07 05 81 03 10 00 40 09 04 01 00 02     $.........@.....
     1c1:	0a 00 00 00 07 05 02 02 40 00 00 07 05 83 02 40     ........@......@
     1d1:	00 00 00                                            ...

000001d4 <__ctors_start>:
     1d4:	fd 05       	cpc	r31, r13
     1d6:	ae 0a       	sbc	r10, r30
     1d8:	54 16       	cp	r5, r20

000001da <__ctors_end>:
     1da:	11 24       	eor	r1, r1
     1dc:	1f be       	out	0x3f, r1	; 63
     1de:	cf ef       	ldi	r28, 0xFF	; 255
     1e0:	da e0       	ldi	r29, 0x0A	; 10
     1e2:	de bf       	out	0x3e, r29	; 62
     1e4:	cd bf       	out	0x3d, r28	; 61

000001e6 <__do_copy_data>:
     1e6:	11 e0       	ldi	r17, 0x01	; 1
     1e8:	a0 e0       	ldi	r26, 0x00	; 0
     1ea:	b1 e0       	ldi	r27, 0x01	; 1
     1ec:	ea e5       	ldi	r30, 0x5A	; 90
     1ee:	fe e2       	ldi	r31, 0x2E	; 46
     1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <__do_copy_data+0x10>
     1f2:	05 90       	lpm	r0, Z+
     1f4:	0d 92       	st	X+, r0
     1f6:	a2 3c       	cpi	r26, 0xC2	; 194
     1f8:	b1 07       	cpc	r27, r17
     1fa:	d9 f7       	brne	.-10     	; 0x1f2 <__do_copy_data+0xc>

000001fc <__do_clear_bss>:
     1fc:	24 e0       	ldi	r18, 0x04	; 4
     1fe:	a2 ec       	ldi	r26, 0xC2	; 194
     200:	b1 e0       	ldi	r27, 0x01	; 1
     202:	01 c0       	rjmp	.+2      	; 0x206 <.do_clear_bss_start>

00000204 <.do_clear_bss_loop>:
     204:	1d 92       	st	X+, r1

00000206 <.do_clear_bss_start>:
     206:	aa 30       	cpi	r26, 0x0A	; 10
     208:	b2 07       	cpc	r27, r18
     20a:	e1 f7       	brne	.-8      	; 0x204 <.do_clear_bss_loop>

0000020c <__do_global_ctors>:
     20c:	10 e0       	ldi	r17, 0x00	; 0
     20e:	cd ee       	ldi	r28, 0xED	; 237
     210:	d0 e0       	ldi	r29, 0x00	; 0
     212:	04 c0       	rjmp	.+8      	; 0x21c <__do_global_ctors+0x10>
     214:	21 97       	sbiw	r28, 0x01	; 1
     216:	fe 01       	movw	r30, r28
     218:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <__tablejump2__>
     21c:	ca 3e       	cpi	r28, 0xEA	; 234
     21e:	d1 07       	cpc	r29, r17
     220:	c9 f7       	brne	.-14     	; 0x214 <__do_global_ctors+0x8>
     222:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <main>
     226:	0c 94 2b 17 	jmp	0x2e56	; 0x2e56 <_exit>

0000022a <__bad_interrupt>:
     22a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000022e <_ZN8SPIClass8transferEh>:
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
     22e:	8e bd       	out	0x2e, r24	; 46
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
     230:	00 00       	nop
    while (!(SPSR & _BV(SPIF))) ; // wait
     232:	0d b4       	in	r0, 0x2d	; 45
     234:	07 fe       	sbrs	r0, 7
     236:	fd cf       	rjmp	.-6      	; 0x232 <_ZN8SPIClass8transferEh+0x4>
    return SPDR;
     238:	8e b5       	in	r24, 0x2e	; 46
  }
     23a:	08 95       	ret

0000023c <_Z12initEncodersv>:
}

void initEncoders() {
    // Set slave selects as outputs
    // pinMode(slaveSelectEnc1, OUTPUT);
    DDRE |= 0x04;  // pinMode PE2 OUTPUT
     23c:	6a 9a       	sbi	0x0d, 2	; 13
    pinMode(slaveSelectEnc2, OUTPUT);
     23e:	61 e0       	ldi	r22, 0x01	; 1
     240:	88 e0       	ldi	r24, 0x08	; 8
     242:	0e 94 0e 11 	call	0x221c	; 0x221c <pinMode>
    pinMode(slaveSelectEnc3, OUTPUT);
     246:	61 e0       	ldi	r22, 0x01	; 1
     248:	87 e0       	ldi	r24, 0x07	; 7
     24a:	0e 94 0e 11 	call	0x221c	; 0x221c <pinMode>

    pinMode(A3, OUTPUT);
     24e:	61 e0       	ldi	r22, 0x01	; 1
     250:	85 e1       	ldi	r24, 0x15	; 21
     252:	0e 94 0e 11 	call	0x221c	; 0x221c <pinMode>

    // Raise select pins
    // Communication begins when you drop the individual select signsl
    // digitalWrite(slaveSelectEnc1,HIGH);
    PORTE |= 0x04;  // Set PE2
     256:	72 9a       	sbi	0x0e, 2	; 14
    digitalWrite(slaveSelectEnc2, HIGH);
     258:	61 e0       	ldi	r22, 0x01	; 1
     25a:	88 e0       	ldi	r24, 0x08	; 8
     25c:	0e 94 4a 11 	call	0x2294	; 0x2294 <digitalWrite>
    digitalWrite(slaveSelectEnc3, HIGH);
     260:	61 e0       	ldi	r22, 0x01	; 1
     262:	87 e0       	ldi	r24, 0x07	; 7
     264:	0e 94 4a 11 	call	0x2294	; 0x2294 <digitalWrite>

    digitalWrite(A3, HIGH);
     268:	61 e0       	ldi	r22, 0x01	; 1
     26a:	85 e1       	ldi	r24, 0x15	; 21
     26c:	0e 94 4a 11 	call	0x2294	; 0x2294 <digitalWrite>

    SPI.begin();
     270:	0e 94 34 15 	call	0x2a68	; 0x2a68 <_ZN8SPIClass5beginEv>
    //    Negative index input
    //    free-running count mode
    //    x4 quatrature count mode (four counts per quadrature cycle)
    // NOTE: For more information on commands, see datasheet
    // digitalWrite(slaveSelectEnc1,LOW);        // Begin SPI conversation
    PORTE &= 0xFB;       // Clear PE2
     274:	72 98       	cbi	0x0e, 2	; 14
    SPI.transfer(0x88);  // Write to MDR0
     276:	88 e8       	ldi	r24, 0x88	; 136
     278:	0e 94 17 01 	call	0x22e	; 0x22e <_ZN8SPIClass8transferEh>
    SPI.transfer(0x03);  // Configure to 4 byte mode
     27c:	83 e0       	ldi	r24, 0x03	; 3
     27e:	0e 94 17 01 	call	0x22e	; 0x22e <_ZN8SPIClass8transferEh>
    // digitalWrite(slaveSelectEnc1,HIGH);       // Terminate SPI conversation
    PORTE |= 0x04;  // Set PE2
     282:	72 9a       	sbi	0x0e, 2	; 14
    //    Clock division factor: 0
    //    Negative index input
    //    free-running count mode
    //    x4 quatrature count mode (four counts per quadrature cycle)
    // NOTE: For more information on commands, see datasheet
    digitalWrite(slaveSelectEnc2, LOW);   // Begin SPI conversation
     284:	60 e0       	ldi	r22, 0x00	; 0
     286:	88 e0       	ldi	r24, 0x08	; 8
     288:	0e 94 4a 11 	call	0x2294	; 0x2294 <digitalWrite>
    SPI.transfer(0x88);                   // Write to MDR0
     28c:	88 e8       	ldi	r24, 0x88	; 136
     28e:	0e 94 17 01 	call	0x22e	; 0x22e <_ZN8SPIClass8transferEh>
    SPI.transfer(0x03);                   // Configure to 4 byte mode
     292:	83 e0       	ldi	r24, 0x03	; 3
     294:	0e 94 17 01 	call	0x22e	; 0x22e <_ZN8SPIClass8transferEh>
    digitalWrite(slaveSelectEnc2, HIGH);  // Terminate SPI conversation
     298:	61 e0       	ldi	r22, 0x01	; 1
     29a:	88 e0       	ldi	r24, 0x08	; 8
     29c:	0e 94 4a 11 	call	0x2294	; 0x2294 <digitalWrite>
    //    Clock division factor: 0
    //    Negative index input
    //    free-running count mode
    //    x4 quatrature count mode (four counts per quadrature cycle)
    // NOTE: For more information on commands, see datasheet
    digitalWrite(slaveSelectEnc3, LOW);   // Begin SPI conversation
     2a0:	60 e0       	ldi	r22, 0x00	; 0
     2a2:	87 e0       	ldi	r24, 0x07	; 7
     2a4:	0e 94 4a 11 	call	0x2294	; 0x2294 <digitalWrite>
    SPI.transfer(0x88);                   // Write to MDR0
     2a8:	88 e8       	ldi	r24, 0x88	; 136
     2aa:	0e 94 17 01 	call	0x22e	; 0x22e <_ZN8SPIClass8transferEh>
    SPI.transfer(0x03);                   // Configure to 4 byte mode
     2ae:	83 e0       	ldi	r24, 0x03	; 3
     2b0:	0e 94 17 01 	call	0x22e	; 0x22e <_ZN8SPIClass8transferEh>
    digitalWrite(slaveSelectEnc3, HIGH);  // Terminate SPI conversation
     2b4:	61 e0       	ldi	r22, 0x01	; 1
     2b6:	87 e0       	ldi	r24, 0x07	; 7
     2b8:	0e 94 4a 11 	call	0x2294	; 0x2294 <digitalWrite>
    //    Clock division factor: 0
    //    Negative index input
    //    free-running count mode
    //    x4 quatrature count mode (four counts per quadrature cycle)
    // NOTE: For more information on commands, see datasheet
    digitalWrite(A3, LOW);   // Begin SPI conversation
     2bc:	60 e0       	ldi	r22, 0x00	; 0
     2be:	85 e1       	ldi	r24, 0x15	; 21
     2c0:	0e 94 4a 11 	call	0x2294	; 0x2294 <digitalWrite>
    SPI.transfer(0x88);      // Write to MDR0
     2c4:	88 e8       	ldi	r24, 0x88	; 136
     2c6:	0e 94 17 01 	call	0x22e	; 0x22e <_ZN8SPIClass8transferEh>
    SPI.transfer(0x03);      // Configure to 4 byte mode
     2ca:	83 e0       	ldi	r24, 0x03	; 3
     2cc:	0e 94 17 01 	call	0x22e	; 0x22e <_ZN8SPIClass8transferEh>
    digitalWrite(A3, HIGH);  // Terminate SPI conversation
     2d0:	61 e0       	ldi	r22, 0x01	; 1
     2d2:	85 e1       	ldi	r24, 0x15	; 21
     2d4:	0c 94 4a 11 	jmp	0x2294	; 0x2294 <digitalWrite>

000002d8 <_Z11readEncoderi>:
}

long readEncoder(int encoder) {
     2d8:	cf 92       	push	r12
     2da:	df 92       	push	r13
     2dc:	ef 92       	push	r14
     2de:	ff 92       	push	r15
     2e0:	0f 93       	push	r16
     2e2:	1f 93       	push	r17
     2e4:	cf 93       	push	r28
     2e6:	df 93       	push	r29
    // Initialize temporary variables for SPI read
    unsigned int count_1, count_2, count_3, count_4;
    long count_value;

    // Read encoder 1
    if (encoder == 1) {
     2e8:	81 30       	cpi	r24, 0x01	; 1
     2ea:	91 05       	cpc	r25, r1
     2ec:	d1 f4       	brne	.+52     	; 0x322 <_Z11readEncoderi+0x4a>
        // digitalWrite(slaveSelectEnc1,LOW);      // Begin SPI conversation
        PORTE &= 0xFB;                 // Clear PE2
     2ee:	72 98       	cbi	0x0e, 2	; 14
        SPI.transfer(0x60);            // Request count
     2f0:	80 e6       	ldi	r24, 0x60	; 96
     2f2:	0e 94 17 01 	call	0x22e	; 0x22e <_ZN8SPIClass8transferEh>
        count_1 = SPI.transfer(0x00);  // Read highest order byte
     2f6:	80 e0       	ldi	r24, 0x00	; 0
     2f8:	0e 94 17 01 	call	0x22e	; 0x22e <_ZN8SPIClass8transferEh>
     2fc:	c8 2e       	mov	r12, r24
     2fe:	d1 2c       	mov	r13, r1
        count_2 = SPI.transfer(0x00);
     300:	80 e0       	ldi	r24, 0x00	; 0
     302:	0e 94 17 01 	call	0x22e	; 0x22e <_ZN8SPIClass8transferEh>
     306:	e8 2e       	mov	r14, r24
     308:	f1 2c       	mov	r15, r1
        count_3 = SPI.transfer(0x00);
     30a:	80 e0       	ldi	r24, 0x00	; 0
     30c:	0e 94 17 01 	call	0x22e	; 0x22e <_ZN8SPIClass8transferEh>
     310:	08 2f       	mov	r16, r24
     312:	10 e0       	ldi	r17, 0x00	; 0
        count_4 = SPI.transfer(0x00);  // Read lowest order byte
     314:	80 e0       	ldi	r24, 0x00	; 0
     316:	0e 94 17 01 	call	0x22e	; 0x22e <_ZN8SPIClass8transferEh>
     31a:	c8 2f       	mov	r28, r24
     31c:	d0 e0       	ldi	r29, 0x00	; 0
        // digitalWrite(slaveSelectEnc1,HIGH);     // Terminate SPI conversation
        PORTE |= 0x04;  // Set PE2
     31e:	72 9a       	sbi	0x0e, 2	; 14
     320:	63 c0       	rjmp	.+198    	; 0x3e8 <_Z11readEncoderi+0x110>
    }

    // Read encoder 2
    else if (encoder == 2) {
     322:	82 30       	cpi	r24, 0x02	; 2
     324:	91 05       	cpc	r25, r1
     326:	f1 f4       	brne	.+60     	; 0x364 <_Z11readEncoderi+0x8c>
        digitalWrite(slaveSelectEnc2, LOW);  // Begin SPI conversation
     328:	60 e0       	ldi	r22, 0x00	; 0
     32a:	88 e0       	ldi	r24, 0x08	; 8
     32c:	0e 94 4a 11 	call	0x2294	; 0x2294 <digitalWrite>
        SPI.transfer(0x60);                  // Request count
     330:	80 e6       	ldi	r24, 0x60	; 96
     332:	0e 94 17 01 	call	0x22e	; 0x22e <_ZN8SPIClass8transferEh>
        count_1 = SPI.transfer(0x00);        // Read highest order byte
     336:	80 e0       	ldi	r24, 0x00	; 0
     338:	0e 94 17 01 	call	0x22e	; 0x22e <_ZN8SPIClass8transferEh>
     33c:	c8 2e       	mov	r12, r24
     33e:	d1 2c       	mov	r13, r1
        count_2 = SPI.transfer(0x00);
     340:	80 e0       	ldi	r24, 0x00	; 0
     342:	0e 94 17 01 	call	0x22e	; 0x22e <_ZN8SPIClass8transferEh>
     346:	e8 2e       	mov	r14, r24
     348:	f1 2c       	mov	r15, r1
        count_3 = SPI.transfer(0x00);
     34a:	80 e0       	ldi	r24, 0x00	; 0
     34c:	0e 94 17 01 	call	0x22e	; 0x22e <_ZN8SPIClass8transferEh>
     350:	08 2f       	mov	r16, r24
     352:	10 e0       	ldi	r17, 0x00	; 0
        count_4 = SPI.transfer(0x00);         // Read lowest order byte
     354:	80 e0       	ldi	r24, 0x00	; 0
     356:	0e 94 17 01 	call	0x22e	; 0x22e <_ZN8SPIClass8transferEh>
     35a:	c8 2f       	mov	r28, r24
     35c:	d0 e0       	ldi	r29, 0x00	; 0
        digitalWrite(slaveSelectEnc2, HIGH);  // Terminate SPI conversation
     35e:	61 e0       	ldi	r22, 0x01	; 1
     360:	88 e0       	ldi	r24, 0x08	; 8
     362:	40 c0       	rjmp	.+128    	; 0x3e4 <_Z11readEncoderi+0x10c>
    }

    else if (encoder == 3) {
     364:	83 30       	cpi	r24, 0x03	; 3
     366:	91 05       	cpc	r25, r1
     368:	f1 f4       	brne	.+60     	; 0x3a6 <_Z11readEncoderi+0xce>
        digitalWrite(slaveSelectEnc3, LOW);  // Begin SPI conversation
     36a:	60 e0       	ldi	r22, 0x00	; 0
     36c:	87 e0       	ldi	r24, 0x07	; 7
     36e:	0e 94 4a 11 	call	0x2294	; 0x2294 <digitalWrite>
        SPI.transfer(0x60);                  // Request count
     372:	80 e6       	ldi	r24, 0x60	; 96
     374:	0e 94 17 01 	call	0x22e	; 0x22e <_ZN8SPIClass8transferEh>
        count_1 = SPI.transfer(0x00);        // Read highest order byte
     378:	80 e0       	ldi	r24, 0x00	; 0
     37a:	0e 94 17 01 	call	0x22e	; 0x22e <_ZN8SPIClass8transferEh>
     37e:	c8 2e       	mov	r12, r24
     380:	d1 2c       	mov	r13, r1
        count_2 = SPI.transfer(0x00);
     382:	80 e0       	ldi	r24, 0x00	; 0
     384:	0e 94 17 01 	call	0x22e	; 0x22e <_ZN8SPIClass8transferEh>
     388:	e8 2e       	mov	r14, r24
     38a:	f1 2c       	mov	r15, r1
        count_3 = SPI.transfer(0x00);
     38c:	80 e0       	ldi	r24, 0x00	; 0
     38e:	0e 94 17 01 	call	0x22e	; 0x22e <_ZN8SPIClass8transferEh>
     392:	08 2f       	mov	r16, r24
     394:	10 e0       	ldi	r17, 0x00	; 0
        count_4 = SPI.transfer(0x00);         // Read lowest order byte
     396:	80 e0       	ldi	r24, 0x00	; 0
     398:	0e 94 17 01 	call	0x22e	; 0x22e <_ZN8SPIClass8transferEh>
     39c:	c8 2f       	mov	r28, r24
     39e:	d0 e0       	ldi	r29, 0x00	; 0
        digitalWrite(slaveSelectEnc3, HIGH);  // Terminate SPI conversation
     3a0:	61 e0       	ldi	r22, 0x01	; 1
     3a2:	87 e0       	ldi	r24, 0x07	; 7
     3a4:	1f c0       	rjmp	.+62     	; 0x3e4 <_Z11readEncoderi+0x10c>
    }

    // Read encoder 4
    else if (encoder == 4) {
     3a6:	04 97       	sbiw	r24, 0x04	; 4
     3a8:	f9 f4       	brne	.+62     	; 0x3e8 <_Z11readEncoderi+0x110>
        digitalWrite(A3, LOW);         // Begin SPI conversation
     3aa:	60 e0       	ldi	r22, 0x00	; 0
     3ac:	85 e1       	ldi	r24, 0x15	; 21
     3ae:	0e 94 4a 11 	call	0x2294	; 0x2294 <digitalWrite>
        SPI.transfer(0x60);            // Request count
     3b2:	80 e6       	ldi	r24, 0x60	; 96
     3b4:	0e 94 17 01 	call	0x22e	; 0x22e <_ZN8SPIClass8transferEh>
        count_1 = SPI.transfer(0x00);  // Read highest order byte
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	0e 94 17 01 	call	0x22e	; 0x22e <_ZN8SPIClass8transferEh>
     3be:	c8 2e       	mov	r12, r24
     3c0:	d1 2c       	mov	r13, r1
        count_2 = SPI.transfer(0x00);
     3c2:	80 e0       	ldi	r24, 0x00	; 0
     3c4:	0e 94 17 01 	call	0x22e	; 0x22e <_ZN8SPIClass8transferEh>
     3c8:	e8 2e       	mov	r14, r24
     3ca:	f1 2c       	mov	r15, r1
        count_3 = SPI.transfer(0x00);
     3cc:	80 e0       	ldi	r24, 0x00	; 0
     3ce:	0e 94 17 01 	call	0x22e	; 0x22e <_ZN8SPIClass8transferEh>
     3d2:	08 2f       	mov	r16, r24
     3d4:	10 e0       	ldi	r17, 0x00	; 0
        count_4 = SPI.transfer(0x00);  // Read lowest order byte
     3d6:	80 e0       	ldi	r24, 0x00	; 0
     3d8:	0e 94 17 01 	call	0x22e	; 0x22e <_ZN8SPIClass8transferEh>
     3dc:	c8 2f       	mov	r28, r24
     3de:	d0 e0       	ldi	r29, 0x00	; 0
        digitalWrite(A3, HIGH);        // Terminate SPI conversation
     3e0:	61 e0       	ldi	r22, 0x01	; 1
     3e2:	85 e1       	ldi	r24, 0x15	; 21
     3e4:	0e 94 4a 11 	call	0x2294	; 0x2294 <digitalWrite>
    }

    // Calculate encoder count
    count_value = (count_1 << 8) + count_2;
    count_value = (count_value << 8) + count_3;
     3e8:	7c 2d       	mov	r23, r12
     3ea:	66 27       	eor	r22, r22
     3ec:	6e 0d       	add	r22, r14
     3ee:	7f 1d       	adc	r23, r15
     3f0:	cb 01       	movw	r24, r22
     3f2:	a0 e0       	ldi	r26, 0x00	; 0
     3f4:	b0 e0       	ldi	r27, 0x00	; 0
     3f6:	ba 2f       	mov	r27, r26
     3f8:	a9 2f       	mov	r26, r25
     3fa:	98 2f       	mov	r25, r24
     3fc:	88 27       	eor	r24, r24
    count_value = (count_value << 8) + count_4;
     3fe:	80 0f       	add	r24, r16
     400:	91 1f       	adc	r25, r17
     402:	a1 1d       	adc	r26, r1
     404:	b1 1d       	adc	r27, r1
     406:	ba 2f       	mov	r27, r26
     408:	a9 2f       	mov	r26, r25
     40a:	98 2f       	mov	r25, r24
     40c:	88 27       	eor	r24, r24

    return count_value;
     40e:	bc 01       	movw	r22, r24
     410:	cd 01       	movw	r24, r26
     412:	6c 0f       	add	r22, r28
     414:	7d 1f       	adc	r23, r29
     416:	81 1d       	adc	r24, r1
     418:	91 1d       	adc	r25, r1
}
     41a:	df 91       	pop	r29
     41c:	cf 91       	pop	r28
     41e:	1f 91       	pop	r17
     420:	0f 91       	pop	r16
     422:	ff 90       	pop	r15
     424:	ef 90       	pop	r14
     426:	df 90       	pop	r13
     428:	cf 90       	pop	r12
     42a:	08 95       	ret

0000042c <loop>:
    //  cs_3_2.set_CS_AutocaL_Millis(0xFFFFFFFF);     // turn off autocalibrate
    //  on channel 1 - just as an example
    initTimers();
}

void loop() {
     42c:	4f 92       	push	r4
     42e:	5f 92       	push	r5
     430:	6f 92       	push	r6
     432:	7f 92       	push	r7
     434:	8f 92       	push	r8
     436:	9f 92       	push	r9
     438:	af 92       	push	r10
     43a:	bf 92       	push	r11
     43c:	cf 92       	push	r12
     43e:	df 92       	push	r13
     440:	ef 92       	push	r14
     442:	ff 92       	push	r15
     444:	cf 93       	push	r28
     446:	df 93       	push	r29
    //  int pot_val = analogRead(0);
    //  int full_range = 3.0*12*gear_ratio;
    //  des_length1 = map(pot_val, 0, 1023, 0, full_range);
    count = count + 1;
     448:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <count>
     44c:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <count+0x1>
     450:	01 96       	adiw	r24, 0x01	; 1
     452:	90 93 c4 01 	sts	0x01C4, r25	; 0x8001c4 <count+0x1>
     456:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <count>
    if (count < 200) {
     45a:	88 3c       	cpi	r24, 0xC8	; 200
     45c:	91 05       	cpc	r25, r1
     45e:	8c f5       	brge	.+98     	; 0x4c2 <loop+0x96>
        des_length1 = 5.0 * 14 * gear_ratio;
     460:	20 e0       	ldi	r18, 0x00	; 0
     462:	30 e0       	ldi	r19, 0x00	; 0
     464:	4c e8       	ldi	r20, 0x8C	; 140
     466:	52 e4       	ldi	r21, 0x42	; 66
     468:	60 91 3a 01 	lds	r22, 0x013A	; 0x80013a <gear_ratio>
     46c:	70 91 3b 01 	lds	r23, 0x013B	; 0x80013b <gear_ratio+0x1>
     470:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <gear_ratio+0x2>
     474:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <gear_ratio+0x3>
     478:	0e 94 b4 08 	call	0x1168	; 0x1168 <__mulsf3>
     47c:	60 93 df 02 	sts	0x02DF, r22	; 0x8002df <des_length1>
     480:	70 93 e0 02 	sts	0x02E0, r23	; 0x8002e0 <des_length1+0x1>
     484:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <des_length1+0x2>
     488:	90 93 e2 02 	sts	0x02E2, r25	; 0x8002e2 <des_length1+0x3>
        des_length2 = des_length1;
     48c:	60 93 db 02 	sts	0x02DB, r22	; 0x8002db <des_length2>
     490:	70 93 dc 02 	sts	0x02DC, r23	; 0x8002dc <des_length2+0x1>
     494:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <des_length2+0x2>
     498:	90 93 de 02 	sts	0x02DE, r25	; 0x8002de <des_length2+0x3>
        des_length3 = des_length1;
     49c:	60 93 d7 02 	sts	0x02D7, r22	; 0x8002d7 <des_length3>
     4a0:	70 93 d8 02 	sts	0x02D8, r23	; 0x8002d8 <des_length3+0x1>
     4a4:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <des_length3+0x2>
     4a8:	90 93 da 02 	sts	0x02DA, r25	; 0x8002da <des_length3+0x3>

        des_length4 = des_length1;
     4ac:	60 93 d3 02 	sts	0x02D3, r22	; 0x8002d3 <des_length4>
     4b0:	70 93 d4 02 	sts	0x02D4, r23	; 0x8002d4 <des_length4+0x1>
     4b4:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <des_length4+0x2>
     4b8:	90 93 d6 02 	sts	0x02D6, r25	; 0x8002d6 <des_length4+0x3>

        motor_state = 0;
     4bc:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <__data_end>
     4c0:	38 c0       	rjmp	.+112    	; 0x532 <loop+0x106>
    } else if (count < 400) {
     4c2:	80 39       	cpi	r24, 0x90	; 144
     4c4:	91 40       	sbci	r25, 0x01	; 1
     4c6:	8c f5       	brge	.+98     	; 0x52a <loop+0xfe>
        des_length1 = 0.0 * 14 * gear_ratio;
     4c8:	20 e0       	ldi	r18, 0x00	; 0
     4ca:	30 e0       	ldi	r19, 0x00	; 0
     4cc:	a9 01       	movw	r20, r18
     4ce:	60 91 3a 01 	lds	r22, 0x013A	; 0x80013a <gear_ratio>
     4d2:	70 91 3b 01 	lds	r23, 0x013B	; 0x80013b <gear_ratio+0x1>
     4d6:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <gear_ratio+0x2>
     4da:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <gear_ratio+0x3>
     4de:	0e 94 b4 08 	call	0x1168	; 0x1168 <__mulsf3>
     4e2:	60 93 df 02 	sts	0x02DF, r22	; 0x8002df <des_length1>
     4e6:	70 93 e0 02 	sts	0x02E0, r23	; 0x8002e0 <des_length1+0x1>
     4ea:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <des_length1+0x2>
     4ee:	90 93 e2 02 	sts	0x02E2, r25	; 0x8002e2 <des_length1+0x3>
        des_length2 = des_length1;
     4f2:	60 93 db 02 	sts	0x02DB, r22	; 0x8002db <des_length2>
     4f6:	70 93 dc 02 	sts	0x02DC, r23	; 0x8002dc <des_length2+0x1>
     4fa:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <des_length2+0x2>
     4fe:	90 93 de 02 	sts	0x02DE, r25	; 0x8002de <des_length2+0x3>
        des_length3 = des_length1;
     502:	60 93 d7 02 	sts	0x02D7, r22	; 0x8002d7 <des_length3>
     506:	70 93 d8 02 	sts	0x02D8, r23	; 0x8002d8 <des_length3+0x1>
     50a:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <des_length3+0x2>
     50e:	90 93 da 02 	sts	0x02DA, r25	; 0x8002da <des_length3+0x3>

        des_length4 = des_length1;
     512:	60 93 d3 02 	sts	0x02D3, r22	; 0x8002d3 <des_length4>
     516:	70 93 d4 02 	sts	0x02D4, r23	; 0x8002d4 <des_length4+0x1>
     51a:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <des_length4+0x2>
     51e:	90 93 d6 02 	sts	0x02D6, r25	; 0x8002d6 <des_length4+0x3>

        motor_state = 1;
     522:	81 e0       	ldi	r24, 0x01	; 1
     524:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <__data_end>
     528:	04 c0       	rjmp	.+8      	; 0x532 <loop+0x106>
    } else {
        count = 0;
     52a:	10 92 c4 01 	sts	0x01C4, r1	; 0x8001c4 <count+0x1>
     52e:	10 92 c3 01 	sts	0x01C3, r1	; 0x8001c3 <count>
    //  {
    //    timer5_count = 0;
    //  }
    /////////////////////////////////////////////

    encoder1count = readEncoder(1);
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	90 e0       	ldi	r25, 0x00	; 0
     536:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_Z11readEncoderi>
     53a:	60 93 cf 02 	sts	0x02CF, r22	; 0x8002cf <encoder1count>
     53e:	70 93 d0 02 	sts	0x02D0, r23	; 0x8002d0 <encoder1count+0x1>
     542:	80 93 d1 02 	sts	0x02D1, r24	; 0x8002d1 <encoder1count+0x2>
     546:	90 93 d2 02 	sts	0x02D2, r25	; 0x8002d2 <encoder1count+0x3>
    encodercount = (double)encoder1count;
     54a:	0e 94 ff 07 	call	0xffe	; 0xffe <__floatsisf>
     54e:	60 93 bf 02 	sts	0x02BF, r22	; 0x8002bf <encodercount>
     552:	70 93 c0 02 	sts	0x02C0, r23	; 0x8002c0 <encodercount+0x1>
     556:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <encodercount+0x2>
     55a:	90 93 c2 02 	sts	0x02C2, r25	; 0x8002c2 <encodercount+0x3>
    encoder2count = readEncoder(2);
     55e:	82 e0       	ldi	r24, 0x02	; 2
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_Z11readEncoderi>
     566:	60 93 cb 02 	sts	0x02CB, r22	; 0x8002cb <encoder2count>
     56a:	70 93 cc 02 	sts	0x02CC, r23	; 0x8002cc <encoder2count+0x1>
     56e:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <encoder2count+0x2>
     572:	90 93 ce 02 	sts	0x02CE, r25	; 0x8002ce <encoder2count+0x3>
    encodercount2 = (double)encoder2count;
     576:	0e 94 ff 07 	call	0xffe	; 0xffe <__floatsisf>
     57a:	60 93 bb 02 	sts	0x02BB, r22	; 0x8002bb <encodercount2>
     57e:	70 93 bc 02 	sts	0x02BC, r23	; 0x8002bc <encodercount2+0x1>
     582:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <encodercount2+0x2>
     586:	90 93 be 02 	sts	0x02BE, r25	; 0x8002be <encodercount2+0x3>
    encoder3count = readEncoder(3);
     58a:	83 e0       	ldi	r24, 0x03	; 3
     58c:	90 e0       	ldi	r25, 0x00	; 0
     58e:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_Z11readEncoderi>
     592:	60 93 c7 02 	sts	0x02C7, r22	; 0x8002c7 <encoder3count>
     596:	70 93 c8 02 	sts	0x02C8, r23	; 0x8002c8 <encoder3count+0x1>
     59a:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <encoder3count+0x2>
     59e:	90 93 ca 02 	sts	0x02CA, r25	; 0x8002ca <encoder3count+0x3>
    encodercount3 = (double)encoder3count;
     5a2:	0e 94 ff 07 	call	0xffe	; 0xffe <__floatsisf>
     5a6:	60 93 b7 02 	sts	0x02B7, r22	; 0x8002b7 <encodercount3>
     5aa:	70 93 b8 02 	sts	0x02B8, r23	; 0x8002b8 <encodercount3+0x1>
     5ae:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <encodercount3+0x2>
     5b2:	90 93 ba 02 	sts	0x02BA, r25	; 0x8002ba <encodercount3+0x3>

    encoder4count = readEncoder(4);
     5b6:	84 e0       	ldi	r24, 0x04	; 4
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <_Z11readEncoderi>
     5be:	60 93 c3 02 	sts	0x02C3, r22	; 0x8002c3 <encoder4count>
     5c2:	70 93 c4 02 	sts	0x02C4, r23	; 0x8002c4 <encoder4count+0x1>
     5c6:	80 93 c5 02 	sts	0x02C5, r24	; 0x8002c5 <encoder4count+0x2>
     5ca:	90 93 c6 02 	sts	0x02C6, r25	; 0x8002c6 <encoder4count+0x3>
    encodercount4 = (double)encoder4count;
     5ce:	0e 94 ff 07 	call	0xffe	; 0xffe <__floatsisf>
     5d2:	60 93 b3 02 	sts	0x02B3, r22	; 0x8002b3 <encodercount4>
     5d6:	70 93 b4 02 	sts	0x02B4, r23	; 0x8002b4 <encodercount4+0x1>
     5da:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <encodercount4+0x2>
     5de:	90 93 b6 02 	sts	0x02B6, r25	; 0x8002b6 <encodercount4+0x3>

    m1pid.Compute();
     5e2:	8c e7       	ldi	r24, 0x7C	; 124
     5e4:	92 e0       	ldi	r25, 0x02	; 2
     5e6:	0e 94 79 11 	call	0x22f2	; 0x22f2 <_ZN3PID7ComputeEv>
    m2pid.Compute();
     5ea:	85 e4       	ldi	r24, 0x45	; 69
     5ec:	92 e0       	ldi	r25, 0x02	; 2
     5ee:	0e 94 79 11 	call	0x22f2	; 0x22f2 <_ZN3PID7ComputeEv>
    m3pid.Compute();
     5f2:	8e e0       	ldi	r24, 0x0E	; 14
     5f4:	92 e0       	ldi	r25, 0x02	; 2
     5f6:	0e 94 79 11 	call	0x22f2	; 0x22f2 <_ZN3PID7ComputeEv>

    m4pid.Compute();
     5fa:	87 ed       	ldi	r24, 0xD7	; 215
     5fc:	91 e0       	ldi	r25, 0x01	; 1
     5fe:	0e 94 79 11 	call	0x22f2	; 0x22f2 <_ZN3PID7ComputeEv>

    if (mo < 0) {
     602:	20 e0       	ldi	r18, 0x00	; 0
     604:	30 e0       	ldi	r19, 0x00	; 0
     606:	a9 01       	movw	r20, r18
     608:	60 91 f3 02 	lds	r22, 0x02F3	; 0x8002f3 <mo>
     60c:	70 91 f4 02 	lds	r23, 0x02F4	; 0x8002f4 <mo+0x1>
     610:	80 91 f5 02 	lds	r24, 0x02F5	; 0x8002f5 <mo+0x2>
     614:	90 91 f6 02 	lds	r25, 0x02F6	; 0x8002f6 <mo+0x3>
     618:	0e 94 57 07 	call	0xeae	; 0xeae <__cmpsf2>
     61c:	87 ff       	sbrs	r24, 7
     61e:	04 c0       	rjmp	.+8      	; 0x628 <loop+0x1fc>
        MOTOR_ONE_CUR_DIR_COMMAND = 0;
     620:	10 92 37 01 	sts	0x0137, r1	; 0x800137 <MOTOR_ONE_CUR_DIR_COMMAND>
        digitalWrite(MOTOR_ONE_DIR_PIN, LOW);
     624:	60 e0       	ldi	r22, 0x00	; 0
     626:	04 c0       	rjmp	.+8      	; 0x630 <loop+0x204>
    } else {
        MOTOR_ONE_CUR_DIR_COMMAND = 1;
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <MOTOR_ONE_CUR_DIR_COMMAND>
        digitalWrite(MOTOR_ONE_DIR_PIN, HIGH);
     62e:	61 e0       	ldi	r22, 0x01	; 1
     630:	84 e0       	ldi	r24, 0x04	; 4
     632:	0e 94 4a 11 	call	0x2294	; 0x2294 <digitalWrite>
    }

    if (mo2 < 0) {
     636:	20 e0       	ldi	r18, 0x00	; 0
     638:	30 e0       	ldi	r19, 0x00	; 0
     63a:	a9 01       	movw	r20, r18
     63c:	60 91 ef 02 	lds	r22, 0x02EF	; 0x8002ef <mo2>
     640:	70 91 f0 02 	lds	r23, 0x02F0	; 0x8002f0 <mo2+0x1>
     644:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <mo2+0x2>
     648:	90 91 f2 02 	lds	r25, 0x02F2	; 0x8002f2 <mo2+0x3>
     64c:	0e 94 57 07 	call	0xeae	; 0xeae <__cmpsf2>
     650:	87 ff       	sbrs	r24, 7
     652:	04 c0       	rjmp	.+8      	; 0x65c <loop+0x230>
        MOTOR_TWO_CUR_DIR_COMMAND = 0;
     654:	10 92 36 01 	sts	0x0136, r1	; 0x800136 <MOTOR_TWO_CUR_DIR_COMMAND>
        digitalWrite(MOTOR_TWO_DIR_PIN, LOW);
     658:	60 e0       	ldi	r22, 0x00	; 0
     65a:	04 c0       	rjmp	.+8      	; 0x664 <loop+0x238>
    } else {
        MOTOR_TWO_CUR_DIR_COMMAND = 1;
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <MOTOR_TWO_CUR_DIR_COMMAND>
        digitalWrite(MOTOR_TWO_DIR_PIN, HIGH);
     662:	61 e0       	ldi	r22, 0x01	; 1
     664:	86 e0       	ldi	r24, 0x06	; 6
     666:	0e 94 4a 11 	call	0x2294	; 0x2294 <digitalWrite>
    }

    if (mo3 < 0) {
     66a:	20 e0       	ldi	r18, 0x00	; 0
     66c:	30 e0       	ldi	r19, 0x00	; 0
     66e:	a9 01       	movw	r20, r18
     670:	60 91 eb 02 	lds	r22, 0x02EB	; 0x8002eb <mo3>
     674:	70 91 ec 02 	lds	r23, 0x02EC	; 0x8002ec <mo3+0x1>
     678:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <mo3+0x2>
     67c:	90 91 ee 02 	lds	r25, 0x02EE	; 0x8002ee <mo3+0x3>
     680:	0e 94 57 07 	call	0xeae	; 0xeae <__cmpsf2>
     684:	87 ff       	sbrs	r24, 7
     686:	04 c0       	rjmp	.+8      	; 0x690 <loop+0x264>
        MOTOR_THREE_CUR_DIR_COMMAND = 0;
     688:	10 92 35 01 	sts	0x0135, r1	; 0x800135 <MOTOR_THREE_CUR_DIR_COMMAND>
        digitalWrite(MOTOR_THREE_DIR_PIN, LOW);
     68c:	60 e0       	ldi	r22, 0x00	; 0
     68e:	04 c0       	rjmp	.+8      	; 0x698 <loop+0x26c>
    } else {
        MOTOR_THREE_CUR_DIR_COMMAND = 1;
     690:	81 e0       	ldi	r24, 0x01	; 1
     692:	80 93 35 01 	sts	0x0135, r24	; 0x800135 <MOTOR_THREE_CUR_DIR_COMMAND>
        digitalWrite(MOTOR_THREE_DIR_PIN, HIGH);
     696:	61 e0       	ldi	r22, 0x01	; 1
     698:	8c e0       	ldi	r24, 0x0C	; 12
     69a:	0e 94 4a 11 	call	0x2294	; 0x2294 <digitalWrite>
    }

    if (mo4 < 0) {
     69e:	20 e0       	ldi	r18, 0x00	; 0
     6a0:	30 e0       	ldi	r19, 0x00	; 0
     6a2:	a9 01       	movw	r20, r18
     6a4:	60 91 e7 02 	lds	r22, 0x02E7	; 0x8002e7 <mo4>
     6a8:	70 91 e8 02 	lds	r23, 0x02E8	; 0x8002e8 <mo4+0x1>
     6ac:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <mo4+0x2>
     6b0:	90 91 ea 02 	lds	r25, 0x02EA	; 0x8002ea <mo4+0x3>
     6b4:	0e 94 57 07 	call	0xeae	; 0xeae <__cmpsf2>
     6b8:	87 ff       	sbrs	r24, 7
     6ba:	04 c0       	rjmp	.+8      	; 0x6c4 <loop+0x298>
        MOTOR_FOUR_CUR_DIR_COMMAND = 0;
     6bc:	10 92 34 01 	sts	0x0134, r1	; 0x800134 <MOTOR_FOUR_CUR_DIR_COMMAND>
        TXLED1;
     6c0:	5d 98       	cbi	0x0b, 5	; 11
     6c2:	04 c0       	rjmp	.+8      	; 0x6cc <loop+0x2a0>
    } else {
        MOTOR_FOUR_CUR_DIR_COMMAND = 1;
     6c4:	81 e0       	ldi	r24, 0x01	; 1
     6c6:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <MOTOR_FOUR_CUR_DIR_COMMAND>
        TXLED0;
     6ca:	5d 9a       	sbi	0x0b, 5	; 11

    // analogWrite(MOTOR_ONE_PWM_PIN, abs(mo));
    // analogWrite(MOTOR_TWO_PWM_PIN, abs(mo2));
    // analogWrite(MOTOR_THREE_PWM_PIN, abs(mo3));

    OCR3A = abs(mo);   // Send PWM duty cycle to register associate with pin
     6cc:	c0 90 f3 02 	lds	r12, 0x02F3	; 0x8002f3 <mo>
     6d0:	d0 90 f4 02 	lds	r13, 0x02F4	; 0x8002f4 <mo+0x1>
     6d4:	e0 90 f5 02 	lds	r14, 0x02F5	; 0x8002f5 <mo+0x2>
     6d8:	f0 90 f6 02 	lds	r15, 0x02F6	; 0x8002f6 <mo+0x3>
     6dc:	20 e0       	ldi	r18, 0x00	; 0
     6de:	30 e0       	ldi	r19, 0x00	; 0
     6e0:	a9 01       	movw	r20, r18
     6e2:	c7 01       	movw	r24, r14
     6e4:	b6 01       	movw	r22, r12
     6e6:	0e 94 af 08 	call	0x115e	; 0x115e <__gesf2>
     6ea:	18 16       	cp	r1, r24
     6ec:	1c f4       	brge	.+6      	; 0x6f4 <loop+0x2c8>
     6ee:	c7 01       	movw	r24, r14
     6f0:	b6 01       	movw	r22, r12
     6f2:	03 c0       	rjmp	.+6      	; 0x6fa <loop+0x2ce>
     6f4:	c7 01       	movw	r24, r14
     6f6:	b6 01       	movw	r22, r12
     6f8:	90 58       	subi	r25, 0x80	; 128
     6fa:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__fixunssfsi>
     6fe:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <__DATA_REGION_ORIGIN__+0x39>
     702:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <__DATA_REGION_ORIGIN__+0x38>
                       // connected to motor 1
    OCR1A = abs(mo2);  // Send PWM duty cycle to register associate with pin
     706:	c0 90 ef 02 	lds	r12, 0x02EF	; 0x8002ef <mo2>
     70a:	d0 90 f0 02 	lds	r13, 0x02F0	; 0x8002f0 <mo2+0x1>
     70e:	e0 90 f1 02 	lds	r14, 0x02F1	; 0x8002f1 <mo2+0x2>
     712:	f0 90 f2 02 	lds	r15, 0x02F2	; 0x8002f2 <mo2+0x3>
     716:	20 e0       	ldi	r18, 0x00	; 0
     718:	30 e0       	ldi	r19, 0x00	; 0
     71a:	a9 01       	movw	r20, r18
     71c:	c7 01       	movw	r24, r14
     71e:	b6 01       	movw	r22, r12
     720:	0e 94 af 08 	call	0x115e	; 0x115e <__gesf2>
     724:	18 16       	cp	r1, r24
     726:	1c f4       	brge	.+6      	; 0x72e <loop+0x302>
     728:	c7 01       	movw	r24, r14
     72a:	b6 01       	movw	r22, r12
     72c:	03 c0       	rjmp	.+6      	; 0x734 <loop+0x308>
     72e:	c7 01       	movw	r24, r14
     730:	b6 01       	movw	r22, r12
     732:	90 58       	subi	r25, 0x80	; 128
     734:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__fixunssfsi>
     738:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
     73c:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
                       // connected to motor 2
    OCR1B = abs(mo3);  // Send PWM duty cycle to register associate with pin
     740:	c0 90 eb 02 	lds	r12, 0x02EB	; 0x8002eb <mo3>
     744:	d0 90 ec 02 	lds	r13, 0x02EC	; 0x8002ec <mo3+0x1>
     748:	e0 90 ed 02 	lds	r14, 0x02ED	; 0x8002ed <mo3+0x2>
     74c:	f0 90 ee 02 	lds	r15, 0x02EE	; 0x8002ee <mo3+0x3>
     750:	20 e0       	ldi	r18, 0x00	; 0
     752:	30 e0       	ldi	r19, 0x00	; 0
     754:	a9 01       	movw	r20, r18
     756:	c7 01       	movw	r24, r14
     758:	b6 01       	movw	r22, r12
     75a:	0e 94 af 08 	call	0x115e	; 0x115e <__gesf2>
     75e:	18 16       	cp	r1, r24
     760:	1c f4       	brge	.+6      	; 0x768 <loop+0x33c>
     762:	c7 01       	movw	r24, r14
     764:	b6 01       	movw	r22, r12
     766:	03 c0       	rjmp	.+6      	; 0x76e <loop+0x342>
     768:	c7 01       	movw	r24, r14
     76a:	b6 01       	movw	r22, r12
     76c:	90 58       	subi	r25, 0x80	; 128
     76e:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__fixunssfsi>
     772:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
     776:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
                       // connected to motor 3

    OCR4A = abs(mo4);  // Send PWM duty cycle to register associate with pin
     77a:	c0 90 e7 02 	lds	r12, 0x02E7	; 0x8002e7 <mo4>
     77e:	d0 90 e8 02 	lds	r13, 0x02E8	; 0x8002e8 <mo4+0x1>
     782:	e0 90 e9 02 	lds	r14, 0x02E9	; 0x8002e9 <mo4+0x2>
     786:	f0 90 ea 02 	lds	r15, 0x02EA	; 0x8002ea <mo4+0x3>
     78a:	20 e0       	ldi	r18, 0x00	; 0
     78c:	30 e0       	ldi	r19, 0x00	; 0
     78e:	a9 01       	movw	r20, r18
     790:	c7 01       	movw	r24, r14
     792:	b6 01       	movw	r22, r12
     794:	0e 94 af 08 	call	0x115e	; 0x115e <__gesf2>
     798:	18 16       	cp	r1, r24
     79a:	1c f4       	brge	.+6      	; 0x7a2 <loop+0x376>
     79c:	c7 01       	movw	r24, r14
     79e:	b6 01       	movw	r22, r12
     7a0:	03 c0       	rjmp	.+6      	; 0x7a8 <loop+0x37c>
     7a2:	c7 01       	movw	r24, r14
     7a4:	b6 01       	movw	r22, r12
     7a6:	90 58       	subi	r25, 0x80	; 128
     7a8:	0e 94 ce 07 	call	0xf9c	; 0xf9c <__fixunssfsi>
     7ac:	60 93 cf 00 	sts	0x00CF, r22	; 0x8000cf <__DATA_REGION_ORIGIN__+0x6f>
                       // connected to motor 4

    ////// MOTOR CURRENT READING
    // for motor1 (A0), motor2 (A1), motor3 (A2)
    motor1_cur_val = analogRead(A0);
     7b0:	82 e1       	ldi	r24, 0x12	; 18
     7b2:	0e 94 a0 10 	call	0x2140	; 0x2140 <analogRead>
     7b6:	90 93 d6 01 	sts	0x01D6, r25	; 0x8001d6 <motor1_cur_val+0x1>
     7ba:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <motor1_cur_val>
    motor2_cur_val = analogRead(A1);
     7be:	83 e1       	ldi	r24, 0x13	; 19
     7c0:	0e 94 a0 10 	call	0x2140	; 0x2140 <analogRead>
     7c4:	90 93 d4 01 	sts	0x01D4, r25	; 0x8001d4 <motor2_cur_val+0x1>
     7c8:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <motor2_cur_val>
    motor3_cur_val = analogRead(A2);
     7cc:	84 e1       	ldi	r24, 0x14	; 20
     7ce:	0e 94 a0 10 	call	0x2140	; 0x2140 <analogRead>
     7d2:	ec 01       	movw	r28, r24
     7d4:	90 93 d2 01 	sts	0x01D2, r25	; 0x8001d2 <motor3_cur_val+0x1>
     7d8:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <motor3_cur_val>

    m1_cur_val = alpha * motor1_cur_val + (1 - alpha) * m1_cur_val;
     7dc:	c0 90 00 01 	lds	r12, 0x0100	; 0x800100 <__data_start>
     7e0:	d0 90 01 01 	lds	r13, 0x0101	; 0x800101 <__data_start+0x1>
     7e4:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <__data_start+0x2>
     7e8:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <__data_start+0x3>
     7ec:	a7 01       	movw	r20, r14
     7ee:	96 01       	movw	r18, r12
     7f0:	60 e0       	ldi	r22, 0x00	; 0
     7f2:	70 e0       	ldi	r23, 0x00	; 0
     7f4:	80 e8       	ldi	r24, 0x80	; 128
     7f6:	9f e3       	ldi	r25, 0x3F	; 63
     7f8:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <__subsf3>
     7fc:	4b 01       	movw	r8, r22
     7fe:	5c 01       	movw	r10, r24
     800:	60 91 d5 01 	lds	r22, 0x01D5	; 0x8001d5 <motor1_cur_val>
     804:	70 91 d6 01 	lds	r23, 0x01D6	; 0x8001d6 <motor1_cur_val+0x1>
     808:	07 2e       	mov	r0, r23
     80a:	00 0c       	add	r0, r0
     80c:	88 0b       	sbc	r24, r24
     80e:	99 0b       	sbc	r25, r25
     810:	0e 94 ff 07 	call	0xffe	; 0xffe <__floatsisf>
     814:	a7 01       	movw	r20, r14
     816:	96 01       	movw	r18, r12
     818:	0e 94 b4 08 	call	0x1168	; 0x1168 <__mulsf3>
     81c:	2b 01       	movw	r4, r22
     81e:	3c 01       	movw	r6, r24
     820:	20 91 cd 01 	lds	r18, 0x01CD	; 0x8001cd <m1_cur_val>
     824:	30 91 ce 01 	lds	r19, 0x01CE	; 0x8001ce <m1_cur_val+0x1>
     828:	40 91 cf 01 	lds	r20, 0x01CF	; 0x8001cf <m1_cur_val+0x2>
     82c:	50 91 d0 01 	lds	r21, 0x01D0	; 0x8001d0 <m1_cur_val+0x3>
     830:	c5 01       	movw	r24, r10
     832:	b4 01       	movw	r22, r8
     834:	0e 94 b4 08 	call	0x1168	; 0x1168 <__mulsf3>
     838:	9b 01       	movw	r18, r22
     83a:	ac 01       	movw	r20, r24
     83c:	c3 01       	movw	r24, r6
     83e:	b2 01       	movw	r22, r4
     840:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__addsf3>
     844:	60 93 cd 01 	sts	0x01CD, r22	; 0x8001cd <m1_cur_val>
     848:	70 93 ce 01 	sts	0x01CE, r23	; 0x8001ce <m1_cur_val+0x1>
     84c:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <m1_cur_val+0x2>
     850:	90 93 d0 01 	sts	0x01D0, r25	; 0x8001d0 <m1_cur_val+0x3>
    m2_cur_val = alpha * motor2_cur_val + (1 - alpha) * m2_cur_val;
     854:	60 91 d3 01 	lds	r22, 0x01D3	; 0x8001d3 <motor2_cur_val>
     858:	70 91 d4 01 	lds	r23, 0x01D4	; 0x8001d4 <motor2_cur_val+0x1>
     85c:	07 2e       	mov	r0, r23
     85e:	00 0c       	add	r0, r0
     860:	88 0b       	sbc	r24, r24
     862:	99 0b       	sbc	r25, r25
     864:	0e 94 ff 07 	call	0xffe	; 0xffe <__floatsisf>
     868:	a7 01       	movw	r20, r14
     86a:	96 01       	movw	r18, r12
     86c:	0e 94 b4 08 	call	0x1168	; 0x1168 <__mulsf3>
     870:	2b 01       	movw	r4, r22
     872:	3c 01       	movw	r6, r24
     874:	20 91 c9 01 	lds	r18, 0x01C9	; 0x8001c9 <m2_cur_val>
     878:	30 91 ca 01 	lds	r19, 0x01CA	; 0x8001ca <m2_cur_val+0x1>
     87c:	40 91 cb 01 	lds	r20, 0x01CB	; 0x8001cb <m2_cur_val+0x2>
     880:	50 91 cc 01 	lds	r21, 0x01CC	; 0x8001cc <m2_cur_val+0x3>
     884:	c5 01       	movw	r24, r10
     886:	b4 01       	movw	r22, r8
     888:	0e 94 b4 08 	call	0x1168	; 0x1168 <__mulsf3>
     88c:	9b 01       	movw	r18, r22
     88e:	ac 01       	movw	r20, r24
     890:	c3 01       	movw	r24, r6
     892:	b2 01       	movw	r22, r4
     894:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__addsf3>
     898:	60 93 c9 01 	sts	0x01C9, r22	; 0x8001c9 <m2_cur_val>
     89c:	70 93 ca 01 	sts	0x01CA, r23	; 0x8001ca <m2_cur_val+0x1>
     8a0:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <m2_cur_val+0x2>
     8a4:	90 93 cc 01 	sts	0x01CC, r25	; 0x8001cc <m2_cur_val+0x3>
    m3_cur_val = alpha * motor3_cur_val + (1 - alpha) * m3_cur_val;
     8a8:	20 91 c5 01 	lds	r18, 0x01C5	; 0x8001c5 <m3_cur_val>
     8ac:	30 91 c6 01 	lds	r19, 0x01C6	; 0x8001c6 <m3_cur_val+0x1>
     8b0:	40 91 c7 01 	lds	r20, 0x01C7	; 0x8001c7 <m3_cur_val+0x2>
     8b4:	50 91 c8 01 	lds	r21, 0x01C8	; 0x8001c8 <m3_cur_val+0x3>
     8b8:	c5 01       	movw	r24, r10
     8ba:	b4 01       	movw	r22, r8
     8bc:	0e 94 b4 08 	call	0x1168	; 0x1168 <__mulsf3>
     8c0:	4b 01       	movw	r8, r22
     8c2:	5c 01       	movw	r10, r24
     8c4:	be 01       	movw	r22, r28
     8c6:	dd 0f       	add	r29, r29
     8c8:	88 0b       	sbc	r24, r24
     8ca:	99 0b       	sbc	r25, r25
     8cc:	0e 94 ff 07 	call	0xffe	; 0xffe <__floatsisf>
     8d0:	a7 01       	movw	r20, r14
     8d2:	96 01       	movw	r18, r12
     8d4:	0e 94 b4 08 	call	0x1168	; 0x1168 <__mulsf3>
     8d8:	9b 01       	movw	r18, r22
     8da:	ac 01       	movw	r20, r24
     8dc:	c5 01       	movw	r24, r10
     8de:	b4 01       	movw	r22, r8
     8e0:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__addsf3>
     8e4:	60 93 c5 01 	sts	0x01C5, r22	; 0x8001c5 <m3_cur_val>
     8e8:	70 93 c6 01 	sts	0x01C6, r23	; 0x8001c6 <m3_cur_val+0x1>
     8ec:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <m3_cur_val+0x2>
     8f0:	90 93 c8 01 	sts	0x01C8, r25	; 0x8001c8 <m3_cur_val+0x3>

    Serial1.print("try_me:  ");
     8f4:	62 e5       	ldi	r22, 0x52	; 82
     8f6:	71 e0       	ldi	r23, 0x01	; 1
     8f8:	8b ef       	ldi	r24, 0xFB	; 251
     8fa:	92 e0       	ldi	r25, 0x02	; 2
     8fc:	0e 94 2e 0b 	call	0x165c	; 0x165c <_ZN5Print5printEPKc>
    Serial1.println("ahahaha!!");
     900:	6c e5       	ldi	r22, 0x5C	; 92
     902:	71 e0       	ldi	r23, 0x01	; 1
     904:	8b ef       	ldi	r24, 0xFB	; 251
     906:	92 e0       	ldi	r25, 0x02	; 2
     908:	0e 94 34 0b 	call	0x1668	; 0x1668 <_ZN5Print7printlnEPKc>
    Serial1.print("\t");
    Serial1.print(m2_cur_val);
    Serial1.print("\t");
    Serial1.println(m3_cur_val);*/

    delay(5);
     90c:	65 e0       	ldi	r22, 0x05	; 5
     90e:	70 e0       	ldi	r23, 0x00	; 0
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	90 e0       	ldi	r25, 0x00	; 0
        Serial1.print("\t");
        Serial1.print(encodercount2);
        Serial1.print("\t");
        Serial1.println(encodercount3);
    */
}
     914:	df 91       	pop	r29
     916:	cf 91       	pop	r28
     918:	ff 90       	pop	r15
     91a:	ef 90       	pop	r14
     91c:	df 90       	pop	r13
     91e:	cf 90       	pop	r12
     920:	bf 90       	pop	r11
     922:	af 90       	pop	r10
     924:	9f 90       	pop	r9
     926:	8f 90       	pop	r8
     928:	7f 90       	pop	r7
     92a:	6f 90       	pop	r6
     92c:	5f 90       	pop	r5
     92e:	4f 90       	pop	r4
    Serial1.print("\t");
    Serial1.print(m2_cur_val);
    Serial1.print("\t");
    Serial1.println(m3_cur_val);*/

    delay(5);
     930:	0c 94 03 10 	jmp	0x2006	; 0x2006 <delay>

00000934 <_Z17clearEncoderCountv>:
}

void clearEncoderCount() {
    // Set encoder1's data register to 0
    // digitalWrite(slaveSelectEnc1,LOW);      // Begin SPI conversation
    PORTE &= 0xFB;  // Clear PE2
     934:	72 98       	cbi	0x0e, 2	; 14
    // Write to DTR
    SPI.transfer(0x98);
     936:	88 e9       	ldi	r24, 0x98	; 152
     938:	0e 94 17 01 	call	0x22e	; 0x22e <_ZN8SPIClass8transferEh>
    // Load data
    SPI.transfer(0x00);  // Highest order byte
     93c:	80 e0       	ldi	r24, 0x00	; 0
     93e:	0e 94 17 01 	call	0x22e	; 0x22e <_ZN8SPIClass8transferEh>
    SPI.transfer(0x00);
     942:	80 e0       	ldi	r24, 0x00	; 0
     944:	0e 94 17 01 	call	0x22e	; 0x22e <_ZN8SPIClass8transferEh>
    SPI.transfer(0x00);
     948:	80 e0       	ldi	r24, 0x00	; 0
     94a:	0e 94 17 01 	call	0x22e	; 0x22e <_ZN8SPIClass8transferEh>
    SPI.transfer(0x00);  // lowest order byte
     94e:	80 e0       	ldi	r24, 0x00	; 0
     950:	0e 94 17 01 	call	0x22e	; 0x22e <_ZN8SPIClass8transferEh>
    // digitalWrite(slaveSelectEnc1,HIGH);     // Terminate SPI conversation
    PORTE |= 0x04;  // Set PE2
     954:	72 9a       	sbi	0x0e, 2	; 14

    delayMicroseconds(
        100);  // provides some breathing room between SPI conversations
     956:	84 e6       	ldi	r24, 0x64	; 100
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	0e 94 3f 10 	call	0x207e	; 0x207e <delayMicroseconds>

    // Set encoder1's current data register to center
    // digitalWrite(slaveSelectEnc1,LOW);      // Begin SPI conversation
    PORTE &= 0xFB;  // Clear PE2
     95e:	72 98       	cbi	0x0e, 2	; 14
    SPI.transfer(0xE0);
     960:	80 ee       	ldi	r24, 0xE0	; 224
     962:	0e 94 17 01 	call	0x22e	; 0x22e <_ZN8SPIClass8transferEh>
    // digitalWrite(slaveSelectEnc1,HIGH);     // Terminate SPI conversation
    PORTE |= 0x04;  // Set PE2
     966:	72 9a       	sbi	0x0e, 2	; 14

    // Set encoder2's data register to 0
    digitalWrite(slaveSelectEnc2, LOW);  // Begin SPI conversation
     968:	60 e0       	ldi	r22, 0x00	; 0
     96a:	88 e0       	ldi	r24, 0x08	; 8
     96c:	0e 94 4a 11 	call	0x2294	; 0x2294 <digitalWrite>
    // Write to DTR
    SPI.transfer(0x98);
     970:	88 e9       	ldi	r24, 0x98	; 152
     972:	0e 94 17 01 	call	0x22e	; 0x22e <_ZN8SPIClass8transferEh>
    // Load data
    SPI.transfer(0x00);  // Highest order byte
     976:	80 e0       	ldi	r24, 0x00	; 0
     978:	0e 94 17 01 	call	0x22e	; 0x22e <_ZN8SPIClass8transferEh>
    SPI.transfer(0x00);
     97c:	80 e0       	ldi	r24, 0x00	; 0
     97e:	0e 94 17 01 	call	0x22e	; 0x22e <_ZN8SPIClass8transferEh>
    SPI.transfer(0x00);
     982:	80 e0       	ldi	r24, 0x00	; 0
     984:	0e 94 17 01 	call	0x22e	; 0x22e <_ZN8SPIClass8transferEh>
    SPI.transfer(0x00);                   // lowest order byte
     988:	80 e0       	ldi	r24, 0x00	; 0
     98a:	0e 94 17 01 	call	0x22e	; 0x22e <_ZN8SPIClass8transferEh>
    digitalWrite(slaveSelectEnc2, HIGH);  // Terminate SPI conversation
     98e:	61 e0       	ldi	r22, 0x01	; 1
     990:	88 e0       	ldi	r24, 0x08	; 8
     992:	0e 94 4a 11 	call	0x2294	; 0x2294 <digitalWrite>

    delayMicroseconds(
        100);  // provides some breathing room between SPI conversations
     996:	84 e6       	ldi	r24, 0x64	; 100
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	0e 94 3f 10 	call	0x207e	; 0x207e <delayMicroseconds>

    // Set encoder2's current data register to center
    digitalWrite(slaveSelectEnc2, LOW);  // Begin SPI conversation
     99e:	60 e0       	ldi	r22, 0x00	; 0
     9a0:	88 e0       	ldi	r24, 0x08	; 8
     9a2:	0e 94 4a 11 	call	0x2294	; 0x2294 <digitalWrite>
    SPI.transfer(0xE0);
     9a6:	80 ee       	ldi	r24, 0xE0	; 224
     9a8:	0e 94 17 01 	call	0x22e	; 0x22e <_ZN8SPIClass8transferEh>
    digitalWrite(slaveSelectEnc2, HIGH);  // Terminate SPI conversation
     9ac:	61 e0       	ldi	r22, 0x01	; 1
     9ae:	88 e0       	ldi	r24, 0x08	; 8
     9b0:	0e 94 4a 11 	call	0x2294	; 0x2294 <digitalWrite>

    // Set encoder3's data register to 0
    digitalWrite(slaveSelectEnc3, LOW);  // Begin SPI conversation
     9b4:	60 e0       	ldi	r22, 0x00	; 0
     9b6:	87 e0       	ldi	r24, 0x07	; 7
     9b8:	0e 94 4a 11 	call	0x2294	; 0x2294 <digitalWrite>
    // Write to DTR
    SPI.transfer(0x98);
     9bc:	88 e9       	ldi	r24, 0x98	; 152
     9be:	0e 94 17 01 	call	0x22e	; 0x22e <_ZN8SPIClass8transferEh>
    // Load data
    SPI.transfer(0x00);  // Highest order byte
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	0e 94 17 01 	call	0x22e	; 0x22e <_ZN8SPIClass8transferEh>
    SPI.transfer(0x00);
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	0e 94 17 01 	call	0x22e	; 0x22e <_ZN8SPIClass8transferEh>
    SPI.transfer(0x00);
     9ce:	80 e0       	ldi	r24, 0x00	; 0
     9d0:	0e 94 17 01 	call	0x22e	; 0x22e <_ZN8SPIClass8transferEh>
    SPI.transfer(0x00);                   // lowest order byte
     9d4:	80 e0       	ldi	r24, 0x00	; 0
     9d6:	0e 94 17 01 	call	0x22e	; 0x22e <_ZN8SPIClass8transferEh>
    digitalWrite(slaveSelectEnc3, HIGH);  // Terminate SPI conversation
     9da:	61 e0       	ldi	r22, 0x01	; 1
     9dc:	87 e0       	ldi	r24, 0x07	; 7
     9de:	0e 94 4a 11 	call	0x2294	; 0x2294 <digitalWrite>

    delayMicroseconds(
        100);  // provides some breathing room between SPI conversations
     9e2:	84 e6       	ldi	r24, 0x64	; 100
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	0e 94 3f 10 	call	0x207e	; 0x207e <delayMicroseconds>

    // Set encoder3's current data register to center
    digitalWrite(slaveSelectEnc3, LOW);  // Begin SPI conversation
     9ea:	60 e0       	ldi	r22, 0x00	; 0
     9ec:	87 e0       	ldi	r24, 0x07	; 7
     9ee:	0e 94 4a 11 	call	0x2294	; 0x2294 <digitalWrite>
    SPI.transfer(0xE0);
     9f2:	80 ee       	ldi	r24, 0xE0	; 224
     9f4:	0e 94 17 01 	call	0x22e	; 0x22e <_ZN8SPIClass8transferEh>
    digitalWrite(slaveSelectEnc3, HIGH);  // Terminate SPI conversation
     9f8:	61 e0       	ldi	r22, 0x01	; 1
     9fa:	87 e0       	ldi	r24, 0x07	; 7
     9fc:	0e 94 4a 11 	call	0x2294	; 0x2294 <digitalWrite>

    // Set encoder4's data register to 0
    digitalWrite(A3, LOW);  // Begin SPI conversation
     a00:	60 e0       	ldi	r22, 0x00	; 0
     a02:	85 e1       	ldi	r24, 0x15	; 21
     a04:	0e 94 4a 11 	call	0x2294	; 0x2294 <digitalWrite>
    // Write to DTR
    SPI.transfer(0x98);
     a08:	88 e9       	ldi	r24, 0x98	; 152
     a0a:	0e 94 17 01 	call	0x22e	; 0x22e <_ZN8SPIClass8transferEh>
    // Load data
    SPI.transfer(0x00);  // Highest order byte
     a0e:	80 e0       	ldi	r24, 0x00	; 0
     a10:	0e 94 17 01 	call	0x22e	; 0x22e <_ZN8SPIClass8transferEh>
    SPI.transfer(0x00);
     a14:	80 e0       	ldi	r24, 0x00	; 0
     a16:	0e 94 17 01 	call	0x22e	; 0x22e <_ZN8SPIClass8transferEh>
    SPI.transfer(0x00);
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	0e 94 17 01 	call	0x22e	; 0x22e <_ZN8SPIClass8transferEh>
    SPI.transfer(0x00);      // lowest order byte
     a20:	80 e0       	ldi	r24, 0x00	; 0
     a22:	0e 94 17 01 	call	0x22e	; 0x22e <_ZN8SPIClass8transferEh>
    digitalWrite(A3, HIGH);  // Terminate SPI conversation
     a26:	61 e0       	ldi	r22, 0x01	; 1
     a28:	85 e1       	ldi	r24, 0x15	; 21
     a2a:	0e 94 4a 11 	call	0x2294	; 0x2294 <digitalWrite>

    delayMicroseconds(
        100);  // provides some breathing room between SPI conversations
     a2e:	84 e6       	ldi	r24, 0x64	; 100
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	0e 94 3f 10 	call	0x207e	; 0x207e <delayMicroseconds>

    // Set encoder4's current data register to center
    digitalWrite(A3, LOW);  // Begin SPI conversation
     a36:	60 e0       	ldi	r22, 0x00	; 0
     a38:	85 e1       	ldi	r24, 0x15	; 21
     a3a:	0e 94 4a 11 	call	0x2294	; 0x2294 <digitalWrite>
    SPI.transfer(0xE0);
     a3e:	80 ee       	ldi	r24, 0xE0	; 224
     a40:	0e 94 17 01 	call	0x22e	; 0x22e <_ZN8SPIClass8transferEh>
    digitalWrite(A3, HIGH);  // Terminate SPI conversation
     a44:	61 e0       	ldi	r22, 0x01	; 1
     a46:	85 e1       	ldi	r24, 0x15	; 21
     a48:	0c 94 4a 11 	jmp	0x2294	; 0x2294 <digitalWrite>

00000a4c <setup>:
    TCCR4B |= (1 << CS40);   /* PWM Freq = F_CPU/1/256 */
    TCCR4A |= (1 << COM4A1); /* PWM output on OCR4a */
    OCR4C = 255;
}

void setup() {
     a4c:	0f 93       	push	r16
     a4e:	1f 93       	push	r17
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     a50:	26 e0       	ldi	r18, 0x06	; 6
     a52:	40 e8       	ldi	r20, 0x80	; 128
     a54:	55 e2       	ldi	r21, 0x25	; 37
     a56:	60 e0       	ldi	r22, 0x00	; 0
     a58:	70 e0       	ldi	r23, 0x00	; 0
     a5a:	8b ef       	ldi	r24, 0xFB	; 251
     a5c:	92 e0       	ldi	r25, 0x02	; 2
     a5e:	0e 94 e7 09 	call	0x13ce	; 0x13ce <_ZN14HardwareSerial5beginEmh>
    //  Wire.begin(8);
    //  Wire.onReceive(receiveMotorCommand); // register event
    //  Wire.onRequest(requestEncoderData);
    Serial1.begin(9600);
    pinMode(MOTOR_ONE_DIR_PIN, OUTPUT);
     a62:	61 e0       	ldi	r22, 0x01	; 1
     a64:	84 e0       	ldi	r24, 0x04	; 4
     a66:	0e 94 0e 11 	call	0x221c	; 0x221c <pinMode>
    pinMode(MOTOR_ONE_PWM_PIN, OUTPUT);
     a6a:	61 e0       	ldi	r22, 0x01	; 1
     a6c:	85 e0       	ldi	r24, 0x05	; 5
     a6e:	0e 94 0e 11 	call	0x221c	; 0x221c <pinMode>
    pinMode(MOTOR_TWO_DIR_PIN, OUTPUT);
     a72:	61 e0       	ldi	r22, 0x01	; 1
     a74:	86 e0       	ldi	r24, 0x06	; 6
     a76:	0e 94 0e 11 	call	0x221c	; 0x221c <pinMode>
    pinMode(MOTOR_TWO_PWM_PIN, OUTPUT);
     a7a:	61 e0       	ldi	r22, 0x01	; 1
     a7c:	89 e0       	ldi	r24, 0x09	; 9
     a7e:	0e 94 0e 11 	call	0x221c	; 0x221c <pinMode>
    pinMode(MOTOR_THREE_DIR_PIN, OUTPUT);
     a82:	61 e0       	ldi	r22, 0x01	; 1
     a84:	8c e0       	ldi	r24, 0x0C	; 12
     a86:	0e 94 0e 11 	call	0x221c	; 0x221c <pinMode>
    pinMode(MOTOR_THREE_PWM_PIN, OUTPUT);
     a8a:	61 e0       	ldi	r22, 0x01	; 1
     a8c:	8a e0       	ldi	r24, 0x0A	; 10
     a8e:	0e 94 0e 11 	call	0x221c	; 0x221c <pinMode>

    pinMode(MOTOR_FOUR_PWM_PIN, OUTPUT);
     a92:	61 e0       	ldi	r22, 0x01	; 1
     a94:	8d e0       	ldi	r24, 0x0D	; 13
     a96:	0e 94 0e 11 	call	0x221c	; 0x221c <pinMode>
    //  setPwmFrequency(5, 8);
    m1pid.SetMode(AUTOMATIC);
     a9a:	61 e0       	ldi	r22, 0x01	; 1
     a9c:	70 e0       	ldi	r23, 0x00	; 0
     a9e:	8c e7       	ldi	r24, 0x7C	; 124
     aa0:	92 e0       	ldi	r25, 0x02	; 2
     aa2:	0e 94 65 14 	call	0x28ca	; 0x28ca <_ZN3PID7SetModeEi>
    m1pid.SetSampleTime(2);
     aa6:	62 e0       	ldi	r22, 0x02	; 2
     aa8:	70 e0       	ldi	r23, 0x00	; 0
     aaa:	8c e7       	ldi	r24, 0x7C	; 124
     aac:	92 e0       	ldi	r25, 0x02	; 2
     aae:	0e 94 57 13 	call	0x26ae	; 0x26ae <_ZN3PID13SetSampleTimeEi>
    m1pid.SetOutputLimits(-255, 255);
     ab2:	00 e0       	ldi	r16, 0x00	; 0
     ab4:	10 e0       	ldi	r17, 0x00	; 0
     ab6:	2f e7       	ldi	r18, 0x7F	; 127
     ab8:	33 e4       	ldi	r19, 0x43	; 67
     aba:	40 e0       	ldi	r20, 0x00	; 0
     abc:	50 e0       	ldi	r21, 0x00	; 0
     abe:	6f e7       	ldi	r22, 0x7F	; 127
     ac0:	73 ec       	ldi	r23, 0xC3	; 195
     ac2:	8c e7       	ldi	r24, 0x7C	; 124
     ac4:	92 e0       	ldi	r25, 0x02	; 2
     ac6:	0e 94 9f 13 	call	0x273e	; 0x273e <_ZN3PID15SetOutputLimitsEdd>
    m2pid.SetMode(AUTOMATIC);
     aca:	61 e0       	ldi	r22, 0x01	; 1
     acc:	70 e0       	ldi	r23, 0x00	; 0
     ace:	85 e4       	ldi	r24, 0x45	; 69
     ad0:	92 e0       	ldi	r25, 0x02	; 2
     ad2:	0e 94 65 14 	call	0x28ca	; 0x28ca <_ZN3PID7SetModeEi>
    m2pid.SetSampleTime(2);
     ad6:	62 e0       	ldi	r22, 0x02	; 2
     ad8:	70 e0       	ldi	r23, 0x00	; 0
     ada:	85 e4       	ldi	r24, 0x45	; 69
     adc:	92 e0       	ldi	r25, 0x02	; 2
     ade:	0e 94 57 13 	call	0x26ae	; 0x26ae <_ZN3PID13SetSampleTimeEi>
    m2pid.SetOutputLimits(-255, 255);
     ae2:	00 e0       	ldi	r16, 0x00	; 0
     ae4:	10 e0       	ldi	r17, 0x00	; 0
     ae6:	2f e7       	ldi	r18, 0x7F	; 127
     ae8:	33 e4       	ldi	r19, 0x43	; 67
     aea:	40 e0       	ldi	r20, 0x00	; 0
     aec:	50 e0       	ldi	r21, 0x00	; 0
     aee:	6f e7       	ldi	r22, 0x7F	; 127
     af0:	73 ec       	ldi	r23, 0xC3	; 195
     af2:	85 e4       	ldi	r24, 0x45	; 69
     af4:	92 e0       	ldi	r25, 0x02	; 2
     af6:	0e 94 9f 13 	call	0x273e	; 0x273e <_ZN3PID15SetOutputLimitsEdd>
    m3pid.SetMode(AUTOMATIC);
     afa:	61 e0       	ldi	r22, 0x01	; 1
     afc:	70 e0       	ldi	r23, 0x00	; 0
     afe:	8e e0       	ldi	r24, 0x0E	; 14
     b00:	92 e0       	ldi	r25, 0x02	; 2
     b02:	0e 94 65 14 	call	0x28ca	; 0x28ca <_ZN3PID7SetModeEi>
    m3pid.SetSampleTime(2);
     b06:	62 e0       	ldi	r22, 0x02	; 2
     b08:	70 e0       	ldi	r23, 0x00	; 0
     b0a:	8e e0       	ldi	r24, 0x0E	; 14
     b0c:	92 e0       	ldi	r25, 0x02	; 2
     b0e:	0e 94 57 13 	call	0x26ae	; 0x26ae <_ZN3PID13SetSampleTimeEi>
    m3pid.SetOutputLimits(-255, 255);
     b12:	00 e0       	ldi	r16, 0x00	; 0
     b14:	10 e0       	ldi	r17, 0x00	; 0
     b16:	2f e7       	ldi	r18, 0x7F	; 127
     b18:	33 e4       	ldi	r19, 0x43	; 67
     b1a:	40 e0       	ldi	r20, 0x00	; 0
     b1c:	50 e0       	ldi	r21, 0x00	; 0
     b1e:	6f e7       	ldi	r22, 0x7F	; 127
     b20:	73 ec       	ldi	r23, 0xC3	; 195
     b22:	8e e0       	ldi	r24, 0x0E	; 14
     b24:	92 e0       	ldi	r25, 0x02	; 2
     b26:	0e 94 9f 13 	call	0x273e	; 0x273e <_ZN3PID15SetOutputLimitsEdd>

    m4pid.SetMode(AUTOMATIC);
     b2a:	61 e0       	ldi	r22, 0x01	; 1
     b2c:	70 e0       	ldi	r23, 0x00	; 0
     b2e:	87 ed       	ldi	r24, 0xD7	; 215
     b30:	91 e0       	ldi	r25, 0x01	; 1
     b32:	0e 94 65 14 	call	0x28ca	; 0x28ca <_ZN3PID7SetModeEi>
    m4pid.SetSampleTime(2);
     b36:	62 e0       	ldi	r22, 0x02	; 2
     b38:	70 e0       	ldi	r23, 0x00	; 0
     b3a:	87 ed       	ldi	r24, 0xD7	; 215
     b3c:	91 e0       	ldi	r25, 0x01	; 1
     b3e:	0e 94 57 13 	call	0x26ae	; 0x26ae <_ZN3PID13SetSampleTimeEi>
    m4pid.SetOutputLimits(-255, 255);
     b42:	00 e0       	ldi	r16, 0x00	; 0
     b44:	10 e0       	ldi	r17, 0x00	; 0
     b46:	2f e7       	ldi	r18, 0x7F	; 127
     b48:	33 e4       	ldi	r19, 0x43	; 67
     b4a:	40 e0       	ldi	r20, 0x00	; 0
     b4c:	50 e0       	ldi	r21, 0x00	; 0
     b4e:	6f e7       	ldi	r22, 0x7F	; 127
     b50:	73 ec       	ldi	r23, 0xC3	; 195
     b52:	87 ed       	ldi	r24, 0xD7	; 215
     b54:	91 e0       	ldi	r25, 0x01	; 1
     b56:	0e 94 9f 13 	call	0x273e	; 0x273e <_ZN3PID15SetOutputLimitsEdd>

    initEncoders();
     b5a:	0e 94 1e 01 	call	0x23c	; 0x23c <_Z12initEncodersv>
    Serial1.println("Encoders Initialized...");
     b5e:	66 e6       	ldi	r22, 0x66	; 102
     b60:	71 e0       	ldi	r23, 0x01	; 1
     b62:	8b ef       	ldi	r24, 0xFB	; 251
     b64:	92 e0       	ldi	r25, 0x02	; 2
     b66:	0e 94 34 0b 	call	0x1668	; 0x1668 <_ZN5Print7printlnEPKc>
    delay(5);
     b6a:	65 e0       	ldi	r22, 0x05	; 5
     b6c:	70 e0       	ldi	r23, 0x00	; 0
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	90 e0       	ldi	r25, 0x00	; 0
     b72:	0e 94 03 10 	call	0x2006	; 0x2006 <delay>
    clearEncoderCount();
     b76:	0e 94 9a 04 	call	0x934	; 0x934 <_Z17clearEncoderCountv>
    Serial1.println("Encoders Cleared...");
     b7a:	6e e7       	ldi	r22, 0x7E	; 126
     b7c:	71 e0       	ldi	r23, 0x01	; 1
     b7e:	8b ef       	ldi	r24, 0xFB	; 251
     b80:	92 e0       	ldi	r25, 0x02	; 2
     b82:	0e 94 34 0b 	call	0x1668	; 0x1668 <_ZN5Print7printlnEPKc>
static inline void initTimers(void) {
    // Init timers for motor PWM using Fast PWM mode, use this instead of analog
    // to get changeable PWM frequency

    // Timer 1 A,B
    TCCR1A |= (1 << WGM10);  /* Fast PWM mode, 8-bit */
     b86:	e0 e8       	ldi	r30, 0x80	; 128
     b88:	f0 e0       	ldi	r31, 0x00	; 0
     b8a:	80 81       	ld	r24, Z
     b8c:	81 60       	ori	r24, 0x01	; 1
     b8e:	80 83       	st	Z, r24
    TCCR1B |= (1 << WGM12);  /* Fast PWM mode, pt.2 */
     b90:	a1 e8       	ldi	r26, 0x81	; 129
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	8c 91       	ld	r24, X
     b96:	88 60       	ori	r24, 0x08	; 8
     b98:	8c 93       	st	X, r24
    TCCR1B |= (1 << CS10);   /* PWM Freq = F_CPU//256, F_CPU = 16,000,000 in our
     b9a:	8c 91       	ld	r24, X
     b9c:	81 60       	ori	r24, 0x01	; 1
     b9e:	8c 93       	st	X, r24
                                case, this setup gives 7.8 kHz*/
    TCCR1A |= (1 << COM1A1); /* PWM output on OCR1A */
     ba0:	80 81       	ld	r24, Z
     ba2:	80 68       	ori	r24, 0x80	; 128
     ba4:	80 83       	st	Z, r24
    TCCR1A |= (1 << COM1B1); /* PWM output on OCR1B */
     ba6:	80 81       	ld	r24, Z
     ba8:	80 62       	ori	r24, 0x20	; 32
     baa:	80 83       	st	Z, r24

    // Timer 3 A
    TCCR3A |= (1 << WGM10);  /* Fast PWM mode, 8-bit */
     bac:	e0 e9       	ldi	r30, 0x90	; 144
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	80 81       	ld	r24, Z
     bb2:	81 60       	ori	r24, 0x01	; 1
     bb4:	80 83       	st	Z, r24
    TCCR3B |= (1 << WGM12);  /* Fast PWM mode, pt.2 */
     bb6:	a1 e9       	ldi	r26, 0x91	; 145
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	8c 91       	ld	r24, X
     bbc:	88 60       	ori	r24, 0x08	; 8
     bbe:	8c 93       	st	X, r24
    TCCR3B |= (1 << CS30);   /* PWM Freq = F_CPU/1/256 */
     bc0:	8c 91       	ld	r24, X
     bc2:	81 60       	ori	r24, 0x01	; 1
     bc4:	8c 93       	st	X, r24
    TCCR3A |= (1 << COM3A1); /* PWM output on OCR3A */
     bc6:	80 81       	ld	r24, Z
     bc8:	80 68       	ori	r24, 0x80	; 128
     bca:	80 83       	st	Z, r24

    // Timer 4 A
    TCCR4A |= (1 << PWM4A);  /* Fast PWM mode, 8-bit */
     bcc:	e0 ec       	ldi	r30, 0xC0	; 192
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	80 81       	ld	r24, Z
     bd2:	82 60       	ori	r24, 0x02	; 2
     bd4:	80 83       	st	Z, r24
    TCCR4D |= (0 << WGM40);  /* Fast PWM mode, pt.2 */
     bd6:	a3 ec       	ldi	r26, 0xC3	; 195
     bd8:	b0 e0       	ldi	r27, 0x00	; 0
     bda:	8c 91       	ld	r24, X
     bdc:	8c 93       	st	X, r24
    TCCR4B |= (1 << CS40);   /* PWM Freq = F_CPU/1/256 */
     bde:	a1 ec       	ldi	r26, 0xC1	; 193
     be0:	b0 e0       	ldi	r27, 0x00	; 0
     be2:	8c 91       	ld	r24, X
     be4:	81 60       	ori	r24, 0x01	; 1
     be6:	8c 93       	st	X, r24
    TCCR4A |= (1 << COM4A1); /* PWM output on OCR4a */
     be8:	80 81       	ld	r24, Z
     bea:	80 68       	ori	r24, 0x80	; 128
     bec:	80 83       	st	Z, r24
    OCR4C = 255;
     bee:	8f ef       	ldi	r24, 0xFF	; 255
     bf0:	80 93 d1 00 	sts	0x00D1, r24	; 0x8000d1 <__DATA_REGION_ORIGIN__+0x71>
    Serial1.println("Encoders Cleared...");

    //  cs_3_2.set_CS_AutocaL_Millis(0xFFFFFFFF);     // turn off autocalibrate
    //  on channel 1 - just as an example
    initTimers();
}
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	08 95       	ret

00000bfa <_GLOBAL__sub_I_gear_ratio>:

    // Set encoder4's current data register to center
    digitalWrite(A3, LOW);  // Begin SPI conversation
    SPI.transfer(0xE0);
    digitalWrite(A3, HIGH);  // Terminate SPI conversation
}
     bfa:	af 92       	push	r10
     bfc:	bf 92       	push	r11
     bfe:	cf 92       	push	r12
     c00:	df 92       	push	r13
     c02:	ef 92       	push	r14
     c04:	ff 92       	push	r15
     c06:	0f 93       	push	r16
     c08:	1f 93       	push	r17
// op-amp used for amplifying the current sensing int touch_sense_thres = 1000;
// int contact_count = 0;

float gear_ratio = 300.0;  // for 1000:1 gear ratio, 986*12 = 11832 = 1 rotation
int encoder_ticks_per_rev = 14;
float encoder_ticks_to_angle =
     c0a:	60 91 38 01 	lds	r22, 0x0138	; 0x800138 <encoder_ticks_per_rev>
     c0e:	70 91 39 01 	lds	r23, 0x0139	; 0x800139 <encoder_ticks_per_rev+0x1>
     c12:	07 2e       	mov	r0, r23
     c14:	00 0c       	add	r0, r0
     c16:	88 0b       	sbc	r24, r24
     c18:	99 0b       	sbc	r25, r25
     c1a:	0e 94 ff 07 	call	0xffe	; 0xffe <__floatsisf>
     c1e:	20 91 3a 01 	lds	r18, 0x013A	; 0x80013a <gear_ratio>
     c22:	30 91 3b 01 	lds	r19, 0x013B	; 0x80013b <gear_ratio+0x1>
     c26:	40 91 3c 01 	lds	r20, 0x013C	; 0x80013c <gear_ratio+0x2>
     c2a:	50 91 3d 01 	lds	r21, 0x013D	; 0x80013d <gear_ratio+0x3>
     c2e:	0e 94 b4 08 	call	0x1168	; 0x1168 <__mulsf3>
     c32:	9b 01       	movw	r18, r22
     c34:	ac 01       	movw	r20, r24
     c36:	60 e0       	ldi	r22, 0x00	; 0
     c38:	70 e0       	ldi	r23, 0x00	; 0
     c3a:	84 eb       	ldi	r24, 0xB4	; 180
     c3c:	93 e4       	ldi	r25, 0x43	; 67
     c3e:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <__divsf3>
     c42:	60 93 f7 02 	sts	0x02F7, r22	; 0x8002f7 <encoder_ticks_to_angle>
     c46:	70 93 f8 02 	sts	0x02F8, r23	; 0x8002f8 <encoder_ticks_to_angle+0x1>
     c4a:	80 93 f9 02 	sts	0x02F9, r24	; 0x8002f9 <encoder_ticks_to_angle+0x2>
     c4e:	90 93 fa 02 	sts	0x02FA, r25	; 0x8002fa <encoder_ticks_to_angle+0x3>
byte MOTOR_TWO_CUR_DIR_COMMAND = 1;
byte MOTOR_THREE_CUR_DIR_COMMAND = 1;

byte MOTOR_FOUR_CUR_DIR_COMMAND = 1;

byte MOTOR_ONE_PREV_DIR_COMMAND = MOTOR_ONE_CUR_DIR_COMMAND;
     c52:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <MOTOR_ONE_CUR_DIR_COMMAND>
     c56:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <MOTOR_ONE_PREV_DIR_COMMAND>
byte MOTOR_TWO_PREV_DIR_COMMAND = MOTOR_TWO_CUR_DIR_COMMAND;
     c5a:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <MOTOR_TWO_CUR_DIR_COMMAND>
     c5e:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <MOTOR_TWO_PREV_DIR_COMMAND>
byte MOTOR_THREE_PREV_DIR_COMMAND = MOTOR_THREE_CUR_DIR_COMMAND;
     c62:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <MOTOR_THREE_CUR_DIR_COMMAND>
     c66:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <MOTOR_THREE_PREV_DIR_COMMAND>

byte MOTOR_FOUR_PREV_DIR_COMMAND = MOTOR_FOUR_CUR_DIR_COMMAND;
     c6a:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <MOTOR_FOUR_CUR_DIR_COMMAND>
     c6e:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <MOTOR_FOUR_PREV_DIR_COMMAND>
bool timer5_flag = false;
bool switch_direction_buffer_state = false;
long timer5_count = 0;

// PID m1pid(&ticks, &mo, &des_length1, Kp1, Ki1, Kd1, DIRECT);
PID m1pid(&encodercount, &mo, &des_length1, Kp1, Ki1, Kd1, DIRECT);
     c72:	a0 90 2c 01 	lds	r10, 0x012C	; 0x80012c <Ki1>
     c76:	b0 90 2d 01 	lds	r11, 0x012D	; 0x80012d <Ki1+0x1>
     c7a:	c0 90 2e 01 	lds	r12, 0x012E	; 0x80012e <Ki1+0x2>
     c7e:	d0 90 2f 01 	lds	r13, 0x012F	; 0x80012f <Ki1+0x3>
     c82:	e0 90 30 01 	lds	r14, 0x0130	; 0x800130 <Kp1>
     c86:	f0 90 31 01 	lds	r15, 0x0131	; 0x800131 <Kp1+0x1>
     c8a:	00 91 32 01 	lds	r16, 0x0132	; 0x800132 <Kp1+0x2>
     c8e:	10 91 33 01 	lds	r17, 0x0133	; 0x800133 <Kp1+0x3>
     c92:	1f 92       	push	r1
     c94:	1f 92       	push	r1
     c96:	80 91 2b 01 	lds	r24, 0x012B	; 0x80012b <Kd1+0x3>
     c9a:	8f 93       	push	r24
     c9c:	80 91 2a 01 	lds	r24, 0x012A	; 0x80012a <Kd1+0x2>
     ca0:	8f 93       	push	r24
     ca2:	80 91 29 01 	lds	r24, 0x0129	; 0x800129 <Kd1+0x1>
     ca6:	8f 93       	push	r24
     ca8:	80 91 28 01 	lds	r24, 0x0128	; 0x800128 <Kd1>
     cac:	8f 93       	push	r24
     cae:	2f ed       	ldi	r18, 0xDF	; 223
     cb0:	32 e0       	ldi	r19, 0x02	; 2
     cb2:	43 ef       	ldi	r20, 0xF3	; 243
     cb4:	52 e0       	ldi	r21, 0x02	; 2
     cb6:	6f eb       	ldi	r22, 0xBF	; 191
     cb8:	72 e0       	ldi	r23, 0x02	; 2
     cba:	8c e7       	ldi	r24, 0x7C	; 124
     cbc:	92 e0       	ldi	r25, 0x02	; 2
     cbe:	0e 94 b7 14 	call	0x296e	; 0x296e <_ZN3PIDC1EPdS0_S0_dddi>
PID m2pid(&encodercount2, &mo2, &des_length2, Kp2, Ki2, Kd2, DIRECT);
     cc2:	a0 90 20 01 	lds	r10, 0x0120	; 0x800120 <Ki2>
     cc6:	b0 90 21 01 	lds	r11, 0x0121	; 0x800121 <Ki2+0x1>
     cca:	c0 90 22 01 	lds	r12, 0x0122	; 0x800122 <Ki2+0x2>
     cce:	d0 90 23 01 	lds	r13, 0x0123	; 0x800123 <Ki2+0x3>
     cd2:	e0 90 24 01 	lds	r14, 0x0124	; 0x800124 <Kp2>
     cd6:	f0 90 25 01 	lds	r15, 0x0125	; 0x800125 <Kp2+0x1>
     cda:	00 91 26 01 	lds	r16, 0x0126	; 0x800126 <Kp2+0x2>
     cde:	10 91 27 01 	lds	r17, 0x0127	; 0x800127 <Kp2+0x3>
     ce2:	1f 92       	push	r1
     ce4:	1f 92       	push	r1
     ce6:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <Kd2+0x3>
     cea:	8f 93       	push	r24
     cec:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <Kd2+0x2>
     cf0:	8f 93       	push	r24
     cf2:	80 91 1d 01 	lds	r24, 0x011D	; 0x80011d <Kd2+0x1>
     cf6:	8f 93       	push	r24
     cf8:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <Kd2>
     cfc:	8f 93       	push	r24
     cfe:	2b ed       	ldi	r18, 0xDB	; 219
     d00:	32 e0       	ldi	r19, 0x02	; 2
     d02:	4f ee       	ldi	r20, 0xEF	; 239
     d04:	52 e0       	ldi	r21, 0x02	; 2
     d06:	6b eb       	ldi	r22, 0xBB	; 187
     d08:	72 e0       	ldi	r23, 0x02	; 2
     d0a:	85 e4       	ldi	r24, 0x45	; 69
     d0c:	92 e0       	ldi	r25, 0x02	; 2
     d0e:	0e 94 b7 14 	call	0x296e	; 0x296e <_ZN3PIDC1EPdS0_S0_dddi>
PID m3pid(&encodercount3, &mo3, &des_length3, Kp3, Ki3, Kd3, DIRECT);
     d12:	a0 90 14 01 	lds	r10, 0x0114	; 0x800114 <Ki3>
     d16:	b0 90 15 01 	lds	r11, 0x0115	; 0x800115 <Ki3+0x1>
     d1a:	c0 90 16 01 	lds	r12, 0x0116	; 0x800116 <Ki3+0x2>
     d1e:	d0 90 17 01 	lds	r13, 0x0117	; 0x800117 <Ki3+0x3>
     d22:	e0 90 18 01 	lds	r14, 0x0118	; 0x800118 <Kp3>
     d26:	f0 90 19 01 	lds	r15, 0x0119	; 0x800119 <Kp3+0x1>
     d2a:	00 91 1a 01 	lds	r16, 0x011A	; 0x80011a <Kp3+0x2>
     d2e:	10 91 1b 01 	lds	r17, 0x011B	; 0x80011b <Kp3+0x3>
     d32:	1f 92       	push	r1
     d34:	1f 92       	push	r1
     d36:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <Kd3+0x3>
     d3a:	8f 93       	push	r24
     d3c:	80 91 12 01 	lds	r24, 0x0112	; 0x800112 <Kd3+0x2>
     d40:	8f 93       	push	r24
     d42:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <Kd3+0x1>
     d46:	8f 93       	push	r24
     d48:	80 91 10 01 	lds	r24, 0x0110	; 0x800110 <Kd3>
     d4c:	8f 93       	push	r24
     d4e:	27 ed       	ldi	r18, 0xD7	; 215
     d50:	32 e0       	ldi	r19, 0x02	; 2
     d52:	4b ee       	ldi	r20, 0xEB	; 235
     d54:	52 e0       	ldi	r21, 0x02	; 2
     d56:	67 eb       	ldi	r22, 0xB7	; 183
     d58:	72 e0       	ldi	r23, 0x02	; 2
     d5a:	8e e0       	ldi	r24, 0x0E	; 14
     d5c:	92 e0       	ldi	r25, 0x02	; 2
     d5e:	0e 94 b7 14 	call	0x296e	; 0x296e <_ZN3PIDC1EPdS0_S0_dddi>

PID m4pid(&encodercount4, &mo4, &des_length4, Kp4, Ki4, Kd4, DIRECT);
     d62:	a0 90 08 01 	lds	r10, 0x0108	; 0x800108 <Ki4>
     d66:	b0 90 09 01 	lds	r11, 0x0109	; 0x800109 <Ki4+0x1>
     d6a:	c0 90 0a 01 	lds	r12, 0x010A	; 0x80010a <Ki4+0x2>
     d6e:	d0 90 0b 01 	lds	r13, 0x010B	; 0x80010b <Ki4+0x3>
     d72:	e0 90 0c 01 	lds	r14, 0x010C	; 0x80010c <Kp4>
     d76:	f0 90 0d 01 	lds	r15, 0x010D	; 0x80010d <Kp4+0x1>
     d7a:	00 91 0e 01 	lds	r16, 0x010E	; 0x80010e <Kp4+0x2>
     d7e:	10 91 0f 01 	lds	r17, 0x010F	; 0x80010f <Kp4+0x3>
     d82:	1f 92       	push	r1
     d84:	1f 92       	push	r1
     d86:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <Kd4+0x3>
     d8a:	8f 93       	push	r24
     d8c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <Kd4+0x2>
     d90:	8f 93       	push	r24
     d92:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <Kd4+0x1>
     d96:	8f 93       	push	r24
     d98:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <Kd4>
     d9c:	8f 93       	push	r24
     d9e:	23 ed       	ldi	r18, 0xD3	; 211
     da0:	32 e0       	ldi	r19, 0x02	; 2
     da2:	47 ee       	ldi	r20, 0xE7	; 231
     da4:	52 e0       	ldi	r21, 0x02	; 2
     da6:	63 eb       	ldi	r22, 0xB3	; 179
     da8:	72 e0       	ldi	r23, 0x02	; 2
     daa:	87 ed       	ldi	r24, 0xD7	; 215
     dac:	91 e0       	ldi	r25, 0x01	; 1
     dae:	0e 94 b7 14 	call	0x296e	; 0x296e <_ZN3PIDC1EPdS0_S0_dddi>

    // Set encoder4's current data register to center
    digitalWrite(A3, LOW);  // Begin SPI conversation
    SPI.transfer(0xE0);
    digitalWrite(A3, HIGH);  // Terminate SPI conversation
}
     db2:	8d b7       	in	r24, 0x3d	; 61
     db4:	9e b7       	in	r25, 0x3e	; 62
     db6:	48 96       	adiw	r24, 0x18	; 24
     db8:	0f b6       	in	r0, 0x3f	; 63
     dba:	f8 94       	cli
     dbc:	9e bf       	out	0x3e, r25	; 62
     dbe:	0f be       	out	0x3f, r0	; 63
     dc0:	8d bf       	out	0x3d, r24	; 61
     dc2:	1f 91       	pop	r17
     dc4:	0f 91       	pop	r16
     dc6:	ff 90       	pop	r15
     dc8:	ef 90       	pop	r14
     dca:	df 90       	pop	r13
     dcc:	cf 90       	pop	r12
     dce:	bf 90       	pop	r11
     dd0:	af 90       	pop	r10
     dd2:	08 95       	ret

00000dd4 <__subsf3>:
     dd4:	50 58       	subi	r21, 0x80	; 128

00000dd6 <__addsf3>:
     dd6:	bb 27       	eor	r27, r27
     dd8:	aa 27       	eor	r26, r26
     dda:	0e 94 02 07 	call	0xe04	; 0xe04 <__addsf3x>
     dde:	0c 94 75 08 	jmp	0x10ea	; 0x10ea <__fp_round>
     de2:	0e 94 67 08 	call	0x10ce	; 0x10ce <__fp_pscA>
     de6:	38 f0       	brcs	.+14     	; 0xdf6 <__addsf3+0x20>
     de8:	0e 94 6e 08 	call	0x10dc	; 0x10dc <__fp_pscB>
     dec:	20 f0       	brcs	.+8      	; 0xdf6 <__addsf3+0x20>
     dee:	39 f4       	brne	.+14     	; 0xdfe <__addsf3+0x28>
     df0:	9f 3f       	cpi	r25, 0xFF	; 255
     df2:	19 f4       	brne	.+6      	; 0xdfa <__addsf3+0x24>
     df4:	26 f4       	brtc	.+8      	; 0xdfe <__addsf3+0x28>
     df6:	0c 94 64 08 	jmp	0x10c8	; 0x10c8 <__fp_nan>
     dfa:	0e f4       	brtc	.+2      	; 0xdfe <__addsf3+0x28>
     dfc:	e0 95       	com	r30
     dfe:	e7 fb       	bst	r30, 7
     e00:	0c 94 5e 08 	jmp	0x10bc	; 0x10bc <__fp_inf>

00000e04 <__addsf3x>:
     e04:	e9 2f       	mov	r30, r25
     e06:	0e 94 86 08 	call	0x110c	; 0x110c <__fp_split3>
     e0a:	58 f3       	brcs	.-42     	; 0xde2 <__addsf3+0xc>
     e0c:	ba 17       	cp	r27, r26
     e0e:	62 07       	cpc	r22, r18
     e10:	73 07       	cpc	r23, r19
     e12:	84 07       	cpc	r24, r20
     e14:	95 07       	cpc	r25, r21
     e16:	20 f0       	brcs	.+8      	; 0xe20 <__addsf3x+0x1c>
     e18:	79 f4       	brne	.+30     	; 0xe38 <__addsf3x+0x34>
     e1a:	a6 f5       	brtc	.+104    	; 0xe84 <__addsf3x+0x80>
     e1c:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__fp_zero>
     e20:	0e f4       	brtc	.+2      	; 0xe24 <__addsf3x+0x20>
     e22:	e0 95       	com	r30
     e24:	0b 2e       	mov	r0, r27
     e26:	ba 2f       	mov	r27, r26
     e28:	a0 2d       	mov	r26, r0
     e2a:	0b 01       	movw	r0, r22
     e2c:	b9 01       	movw	r22, r18
     e2e:	90 01       	movw	r18, r0
     e30:	0c 01       	movw	r0, r24
     e32:	ca 01       	movw	r24, r20
     e34:	a0 01       	movw	r20, r0
     e36:	11 24       	eor	r1, r1
     e38:	ff 27       	eor	r31, r31
     e3a:	59 1b       	sub	r21, r25
     e3c:	99 f0       	breq	.+38     	; 0xe64 <__addsf3x+0x60>
     e3e:	59 3f       	cpi	r21, 0xF9	; 249
     e40:	50 f4       	brcc	.+20     	; 0xe56 <__addsf3x+0x52>
     e42:	50 3e       	cpi	r21, 0xE0	; 224
     e44:	68 f1       	brcs	.+90     	; 0xea0 <__addsf3x+0x9c>
     e46:	1a 16       	cp	r1, r26
     e48:	f0 40       	sbci	r31, 0x00	; 0
     e4a:	a2 2f       	mov	r26, r18
     e4c:	23 2f       	mov	r18, r19
     e4e:	34 2f       	mov	r19, r20
     e50:	44 27       	eor	r20, r20
     e52:	58 5f       	subi	r21, 0xF8	; 248
     e54:	f3 cf       	rjmp	.-26     	; 0xe3c <__addsf3x+0x38>
     e56:	46 95       	lsr	r20
     e58:	37 95       	ror	r19
     e5a:	27 95       	ror	r18
     e5c:	a7 95       	ror	r26
     e5e:	f0 40       	sbci	r31, 0x00	; 0
     e60:	53 95       	inc	r21
     e62:	c9 f7       	brne	.-14     	; 0xe56 <__addsf3x+0x52>
     e64:	7e f4       	brtc	.+30     	; 0xe84 <__addsf3x+0x80>
     e66:	1f 16       	cp	r1, r31
     e68:	ba 0b       	sbc	r27, r26
     e6a:	62 0b       	sbc	r22, r18
     e6c:	73 0b       	sbc	r23, r19
     e6e:	84 0b       	sbc	r24, r20
     e70:	ba f0       	brmi	.+46     	; 0xea0 <__addsf3x+0x9c>
     e72:	91 50       	subi	r25, 0x01	; 1
     e74:	a1 f0       	breq	.+40     	; 0xe9e <__addsf3x+0x9a>
     e76:	ff 0f       	add	r31, r31
     e78:	bb 1f       	adc	r27, r27
     e7a:	66 1f       	adc	r22, r22
     e7c:	77 1f       	adc	r23, r23
     e7e:	88 1f       	adc	r24, r24
     e80:	c2 f7       	brpl	.-16     	; 0xe72 <__addsf3x+0x6e>
     e82:	0e c0       	rjmp	.+28     	; 0xea0 <__addsf3x+0x9c>
     e84:	ba 0f       	add	r27, r26
     e86:	62 1f       	adc	r22, r18
     e88:	73 1f       	adc	r23, r19
     e8a:	84 1f       	adc	r24, r20
     e8c:	48 f4       	brcc	.+18     	; 0xea0 <__addsf3x+0x9c>
     e8e:	87 95       	ror	r24
     e90:	77 95       	ror	r23
     e92:	67 95       	ror	r22
     e94:	b7 95       	ror	r27
     e96:	f7 95       	ror	r31
     e98:	9e 3f       	cpi	r25, 0xFE	; 254
     e9a:	08 f0       	brcs	.+2      	; 0xe9e <__addsf3x+0x9a>
     e9c:	b0 cf       	rjmp	.-160    	; 0xdfe <__addsf3+0x28>
     e9e:	93 95       	inc	r25
     ea0:	88 0f       	add	r24, r24
     ea2:	08 f0       	brcs	.+2      	; 0xea6 <__addsf3x+0xa2>
     ea4:	99 27       	eor	r25, r25
     ea6:	ee 0f       	add	r30, r30
     ea8:	97 95       	ror	r25
     eaa:	87 95       	ror	r24
     eac:	08 95       	ret

00000eae <__cmpsf2>:
     eae:	0e 94 3a 08 	call	0x1074	; 0x1074 <__fp_cmp>
     eb2:	08 f4       	brcc	.+2      	; 0xeb6 <__cmpsf2+0x8>
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	08 95       	ret

00000eb8 <__divsf3>:
     eb8:	0e 94 70 07 	call	0xee0	; 0xee0 <__divsf3x>
     ebc:	0c 94 75 08 	jmp	0x10ea	; 0x10ea <__fp_round>
     ec0:	0e 94 6e 08 	call	0x10dc	; 0x10dc <__fp_pscB>
     ec4:	58 f0       	brcs	.+22     	; 0xedc <__divsf3+0x24>
     ec6:	0e 94 67 08 	call	0x10ce	; 0x10ce <__fp_pscA>
     eca:	40 f0       	brcs	.+16     	; 0xedc <__divsf3+0x24>
     ecc:	29 f4       	brne	.+10     	; 0xed8 <__divsf3+0x20>
     ece:	5f 3f       	cpi	r21, 0xFF	; 255
     ed0:	29 f0       	breq	.+10     	; 0xedc <__divsf3+0x24>
     ed2:	0c 94 5e 08 	jmp	0x10bc	; 0x10bc <__fp_inf>
     ed6:	51 11       	cpse	r21, r1
     ed8:	0c 94 a9 08 	jmp	0x1152	; 0x1152 <__fp_szero>
     edc:	0c 94 64 08 	jmp	0x10c8	; 0x10c8 <__fp_nan>

00000ee0 <__divsf3x>:
     ee0:	0e 94 86 08 	call	0x110c	; 0x110c <__fp_split3>
     ee4:	68 f3       	brcs	.-38     	; 0xec0 <__divsf3+0x8>

00000ee6 <__divsf3_pse>:
     ee6:	99 23       	and	r25, r25
     ee8:	b1 f3       	breq	.-20     	; 0xed6 <__divsf3+0x1e>
     eea:	55 23       	and	r21, r21
     eec:	91 f3       	breq	.-28     	; 0xed2 <__divsf3+0x1a>
     eee:	95 1b       	sub	r25, r21
     ef0:	55 0b       	sbc	r21, r21
     ef2:	bb 27       	eor	r27, r27
     ef4:	aa 27       	eor	r26, r26
     ef6:	62 17       	cp	r22, r18
     ef8:	73 07       	cpc	r23, r19
     efa:	84 07       	cpc	r24, r20
     efc:	38 f0       	brcs	.+14     	; 0xf0c <__divsf3_pse+0x26>
     efe:	9f 5f       	subi	r25, 0xFF	; 255
     f00:	5f 4f       	sbci	r21, 0xFF	; 255
     f02:	22 0f       	add	r18, r18
     f04:	33 1f       	adc	r19, r19
     f06:	44 1f       	adc	r20, r20
     f08:	aa 1f       	adc	r26, r26
     f0a:	a9 f3       	breq	.-22     	; 0xef6 <__divsf3_pse+0x10>
     f0c:	35 d0       	rcall	.+106    	; 0xf78 <__divsf3_pse+0x92>
     f0e:	0e 2e       	mov	r0, r30
     f10:	3a f0       	brmi	.+14     	; 0xf20 <__divsf3_pse+0x3a>
     f12:	e0 e8       	ldi	r30, 0x80	; 128
     f14:	32 d0       	rcall	.+100    	; 0xf7a <__divsf3_pse+0x94>
     f16:	91 50       	subi	r25, 0x01	; 1
     f18:	50 40       	sbci	r21, 0x00	; 0
     f1a:	e6 95       	lsr	r30
     f1c:	00 1c       	adc	r0, r0
     f1e:	ca f7       	brpl	.-14     	; 0xf12 <__divsf3_pse+0x2c>
     f20:	2b d0       	rcall	.+86     	; 0xf78 <__divsf3_pse+0x92>
     f22:	fe 2f       	mov	r31, r30
     f24:	29 d0       	rcall	.+82     	; 0xf78 <__divsf3_pse+0x92>
     f26:	66 0f       	add	r22, r22
     f28:	77 1f       	adc	r23, r23
     f2a:	88 1f       	adc	r24, r24
     f2c:	bb 1f       	adc	r27, r27
     f2e:	26 17       	cp	r18, r22
     f30:	37 07       	cpc	r19, r23
     f32:	48 07       	cpc	r20, r24
     f34:	ab 07       	cpc	r26, r27
     f36:	b0 e8       	ldi	r27, 0x80	; 128
     f38:	09 f0       	breq	.+2      	; 0xf3c <__divsf3_pse+0x56>
     f3a:	bb 0b       	sbc	r27, r27
     f3c:	80 2d       	mov	r24, r0
     f3e:	bf 01       	movw	r22, r30
     f40:	ff 27       	eor	r31, r31
     f42:	93 58       	subi	r25, 0x83	; 131
     f44:	5f 4f       	sbci	r21, 0xFF	; 255
     f46:	3a f0       	brmi	.+14     	; 0xf56 <__divsf3_pse+0x70>
     f48:	9e 3f       	cpi	r25, 0xFE	; 254
     f4a:	51 05       	cpc	r21, r1
     f4c:	78 f0       	brcs	.+30     	; 0xf6c <__divsf3_pse+0x86>
     f4e:	0c 94 5e 08 	jmp	0x10bc	; 0x10bc <__fp_inf>
     f52:	0c 94 a9 08 	jmp	0x1152	; 0x1152 <__fp_szero>
     f56:	5f 3f       	cpi	r21, 0xFF	; 255
     f58:	e4 f3       	brlt	.-8      	; 0xf52 <__divsf3_pse+0x6c>
     f5a:	98 3e       	cpi	r25, 0xE8	; 232
     f5c:	d4 f3       	brlt	.-12     	; 0xf52 <__divsf3_pse+0x6c>
     f5e:	86 95       	lsr	r24
     f60:	77 95       	ror	r23
     f62:	67 95       	ror	r22
     f64:	b7 95       	ror	r27
     f66:	f7 95       	ror	r31
     f68:	9f 5f       	subi	r25, 0xFF	; 255
     f6a:	c9 f7       	brne	.-14     	; 0xf5e <__divsf3_pse+0x78>
     f6c:	88 0f       	add	r24, r24
     f6e:	91 1d       	adc	r25, r1
     f70:	96 95       	lsr	r25
     f72:	87 95       	ror	r24
     f74:	97 f9       	bld	r25, 7
     f76:	08 95       	ret
     f78:	e1 e0       	ldi	r30, 0x01	; 1
     f7a:	66 0f       	add	r22, r22
     f7c:	77 1f       	adc	r23, r23
     f7e:	88 1f       	adc	r24, r24
     f80:	bb 1f       	adc	r27, r27
     f82:	62 17       	cp	r22, r18
     f84:	73 07       	cpc	r23, r19
     f86:	84 07       	cpc	r24, r20
     f88:	ba 07       	cpc	r27, r26
     f8a:	20 f0       	brcs	.+8      	; 0xf94 <__divsf3_pse+0xae>
     f8c:	62 1b       	sub	r22, r18
     f8e:	73 0b       	sbc	r23, r19
     f90:	84 0b       	sbc	r24, r20
     f92:	ba 0b       	sbc	r27, r26
     f94:	ee 1f       	adc	r30, r30
     f96:	88 f7       	brcc	.-30     	; 0xf7a <__divsf3_pse+0x94>
     f98:	e0 95       	com	r30
     f9a:	08 95       	ret

00000f9c <__fixunssfsi>:
     f9c:	0e 94 8e 08 	call	0x111c	; 0x111c <__fp_splitA>
     fa0:	88 f0       	brcs	.+34     	; 0xfc4 <__fixunssfsi+0x28>
     fa2:	9f 57       	subi	r25, 0x7F	; 127
     fa4:	98 f0       	brcs	.+38     	; 0xfcc <__fixunssfsi+0x30>
     fa6:	b9 2f       	mov	r27, r25
     fa8:	99 27       	eor	r25, r25
     faa:	b7 51       	subi	r27, 0x17	; 23
     fac:	b0 f0       	brcs	.+44     	; 0xfda <__fixunssfsi+0x3e>
     fae:	e1 f0       	breq	.+56     	; 0xfe8 <__fixunssfsi+0x4c>
     fb0:	66 0f       	add	r22, r22
     fb2:	77 1f       	adc	r23, r23
     fb4:	88 1f       	adc	r24, r24
     fb6:	99 1f       	adc	r25, r25
     fb8:	1a f0       	brmi	.+6      	; 0xfc0 <__fixunssfsi+0x24>
     fba:	ba 95       	dec	r27
     fbc:	c9 f7       	brne	.-14     	; 0xfb0 <__fixunssfsi+0x14>
     fbe:	14 c0       	rjmp	.+40     	; 0xfe8 <__fixunssfsi+0x4c>
     fc0:	b1 30       	cpi	r27, 0x01	; 1
     fc2:	91 f0       	breq	.+36     	; 0xfe8 <__fixunssfsi+0x4c>
     fc4:	0e 94 a8 08 	call	0x1150	; 0x1150 <__fp_zero>
     fc8:	b1 e0       	ldi	r27, 0x01	; 1
     fca:	08 95       	ret
     fcc:	0c 94 a8 08 	jmp	0x1150	; 0x1150 <__fp_zero>
     fd0:	67 2f       	mov	r22, r23
     fd2:	78 2f       	mov	r23, r24
     fd4:	88 27       	eor	r24, r24
     fd6:	b8 5f       	subi	r27, 0xF8	; 248
     fd8:	39 f0       	breq	.+14     	; 0xfe8 <__fixunssfsi+0x4c>
     fda:	b9 3f       	cpi	r27, 0xF9	; 249
     fdc:	cc f3       	brlt	.-14     	; 0xfd0 <__fixunssfsi+0x34>
     fde:	86 95       	lsr	r24
     fe0:	77 95       	ror	r23
     fe2:	67 95       	ror	r22
     fe4:	b3 95       	inc	r27
     fe6:	d9 f7       	brne	.-10     	; 0xfde <__fixunssfsi+0x42>
     fe8:	3e f4       	brtc	.+14     	; 0xff8 <__fixunssfsi+0x5c>
     fea:	90 95       	com	r25
     fec:	80 95       	com	r24
     fee:	70 95       	com	r23
     ff0:	61 95       	neg	r22
     ff2:	7f 4f       	sbci	r23, 0xFF	; 255
     ff4:	8f 4f       	sbci	r24, 0xFF	; 255
     ff6:	9f 4f       	sbci	r25, 0xFF	; 255
     ff8:	08 95       	ret

00000ffa <__floatunsisf>:
     ffa:	e8 94       	clt
     ffc:	09 c0       	rjmp	.+18     	; 0x1010 <__floatsisf+0x12>

00000ffe <__floatsisf>:
     ffe:	97 fb       	bst	r25, 7
    1000:	3e f4       	brtc	.+14     	; 0x1010 <__floatsisf+0x12>
    1002:	90 95       	com	r25
    1004:	80 95       	com	r24
    1006:	70 95       	com	r23
    1008:	61 95       	neg	r22
    100a:	7f 4f       	sbci	r23, 0xFF	; 255
    100c:	8f 4f       	sbci	r24, 0xFF	; 255
    100e:	9f 4f       	sbci	r25, 0xFF	; 255
    1010:	99 23       	and	r25, r25
    1012:	a9 f0       	breq	.+42     	; 0x103e <__floatsisf+0x40>
    1014:	f9 2f       	mov	r31, r25
    1016:	96 e9       	ldi	r25, 0x96	; 150
    1018:	bb 27       	eor	r27, r27
    101a:	93 95       	inc	r25
    101c:	f6 95       	lsr	r31
    101e:	87 95       	ror	r24
    1020:	77 95       	ror	r23
    1022:	67 95       	ror	r22
    1024:	b7 95       	ror	r27
    1026:	f1 11       	cpse	r31, r1
    1028:	f8 cf       	rjmp	.-16     	; 0x101a <__floatsisf+0x1c>
    102a:	fa f4       	brpl	.+62     	; 0x106a <__floatsisf+0x6c>
    102c:	bb 0f       	add	r27, r27
    102e:	11 f4       	brne	.+4      	; 0x1034 <__floatsisf+0x36>
    1030:	60 ff       	sbrs	r22, 0
    1032:	1b c0       	rjmp	.+54     	; 0x106a <__floatsisf+0x6c>
    1034:	6f 5f       	subi	r22, 0xFF	; 255
    1036:	7f 4f       	sbci	r23, 0xFF	; 255
    1038:	8f 4f       	sbci	r24, 0xFF	; 255
    103a:	9f 4f       	sbci	r25, 0xFF	; 255
    103c:	16 c0       	rjmp	.+44     	; 0x106a <__floatsisf+0x6c>
    103e:	88 23       	and	r24, r24
    1040:	11 f0       	breq	.+4      	; 0x1046 <__floatsisf+0x48>
    1042:	96 e9       	ldi	r25, 0x96	; 150
    1044:	11 c0       	rjmp	.+34     	; 0x1068 <__floatsisf+0x6a>
    1046:	77 23       	and	r23, r23
    1048:	21 f0       	breq	.+8      	; 0x1052 <__floatsisf+0x54>
    104a:	9e e8       	ldi	r25, 0x8E	; 142
    104c:	87 2f       	mov	r24, r23
    104e:	76 2f       	mov	r23, r22
    1050:	05 c0       	rjmp	.+10     	; 0x105c <__floatsisf+0x5e>
    1052:	66 23       	and	r22, r22
    1054:	71 f0       	breq	.+28     	; 0x1072 <__floatsisf+0x74>
    1056:	96 e8       	ldi	r25, 0x86	; 134
    1058:	86 2f       	mov	r24, r22
    105a:	70 e0       	ldi	r23, 0x00	; 0
    105c:	60 e0       	ldi	r22, 0x00	; 0
    105e:	2a f0       	brmi	.+10     	; 0x106a <__floatsisf+0x6c>
    1060:	9a 95       	dec	r25
    1062:	66 0f       	add	r22, r22
    1064:	77 1f       	adc	r23, r23
    1066:	88 1f       	adc	r24, r24
    1068:	da f7       	brpl	.-10     	; 0x1060 <__floatsisf+0x62>
    106a:	88 0f       	add	r24, r24
    106c:	96 95       	lsr	r25
    106e:	87 95       	ror	r24
    1070:	97 f9       	bld	r25, 7
    1072:	08 95       	ret

00001074 <__fp_cmp>:
    1074:	99 0f       	add	r25, r25
    1076:	00 08       	sbc	r0, r0
    1078:	55 0f       	add	r21, r21
    107a:	aa 0b       	sbc	r26, r26
    107c:	e0 e8       	ldi	r30, 0x80	; 128
    107e:	fe ef       	ldi	r31, 0xFE	; 254
    1080:	16 16       	cp	r1, r22
    1082:	17 06       	cpc	r1, r23
    1084:	e8 07       	cpc	r30, r24
    1086:	f9 07       	cpc	r31, r25
    1088:	c0 f0       	brcs	.+48     	; 0x10ba <__fp_cmp+0x46>
    108a:	12 16       	cp	r1, r18
    108c:	13 06       	cpc	r1, r19
    108e:	e4 07       	cpc	r30, r20
    1090:	f5 07       	cpc	r31, r21
    1092:	98 f0       	brcs	.+38     	; 0x10ba <__fp_cmp+0x46>
    1094:	62 1b       	sub	r22, r18
    1096:	73 0b       	sbc	r23, r19
    1098:	84 0b       	sbc	r24, r20
    109a:	95 0b       	sbc	r25, r21
    109c:	39 f4       	brne	.+14     	; 0x10ac <__fp_cmp+0x38>
    109e:	0a 26       	eor	r0, r26
    10a0:	61 f0       	breq	.+24     	; 0x10ba <__fp_cmp+0x46>
    10a2:	23 2b       	or	r18, r19
    10a4:	24 2b       	or	r18, r20
    10a6:	25 2b       	or	r18, r21
    10a8:	21 f4       	brne	.+8      	; 0x10b2 <__fp_cmp+0x3e>
    10aa:	08 95       	ret
    10ac:	0a 26       	eor	r0, r26
    10ae:	09 f4       	brne	.+2      	; 0x10b2 <__fp_cmp+0x3e>
    10b0:	a1 40       	sbci	r26, 0x01	; 1
    10b2:	a6 95       	lsr	r26
    10b4:	8f ef       	ldi	r24, 0xFF	; 255
    10b6:	81 1d       	adc	r24, r1
    10b8:	81 1d       	adc	r24, r1
    10ba:	08 95       	ret

000010bc <__fp_inf>:
    10bc:	97 f9       	bld	r25, 7
    10be:	9f 67       	ori	r25, 0x7F	; 127
    10c0:	80 e8       	ldi	r24, 0x80	; 128
    10c2:	70 e0       	ldi	r23, 0x00	; 0
    10c4:	60 e0       	ldi	r22, 0x00	; 0
    10c6:	08 95       	ret

000010c8 <__fp_nan>:
    10c8:	9f ef       	ldi	r25, 0xFF	; 255
    10ca:	80 ec       	ldi	r24, 0xC0	; 192
    10cc:	08 95       	ret

000010ce <__fp_pscA>:
    10ce:	00 24       	eor	r0, r0
    10d0:	0a 94       	dec	r0
    10d2:	16 16       	cp	r1, r22
    10d4:	17 06       	cpc	r1, r23
    10d6:	18 06       	cpc	r1, r24
    10d8:	09 06       	cpc	r0, r25
    10da:	08 95       	ret

000010dc <__fp_pscB>:
    10dc:	00 24       	eor	r0, r0
    10de:	0a 94       	dec	r0
    10e0:	12 16       	cp	r1, r18
    10e2:	13 06       	cpc	r1, r19
    10e4:	14 06       	cpc	r1, r20
    10e6:	05 06       	cpc	r0, r21
    10e8:	08 95       	ret

000010ea <__fp_round>:
    10ea:	09 2e       	mov	r0, r25
    10ec:	03 94       	inc	r0
    10ee:	00 0c       	add	r0, r0
    10f0:	11 f4       	brne	.+4      	; 0x10f6 <__fp_round+0xc>
    10f2:	88 23       	and	r24, r24
    10f4:	52 f0       	brmi	.+20     	; 0x110a <__fp_round+0x20>
    10f6:	bb 0f       	add	r27, r27
    10f8:	40 f4       	brcc	.+16     	; 0x110a <__fp_round+0x20>
    10fa:	bf 2b       	or	r27, r31
    10fc:	11 f4       	brne	.+4      	; 0x1102 <__fp_round+0x18>
    10fe:	60 ff       	sbrs	r22, 0
    1100:	04 c0       	rjmp	.+8      	; 0x110a <__fp_round+0x20>
    1102:	6f 5f       	subi	r22, 0xFF	; 255
    1104:	7f 4f       	sbci	r23, 0xFF	; 255
    1106:	8f 4f       	sbci	r24, 0xFF	; 255
    1108:	9f 4f       	sbci	r25, 0xFF	; 255
    110a:	08 95       	ret

0000110c <__fp_split3>:
    110c:	57 fd       	sbrc	r21, 7
    110e:	90 58       	subi	r25, 0x80	; 128
    1110:	44 0f       	add	r20, r20
    1112:	55 1f       	adc	r21, r21
    1114:	59 f0       	breq	.+22     	; 0x112c <__fp_splitA+0x10>
    1116:	5f 3f       	cpi	r21, 0xFF	; 255
    1118:	71 f0       	breq	.+28     	; 0x1136 <__fp_splitA+0x1a>
    111a:	47 95       	ror	r20

0000111c <__fp_splitA>:
    111c:	88 0f       	add	r24, r24
    111e:	97 fb       	bst	r25, 7
    1120:	99 1f       	adc	r25, r25
    1122:	61 f0       	breq	.+24     	; 0x113c <__fp_splitA+0x20>
    1124:	9f 3f       	cpi	r25, 0xFF	; 255
    1126:	79 f0       	breq	.+30     	; 0x1146 <__fp_splitA+0x2a>
    1128:	87 95       	ror	r24
    112a:	08 95       	ret
    112c:	12 16       	cp	r1, r18
    112e:	13 06       	cpc	r1, r19
    1130:	14 06       	cpc	r1, r20
    1132:	55 1f       	adc	r21, r21
    1134:	f2 cf       	rjmp	.-28     	; 0x111a <__fp_split3+0xe>
    1136:	46 95       	lsr	r20
    1138:	f1 df       	rcall	.-30     	; 0x111c <__fp_splitA>
    113a:	08 c0       	rjmp	.+16     	; 0x114c <__fp_splitA+0x30>
    113c:	16 16       	cp	r1, r22
    113e:	17 06       	cpc	r1, r23
    1140:	18 06       	cpc	r1, r24
    1142:	99 1f       	adc	r25, r25
    1144:	f1 cf       	rjmp	.-30     	; 0x1128 <__fp_splitA+0xc>
    1146:	86 95       	lsr	r24
    1148:	71 05       	cpc	r23, r1
    114a:	61 05       	cpc	r22, r1
    114c:	08 94       	sec
    114e:	08 95       	ret

00001150 <__fp_zero>:
    1150:	e8 94       	clt

00001152 <__fp_szero>:
    1152:	bb 27       	eor	r27, r27
    1154:	66 27       	eor	r22, r22
    1156:	77 27       	eor	r23, r23
    1158:	cb 01       	movw	r24, r22
    115a:	97 f9       	bld	r25, 7
    115c:	08 95       	ret

0000115e <__gesf2>:
    115e:	0e 94 3a 08 	call	0x1074	; 0x1074 <__fp_cmp>
    1162:	08 f4       	brcc	.+2      	; 0x1166 <__gesf2+0x8>
    1164:	8f ef       	ldi	r24, 0xFF	; 255
    1166:	08 95       	ret

00001168 <__mulsf3>:
    1168:	0e 94 c7 08 	call	0x118e	; 0x118e <__mulsf3x>
    116c:	0c 94 75 08 	jmp	0x10ea	; 0x10ea <__fp_round>
    1170:	0e 94 67 08 	call	0x10ce	; 0x10ce <__fp_pscA>
    1174:	38 f0       	brcs	.+14     	; 0x1184 <__mulsf3+0x1c>
    1176:	0e 94 6e 08 	call	0x10dc	; 0x10dc <__fp_pscB>
    117a:	20 f0       	brcs	.+8      	; 0x1184 <__mulsf3+0x1c>
    117c:	95 23       	and	r25, r21
    117e:	11 f0       	breq	.+4      	; 0x1184 <__mulsf3+0x1c>
    1180:	0c 94 5e 08 	jmp	0x10bc	; 0x10bc <__fp_inf>
    1184:	0c 94 64 08 	jmp	0x10c8	; 0x10c8 <__fp_nan>
    1188:	11 24       	eor	r1, r1
    118a:	0c 94 a9 08 	jmp	0x1152	; 0x1152 <__fp_szero>

0000118e <__mulsf3x>:
    118e:	0e 94 86 08 	call	0x110c	; 0x110c <__fp_split3>
    1192:	70 f3       	brcs	.-36     	; 0x1170 <__mulsf3+0x8>

00001194 <__mulsf3_pse>:
    1194:	95 9f       	mul	r25, r21
    1196:	c1 f3       	breq	.-16     	; 0x1188 <__mulsf3+0x20>
    1198:	95 0f       	add	r25, r21
    119a:	50 e0       	ldi	r21, 0x00	; 0
    119c:	55 1f       	adc	r21, r21
    119e:	62 9f       	mul	r22, r18
    11a0:	f0 01       	movw	r30, r0
    11a2:	72 9f       	mul	r23, r18
    11a4:	bb 27       	eor	r27, r27
    11a6:	f0 0d       	add	r31, r0
    11a8:	b1 1d       	adc	r27, r1
    11aa:	63 9f       	mul	r22, r19
    11ac:	aa 27       	eor	r26, r26
    11ae:	f0 0d       	add	r31, r0
    11b0:	b1 1d       	adc	r27, r1
    11b2:	aa 1f       	adc	r26, r26
    11b4:	64 9f       	mul	r22, r20
    11b6:	66 27       	eor	r22, r22
    11b8:	b0 0d       	add	r27, r0
    11ba:	a1 1d       	adc	r26, r1
    11bc:	66 1f       	adc	r22, r22
    11be:	82 9f       	mul	r24, r18
    11c0:	22 27       	eor	r18, r18
    11c2:	b0 0d       	add	r27, r0
    11c4:	a1 1d       	adc	r26, r1
    11c6:	62 1f       	adc	r22, r18
    11c8:	73 9f       	mul	r23, r19
    11ca:	b0 0d       	add	r27, r0
    11cc:	a1 1d       	adc	r26, r1
    11ce:	62 1f       	adc	r22, r18
    11d0:	83 9f       	mul	r24, r19
    11d2:	a0 0d       	add	r26, r0
    11d4:	61 1d       	adc	r22, r1
    11d6:	22 1f       	adc	r18, r18
    11d8:	74 9f       	mul	r23, r20
    11da:	33 27       	eor	r19, r19
    11dc:	a0 0d       	add	r26, r0
    11de:	61 1d       	adc	r22, r1
    11e0:	23 1f       	adc	r18, r19
    11e2:	84 9f       	mul	r24, r20
    11e4:	60 0d       	add	r22, r0
    11e6:	21 1d       	adc	r18, r1
    11e8:	82 2f       	mov	r24, r18
    11ea:	76 2f       	mov	r23, r22
    11ec:	6a 2f       	mov	r22, r26
    11ee:	11 24       	eor	r1, r1
    11f0:	9f 57       	subi	r25, 0x7F	; 127
    11f2:	50 40       	sbci	r21, 0x00	; 0
    11f4:	9a f0       	brmi	.+38     	; 0x121c <__mulsf3_pse+0x88>
    11f6:	f1 f0       	breq	.+60     	; 0x1234 <__mulsf3_pse+0xa0>
    11f8:	88 23       	and	r24, r24
    11fa:	4a f0       	brmi	.+18     	; 0x120e <__mulsf3_pse+0x7a>
    11fc:	ee 0f       	add	r30, r30
    11fe:	ff 1f       	adc	r31, r31
    1200:	bb 1f       	adc	r27, r27
    1202:	66 1f       	adc	r22, r22
    1204:	77 1f       	adc	r23, r23
    1206:	88 1f       	adc	r24, r24
    1208:	91 50       	subi	r25, 0x01	; 1
    120a:	50 40       	sbci	r21, 0x00	; 0
    120c:	a9 f7       	brne	.-22     	; 0x11f8 <__mulsf3_pse+0x64>
    120e:	9e 3f       	cpi	r25, 0xFE	; 254
    1210:	51 05       	cpc	r21, r1
    1212:	80 f0       	brcs	.+32     	; 0x1234 <__mulsf3_pse+0xa0>
    1214:	0c 94 5e 08 	jmp	0x10bc	; 0x10bc <__fp_inf>
    1218:	0c 94 a9 08 	jmp	0x1152	; 0x1152 <__fp_szero>
    121c:	5f 3f       	cpi	r21, 0xFF	; 255
    121e:	e4 f3       	brlt	.-8      	; 0x1218 <__mulsf3_pse+0x84>
    1220:	98 3e       	cpi	r25, 0xE8	; 232
    1222:	d4 f3       	brlt	.-12     	; 0x1218 <__mulsf3_pse+0x84>
    1224:	86 95       	lsr	r24
    1226:	77 95       	ror	r23
    1228:	67 95       	ror	r22
    122a:	b7 95       	ror	r27
    122c:	f7 95       	ror	r31
    122e:	e7 95       	ror	r30
    1230:	9f 5f       	subi	r25, 0xFF	; 255
    1232:	c1 f7       	brne	.-16     	; 0x1224 <__mulsf3_pse+0x90>
    1234:	fe 2b       	or	r31, r30
    1236:	88 0f       	add	r24, r24
    1238:	91 1d       	adc	r25, r1
    123a:	96 95       	lsr	r25
    123c:	87 95       	ror	r24
    123e:	97 f9       	bld	r25, 7
    1240:	08 95       	ret

00001242 <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1242:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1244:	91 8d       	ldd	r25, Z+25	; 0x19
    1246:	22 8d       	ldd	r18, Z+26	; 0x1a
    1248:	89 2f       	mov	r24, r25
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	80 5c       	subi	r24, 0xC0	; 192
    124e:	9f 4f       	sbci	r25, 0xFF	; 255
    1250:	82 1b       	sub	r24, r18
    1252:	91 09       	sbc	r25, r1
}
    1254:	8f 73       	andi	r24, 0x3F	; 63
    1256:	99 27       	eor	r25, r25
    1258:	08 95       	ret

0000125a <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    125a:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    125c:	91 8d       	ldd	r25, Z+25	; 0x19
    125e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1260:	98 17       	cp	r25, r24
    1262:	31 f0       	breq	.+12     	; 0x1270 <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1264:	82 8d       	ldd	r24, Z+26	; 0x1a
    1266:	e8 0f       	add	r30, r24
    1268:	f1 1d       	adc	r31, r1
    126a:	85 8d       	ldd	r24, Z+29	; 0x1d
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1270:	8f ef       	ldi	r24, 0xFF	; 255
    1272:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1274:	08 95       	ret

00001276 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1276:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1278:	91 8d       	ldd	r25, Z+25	; 0x19
    127a:	82 8d       	ldd	r24, Z+26	; 0x1a
    127c:	98 17       	cp	r25, r24
    127e:	61 f0       	breq	.+24     	; 0x1298 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1280:	82 8d       	ldd	r24, Z+26	; 0x1a
    1282:	df 01       	movw	r26, r30
    1284:	a8 0f       	add	r26, r24
    1286:	b1 1d       	adc	r27, r1
    1288:	5d 96       	adiw	r26, 0x1d	; 29
    128a:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    128c:	92 8d       	ldd	r25, Z+26	; 0x1a
    128e:	9f 5f       	subi	r25, 0xFF	; 255
    1290:	9f 73       	andi	r25, 0x3F	; 63
    1292:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1298:	8f ef       	ldi	r24, 0xFF	; 255
    129a:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    129c:	08 95       	ret

0000129e <_Z14serialEventRunv>:
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    129e:	84 ea       	ldi	r24, 0xA4	; 164
    12a0:	9a e0       	ldi	r25, 0x0A	; 10
    12a2:	89 2b       	or	r24, r25
    12a4:	49 f0       	breq	.+18     	; 0x12b8 <_Z14serialEventRunv+0x1a>
    12a6:	80 e0       	ldi	r24, 0x00	; 0
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	89 2b       	or	r24, r25
    12ac:	29 f0       	breq	.+10     	; 0x12b8 <_Z14serialEventRunv+0x1a>
    12ae:	0e 94 a4 0a 	call	0x1548	; 0x1548 <_Z17Serial1_availablev>
    12b2:	81 11       	cpse	r24, r1
    12b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    12b8:	08 95       	ret

000012ba <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    12ba:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    12bc:	84 8d       	ldd	r24, Z+28	; 0x1c
    12be:	df 01       	movw	r26, r30
    12c0:	a8 0f       	add	r26, r24
    12c2:	b1 1d       	adc	r27, r1
    12c4:	a3 5a       	subi	r26, 0xA3	; 163
    12c6:	bf 4f       	sbci	r27, 0xFF	; 255
    12c8:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    12ca:	84 8d       	ldd	r24, Z+28	; 0x1c
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	01 96       	adiw	r24, 0x01	; 1
    12d0:	8f 73       	andi	r24, 0x3F	; 63
    12d2:	99 27       	eor	r25, r25
    12d4:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    12d6:	a6 89       	ldd	r26, Z+22	; 0x16
    12d8:	b7 89       	ldd	r27, Z+23	; 0x17
    12da:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    12dc:	a0 89       	ldd	r26, Z+16	; 0x10
    12de:	b1 89       	ldd	r27, Z+17	; 0x11
    12e0:	8c 91       	ld	r24, X
    12e2:	80 64       	ori	r24, 0x40	; 64
    12e4:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    12e6:	93 8d       	ldd	r25, Z+27	; 0x1b
    12e8:	84 8d       	ldd	r24, Z+28	; 0x1c
    12ea:	98 13       	cpse	r25, r24
    12ec:	06 c0       	rjmp	.+12     	; 0x12fa <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    12ee:	02 88       	ldd	r0, Z+18	; 0x12
    12f0:	f3 89       	ldd	r31, Z+19	; 0x13
    12f2:	e0 2d       	mov	r30, r0
    12f4:	80 81       	ld	r24, Z
    12f6:	8f 7d       	andi	r24, 0xDF	; 223
    12f8:	80 83       	st	Z, r24
    12fa:	08 95       	ret

000012fc <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    12fc:	ef 92       	push	r14
    12fe:	ff 92       	push	r15
    1300:	0f 93       	push	r16
    1302:	1f 93       	push	r17
    1304:	cf 93       	push	r28
    1306:	df 93       	push	r29
    1308:	ec 01       	movw	r28, r24
  _written = true;
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    130e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1310:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1312:	98 13       	cpse	r25, r24
    1314:	05 c0       	rjmp	.+10     	; 0x1320 <_ZN14HardwareSerial5writeEh+0x24>
    1316:	e8 89       	ldd	r30, Y+16	; 0x10
    1318:	f9 89       	ldd	r31, Y+17	; 0x11
    131a:	80 81       	ld	r24, Z
    131c:	85 fd       	sbrc	r24, 5
    131e:	24 c0       	rjmp	.+72     	; 0x1368 <_ZN14HardwareSerial5writeEh+0x6c>
    1320:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1322:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1324:	10 e0       	ldi	r17, 0x00	; 0
    1326:	0f 5f       	subi	r16, 0xFF	; 255
    1328:	1f 4f       	sbci	r17, 0xFF	; 255
    132a:	0f 73       	andi	r16, 0x3F	; 63
    132c:	11 27       	eor	r17, r17
    132e:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1330:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1332:	e8 12       	cpse	r14, r24
    1334:	0c c0       	rjmp	.+24     	; 0x134e <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    1336:	0f b6       	in	r0, 0x3f	; 63
    1338:	07 fc       	sbrc	r0, 7
    133a:	fa cf       	rjmp	.-12     	; 0x1330 <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    133c:	e8 89       	ldd	r30, Y+16	; 0x10
    133e:	f9 89       	ldd	r31, Y+17	; 0x11
    1340:	80 81       	ld	r24, Z
    1342:	85 ff       	sbrs	r24, 5
    1344:	f5 cf       	rjmp	.-22     	; 0x1330 <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1346:	ce 01       	movw	r24, r28
    1348:	0e 94 5d 09 	call	0x12ba	; 0x12ba <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    134c:	f1 cf       	rjmp	.-30     	; 0x1330 <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    134e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1350:	fe 01       	movw	r30, r28
    1352:	e8 0f       	add	r30, r24
    1354:	f1 1d       	adc	r31, r1
    1356:	e3 5a       	subi	r30, 0xA3	; 163
    1358:	ff 4f       	sbci	r31, 0xFF	; 255
    135a:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    135c:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    135e:	ea 89       	ldd	r30, Y+18	; 0x12
    1360:	fb 89       	ldd	r31, Y+19	; 0x13
    1362:	80 81       	ld	r24, Z
    1364:	80 62       	ori	r24, 0x20	; 32
    1366:	07 c0       	rjmp	.+14     	; 0x1376 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    1368:	ee 89       	ldd	r30, Y+22	; 0x16
    136a:	ff 89       	ldd	r31, Y+23	; 0x17
    136c:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    136e:	e8 89       	ldd	r30, Y+16	; 0x10
    1370:	f9 89       	ldd	r31, Y+17	; 0x11
    1372:	80 81       	ld	r24, Z
    1374:	80 64       	ori	r24, 0x40	; 64
    1376:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    1378:	81 e0       	ldi	r24, 0x01	; 1
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	df 91       	pop	r29
    137e:	cf 91       	pop	r28
    1380:	1f 91       	pop	r17
    1382:	0f 91       	pop	r16
    1384:	ff 90       	pop	r15
    1386:	ef 90       	pop	r14
    1388:	08 95       	ret

0000138a <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    138a:	cf 93       	push	r28
    138c:	df 93       	push	r29
    138e:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1390:	88 8d       	ldd	r24, Y+24	; 0x18
    1392:	88 23       	and	r24, r24
    1394:	c9 f0       	breq	.+50     	; 0x13c8 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1396:	ea 89       	ldd	r30, Y+18	; 0x12
    1398:	fb 89       	ldd	r31, Y+19	; 0x13
    139a:	80 81       	ld	r24, Z
    139c:	85 fd       	sbrc	r24, 5
    139e:	05 c0       	rjmp	.+10     	; 0x13aa <_ZN14HardwareSerial5flushEv+0x20>
    13a0:	a8 89       	ldd	r26, Y+16	; 0x10
    13a2:	b9 89       	ldd	r27, Y+17	; 0x11
    13a4:	8c 91       	ld	r24, X
    13a6:	86 fd       	sbrc	r24, 6
    13a8:	0f c0       	rjmp	.+30     	; 0x13c8 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    13aa:	0f b6       	in	r0, 0x3f	; 63
    13ac:	07 fc       	sbrc	r0, 7
    13ae:	f5 cf       	rjmp	.-22     	; 0x139a <_ZN14HardwareSerial5flushEv+0x10>
    13b0:	80 81       	ld	r24, Z
    13b2:	85 ff       	sbrs	r24, 5
    13b4:	f2 cf       	rjmp	.-28     	; 0x139a <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    13b6:	a8 89       	ldd	r26, Y+16	; 0x10
    13b8:	b9 89       	ldd	r27, Y+17	; 0x11
    13ba:	8c 91       	ld	r24, X
    13bc:	85 ff       	sbrs	r24, 5
    13be:	ed cf       	rjmp	.-38     	; 0x139a <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    13c0:	ce 01       	movw	r24, r28
    13c2:	0e 94 5d 09 	call	0x12ba	; 0x12ba <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    13c6:	e7 cf       	rjmp	.-50     	; 0x1396 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    13c8:	df 91       	pop	r29
    13ca:	cf 91       	pop	r28
    13cc:	08 95       	ret

000013ce <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    13ce:	cf 92       	push	r12
    13d0:	df 92       	push	r13
    13d2:	ef 92       	push	r14
    13d4:	ff 92       	push	r15
    13d6:	1f 93       	push	r17
    13d8:	cf 93       	push	r28
    13da:	df 93       	push	r29
    13dc:	ec 01       	movw	r28, r24
    13de:	6a 01       	movw	r12, r20
    13e0:	7b 01       	movw	r14, r22
    13e2:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    13e4:	e8 89       	ldd	r30, Y+16	; 0x10
    13e6:	f9 89       	ldd	r31, Y+17	; 0x11
    13e8:	82 e0       	ldi	r24, 0x02	; 2
    13ea:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    13ec:	41 15       	cp	r20, r1
    13ee:	51 4e       	sbci	r21, 0xE1	; 225
    13f0:	61 05       	cpc	r22, r1
    13f2:	71 05       	cpc	r23, r1
    13f4:	b1 f0       	breq	.+44     	; 0x1422 <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    13f6:	60 e0       	ldi	r22, 0x00	; 0
    13f8:	79 e0       	ldi	r23, 0x09	; 9
    13fa:	8d e3       	ldi	r24, 0x3D	; 61
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	a7 01       	movw	r20, r14
    1400:	96 01       	movw	r18, r12
    1402:	0e 94 03 17 	call	0x2e06	; 0x2e06 <__udivmodsi4>
    1406:	da 01       	movw	r26, r20
    1408:	c9 01       	movw	r24, r18
    140a:	01 97       	sbiw	r24, 0x01	; 1
    140c:	a1 09       	sbc	r26, r1
    140e:	b1 09       	sbc	r27, r1
    1410:	b6 95       	lsr	r27
    1412:	a7 95       	ror	r26
    1414:	97 95       	ror	r25
    1416:	87 95       	ror	r24
    1418:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    141a:	21 15       	cp	r18, r1
    141c:	80 e1       	ldi	r24, 0x10	; 16
    141e:	38 07       	cpc	r19, r24
    1420:	a8 f0       	brcs	.+42     	; 0x144c <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    1422:	e8 89       	ldd	r30, Y+16	; 0x10
    1424:	f9 89       	ldd	r31, Y+17	; 0x11
    1426:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1428:	60 e8       	ldi	r22, 0x80	; 128
    142a:	74 e8       	ldi	r23, 0x84	; 132
    142c:	8e e1       	ldi	r24, 0x1E	; 30
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	a7 01       	movw	r20, r14
    1432:	96 01       	movw	r18, r12
    1434:	0e 94 03 17 	call	0x2e06	; 0x2e06 <__udivmodsi4>
    1438:	da 01       	movw	r26, r20
    143a:	c9 01       	movw	r24, r18
    143c:	01 97       	sbiw	r24, 0x01	; 1
    143e:	a1 09       	sbc	r26, r1
    1440:	b1 09       	sbc	r27, r1
    1442:	b6 95       	lsr	r27
    1444:	a7 95       	ror	r26
    1446:	97 95       	ror	r25
    1448:	87 95       	ror	r24
    144a:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    144c:	ec 85       	ldd	r30, Y+12	; 0x0c
    144e:	fd 85       	ldd	r31, Y+13	; 0x0d
    1450:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1452:	ee 85       	ldd	r30, Y+14	; 0x0e
    1454:	ff 85       	ldd	r31, Y+15	; 0x0f
    1456:	20 83       	st	Z, r18

  _written = false;
    1458:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    145a:	ec 89       	ldd	r30, Y+20	; 0x14
    145c:	fd 89       	ldd	r31, Y+21	; 0x15
    145e:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    1460:	ea 89       	ldd	r30, Y+18	; 0x12
    1462:	fb 89       	ldd	r31, Y+19	; 0x13
    1464:	80 81       	ld	r24, Z
    1466:	80 61       	ori	r24, 0x10	; 16
    1468:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    146a:	ea 89       	ldd	r30, Y+18	; 0x12
    146c:	fb 89       	ldd	r31, Y+19	; 0x13
    146e:	80 81       	ld	r24, Z
    1470:	88 60       	ori	r24, 0x08	; 8
    1472:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    1474:	ea 89       	ldd	r30, Y+18	; 0x12
    1476:	fb 89       	ldd	r31, Y+19	; 0x13
    1478:	80 81       	ld	r24, Z
    147a:	80 68       	ori	r24, 0x80	; 128
    147c:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    147e:	ea 89       	ldd	r30, Y+18	; 0x12
    1480:	fb 89       	ldd	r31, Y+19	; 0x13
    1482:	80 81       	ld	r24, Z
    1484:	8f 7d       	andi	r24, 0xDF	; 223
    1486:	80 83       	st	Z, r24
}
    1488:	df 91       	pop	r29
    148a:	cf 91       	pop	r28
    148c:	1f 91       	pop	r17
    148e:	ff 90       	pop	r15
    1490:	ef 90       	pop	r14
    1492:	df 90       	pop	r13
    1494:	cf 90       	pop	r12
    1496:	08 95       	ret

00001498 <__vector_25>:
#elif defined(USART1_RX_vect)
ISR(USART1_RX_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    1498:	1f 92       	push	r1
    149a:	0f 92       	push	r0
    149c:	0f b6       	in	r0, 0x3f	; 63
    149e:	0f 92       	push	r0
    14a0:	11 24       	eor	r1, r1
    14a2:	2f 93       	push	r18
    14a4:	8f 93       	push	r24
    14a6:	9f 93       	push	r25
    14a8:	ef 93       	push	r30
    14aa:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    14ac:	e0 91 0b 03 	lds	r30, 0x030B	; 0x80030b <Serial1+0x10>
    14b0:	f0 91 0c 03 	lds	r31, 0x030C	; 0x80030c <Serial1+0x11>
    14b4:	80 81       	ld	r24, Z
    14b6:	e0 91 11 03 	lds	r30, 0x0311	; 0x800311 <Serial1+0x16>
    14ba:	f0 91 12 03 	lds	r31, 0x0312	; 0x800312 <Serial1+0x17>
    14be:	82 fd       	sbrc	r24, 2
    14c0:	12 c0       	rjmp	.+36     	; 0x14e6 <__vector_25+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    14c2:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    14c4:	80 91 14 03 	lds	r24, 0x0314	; 0x800314 <Serial1+0x19>
    14c8:	8f 5f       	subi	r24, 0xFF	; 255
    14ca:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    14cc:	20 91 15 03 	lds	r18, 0x0315	; 0x800315 <Serial1+0x1a>
    14d0:	82 17       	cp	r24, r18
    14d2:	51 f0       	breq	.+20     	; 0x14e8 <__vector_25+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    14d4:	e0 91 14 03 	lds	r30, 0x0314	; 0x800314 <Serial1+0x19>
    14d8:	f0 e0       	ldi	r31, 0x00	; 0
    14da:	e5 50       	subi	r30, 0x05	; 5
    14dc:	fd 4f       	sbci	r31, 0xFD	; 253
    14de:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    14e0:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <Serial1+0x19>
    14e4:	01 c0       	rjmp	.+2      	; 0x14e8 <__vector_25+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    14e6:	80 81       	ld	r24, Z
  Serial1._rx_complete_irq();
}
    14e8:	ff 91       	pop	r31
    14ea:	ef 91       	pop	r30
    14ec:	9f 91       	pop	r25
    14ee:	8f 91       	pop	r24
    14f0:	2f 91       	pop	r18
    14f2:	0f 90       	pop	r0
    14f4:	0f be       	out	0x3f, r0	; 63
    14f6:	0f 90       	pop	r0
    14f8:	1f 90       	pop	r1
    14fa:	18 95       	reti

000014fc <__vector_26>:
#elif defined(USART1_UDRE_vect)
ISR(USART1_UDRE_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    14fc:	1f 92       	push	r1
    14fe:	0f 92       	push	r0
    1500:	0f b6       	in	r0, 0x3f	; 63
    1502:	0f 92       	push	r0
    1504:	11 24       	eor	r1, r1
    1506:	2f 93       	push	r18
    1508:	3f 93       	push	r19
    150a:	4f 93       	push	r20
    150c:	5f 93       	push	r21
    150e:	6f 93       	push	r22
    1510:	7f 93       	push	r23
    1512:	8f 93       	push	r24
    1514:	9f 93       	push	r25
    1516:	af 93       	push	r26
    1518:	bf 93       	push	r27
    151a:	ef 93       	push	r30
    151c:	ff 93       	push	r31
  Serial1._tx_udr_empty_irq();
    151e:	8b ef       	ldi	r24, 0xFB	; 251
    1520:	92 e0       	ldi	r25, 0x02	; 2
    1522:	0e 94 5d 09 	call	0x12ba	; 0x12ba <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1526:	ff 91       	pop	r31
    1528:	ef 91       	pop	r30
    152a:	bf 91       	pop	r27
    152c:	af 91       	pop	r26
    152e:	9f 91       	pop	r25
    1530:	8f 91       	pop	r24
    1532:	7f 91       	pop	r23
    1534:	6f 91       	pop	r22
    1536:	5f 91       	pop	r21
    1538:	4f 91       	pop	r20
    153a:	3f 91       	pop	r19
    153c:	2f 91       	pop	r18
    153e:	0f 90       	pop	r0
    1540:	0f be       	out	0x3f, r0	; 63
    1542:	0f 90       	pop	r0
    1544:	1f 90       	pop	r1
    1546:	18 95       	reti

00001548 <_Z17Serial1_availablev>:
HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
    1548:	8b ef       	ldi	r24, 0xFB	; 251
    154a:	92 e0       	ldi	r25, 0x02	; 2
    154c:	0e 94 21 09 	call	0x1242	; 0x1242 <_ZN14HardwareSerial9availableEv>
    1550:	21 e0       	ldi	r18, 0x01	; 1
    1552:	89 2b       	or	r24, r25
    1554:	09 f4       	brne	.+2      	; 0x1558 <_Z17Serial1_availablev+0x10>
    1556:	20 e0       	ldi	r18, 0x00	; 0
}
    1558:	82 2f       	mov	r24, r18
    155a:	08 95       	ret

0000155c <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    155c:	eb ef       	ldi	r30, 0xFB	; 251
    155e:	f2 e0       	ldi	r31, 0x02	; 2
    1560:	13 82       	std	Z+3, r1	; 0x03
    1562:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    1564:	88 ee       	ldi	r24, 0xE8	; 232
    1566:	93 e0       	ldi	r25, 0x03	; 3
    1568:	a0 e0       	ldi	r26, 0x00	; 0
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	84 83       	std	Z+4, r24	; 0x04
    156e:	95 83       	std	Z+5, r25	; 0x05
    1570:	a6 83       	std	Z+6, r26	; 0x06
    1572:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    1574:	86 e9       	ldi	r24, 0x96	; 150
    1576:	91 e0       	ldi	r25, 0x01	; 1
    1578:	91 83       	std	Z+1, r25	; 0x01
    157a:	80 83       	st	Z, r24
    157c:	8d ec       	ldi	r24, 0xCD	; 205
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	95 87       	std	Z+13, r25	; 0x0d
    1582:	84 87       	std	Z+12, r24	; 0x0c
    1584:	8c ec       	ldi	r24, 0xCC	; 204
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	97 87       	std	Z+15, r25	; 0x0f
    158a:	86 87       	std	Z+14, r24	; 0x0e
    158c:	88 ec       	ldi	r24, 0xC8	; 200
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	91 8b       	std	Z+17, r25	; 0x11
    1592:	80 8b       	std	Z+16, r24	; 0x10
    1594:	89 ec       	ldi	r24, 0xC9	; 201
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	93 8b       	std	Z+19, r25	; 0x13
    159a:	82 8b       	std	Z+18, r24	; 0x12
    159c:	8a ec       	ldi	r24, 0xCA	; 202
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	95 8b       	std	Z+21, r25	; 0x15
    15a2:	84 8b       	std	Z+20, r24	; 0x14
    15a4:	8e ec       	ldi	r24, 0xCE	; 206
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	97 8b       	std	Z+23, r25	; 0x17
    15aa:	86 8b       	std	Z+22, r24	; 0x16
    15ac:	11 8e       	std	Z+25, r1	; 0x19
    15ae:	12 8e       	std	Z+26, r1	; 0x1a
    15b0:	13 8e       	std	Z+27, r1	; 0x1b
    15b2:	14 8e       	std	Z+28, r1	; 0x1c
    15b4:	08 95       	ret

000015b6 <initVariant>:
    15b6:	08 95       	ret

000015b8 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    15b8:	0e 94 4a 10 	call	0x2094	; 0x2094 <init>

	initVariant();
    15bc:	0e 94 db 0a 	call	0x15b6	; 0x15b6 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
    15c0:	88 e9       	ldi	r24, 0x98	; 152
    15c2:	93 e0       	ldi	r25, 0x03	; 3
    15c4:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <_ZN10USBDevice_6attachEv>
#endif
	
	setup();
    15c8:	0e 94 26 05 	call	0xa4c	; 0xa4c <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    15cc:	cf e4       	ldi	r28, 0x4F	; 79
    15ce:	d9 e0       	ldi	r29, 0x09	; 9
#endif
	
	setup();
    
	for (;;) {
		loop();
    15d0:	0e 94 16 02 	call	0x42c	; 0x42c <loop>
		if (serialEventRun) serialEventRun();
    15d4:	20 97       	sbiw	r28, 0x00	; 0
    15d6:	e1 f3       	breq	.-8      	; 0x15d0 <main+0x18>
    15d8:	0e 94 4f 09 	call	0x129e	; 0x129e <_Z14serialEventRunv>
    15dc:	f9 cf       	rjmp	.-14     	; 0x15d0 <main+0x18>

000015de <_ZN5Print5writeEPKhj>:
size_t Print::println(const String &s)
{
  size_t n = print(s);
  n += println();
  return n;
}
    15de:	cf 92       	push	r12
    15e0:	df 92       	push	r13
    15e2:	ef 92       	push	r14
    15e4:	ff 92       	push	r15
    15e6:	0f 93       	push	r16
    15e8:	1f 93       	push	r17
    15ea:	cf 93       	push	r28
    15ec:	df 93       	push	r29
    15ee:	6c 01       	movw	r12, r24
    15f0:	7a 01       	movw	r14, r20
    15f2:	8b 01       	movw	r16, r22
    15f4:	c0 e0       	ldi	r28, 0x00	; 0
    15f6:	d0 e0       	ldi	r29, 0x00	; 0
    15f8:	ce 15       	cp	r28, r14
    15fa:	df 05       	cpc	r29, r15
    15fc:	81 f0       	breq	.+32     	; 0x161e <_ZN5Print5writeEPKhj+0x40>
    15fe:	d8 01       	movw	r26, r16
    1600:	6d 91       	ld	r22, X+
    1602:	8d 01       	movw	r16, r26
    1604:	d6 01       	movw	r26, r12
    1606:	ed 91       	ld	r30, X+
    1608:	fc 91       	ld	r31, X
    160a:	01 90       	ld	r0, Z+
    160c:	f0 81       	ld	r31, Z
    160e:	e0 2d       	mov	r30, r0
    1610:	c6 01       	movw	r24, r12
    1612:	09 95       	icall
    1614:	89 2b       	or	r24, r25
    1616:	11 f0       	breq	.+4      	; 0x161c <_ZN5Print5writeEPKhj+0x3e>
    1618:	21 96       	adiw	r28, 0x01	; 1
    161a:	ee cf       	rjmp	.-36     	; 0x15f8 <_ZN5Print5writeEPKhj+0x1a>
    161c:	7e 01       	movw	r14, r28
    161e:	c7 01       	movw	r24, r14
    1620:	df 91       	pop	r29
    1622:	cf 91       	pop	r28
    1624:	1f 91       	pop	r17
    1626:	0f 91       	pop	r16
    1628:	ff 90       	pop	r15
    162a:	ef 90       	pop	r14
    162c:	df 90       	pop	r13
    162e:	cf 90       	pop	r12
    1630:	08 95       	ret

00001632 <_ZN5Print5writeEPKc>:
    1632:	61 15       	cp	r22, r1
    1634:	71 05       	cpc	r23, r1
    1636:	79 f0       	breq	.+30     	; 0x1656 <_ZN5Print5writeEPKc+0x24>
    1638:	fb 01       	movw	r30, r22
    163a:	01 90       	ld	r0, Z+
    163c:	00 20       	and	r0, r0
    163e:	e9 f7       	brne	.-6      	; 0x163a <_ZN5Print5writeEPKc+0x8>
    1640:	31 97       	sbiw	r30, 0x01	; 1
    1642:	af 01       	movw	r20, r30
    1644:	46 1b       	sub	r20, r22
    1646:	57 0b       	sbc	r21, r23
    1648:	dc 01       	movw	r26, r24
    164a:	ed 91       	ld	r30, X+
    164c:	fc 91       	ld	r31, X
    164e:	02 80       	ldd	r0, Z+2	; 0x02
    1650:	f3 81       	ldd	r31, Z+3	; 0x03
    1652:	e0 2d       	mov	r30, r0
    1654:	09 94       	ijmp
    1656:	80 e0       	ldi	r24, 0x00	; 0
    1658:	90 e0       	ldi	r25, 0x00	; 0
    165a:	08 95       	ret

0000165c <_ZN5Print5printEPKc>:
    165c:	0c 94 19 0b 	jmp	0x1632	; 0x1632 <_ZN5Print5writeEPKc>

00001660 <_ZN5Print7printlnEv>:
    1660:	62 ea       	ldi	r22, 0xA2	; 162
    1662:	71 e0       	ldi	r23, 0x01	; 1
    1664:	0c 94 19 0b 	jmp	0x1632	; 0x1632 <_ZN5Print5writeEPKc>

00001668 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
    1668:	0f 93       	push	r16
    166a:	1f 93       	push	r17
    166c:	cf 93       	push	r28
    166e:	df 93       	push	r29
    1670:	ec 01       	movw	r28, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1672:	0e 94 19 0b 	call	0x1632	; 0x1632 <_ZN5Print5writeEPKc>
    1676:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    1678:	ce 01       	movw	r24, r28
    167a:	0e 94 30 0b 	call	0x1660	; 0x1660 <_ZN5Print7printlnEv>
  return n;
}
    167e:	80 0f       	add	r24, r16
    1680:	91 1f       	adc	r25, r17
    1682:	df 91       	pop	r29
    1684:	cf 91       	pop	r28
    1686:	1f 91       	pop	r17
    1688:	0f 91       	pop	r16
    168a:	08 95       	ret

0000168c <_ZL4RecvPVhh>:
//=======================================================================
//=======================================================================

USBDevice_ USBDevice;

USBDevice_::USBDevice_()
    168c:	61 50       	subi	r22, 0x01	; 1
    168e:	30 f0       	brcs	.+12     	; 0x169c <_ZL4RecvPVhh+0x10>
    1690:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
    1694:	fc 01       	movw	r30, r24
    1696:	20 83       	st	Z, r18
    1698:	01 96       	adiw	r24, 0x01	; 1
    169a:	f8 cf       	rjmp	.-16     	; 0x168c <_ZL4RecvPVhh>
    169c:	28 9a       	sbi	0x05, 0	; 5
    169e:	84 e6       	ldi	r24, 0x64	; 100
    16a0:	80 93 a1 03 	sts	0x03A1, r24	; 0x8003a1 <RxLEDPulse>
    16a4:	08 95       	ret

000016a6 <_ZL11SendControlh>:
    16a6:	40 91 9c 03 	lds	r20, 0x039C	; 0x80039c <_ZL6_cmark>
    16aa:	50 91 9d 03 	lds	r21, 0x039D	; 0x80039d <_ZL6_cmark+0x1>
    16ae:	20 91 9a 03 	lds	r18, 0x039A	; 0x80039a <_ZL5_cend>
    16b2:	30 91 9b 03 	lds	r19, 0x039B	; 0x80039b <_ZL5_cend+0x1>
    16b6:	42 17       	cp	r20, r18
    16b8:	53 07       	cpc	r21, r19
    16ba:	b4 f4       	brge	.+44     	; 0x16e8 <_ZL11SendControlh+0x42>
    16bc:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    16c0:	95 70       	andi	r25, 0x05	; 5
    16c2:	e1 f3       	breq	.-8      	; 0x16bc <_ZL11SendControlh+0x16>
    16c4:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    16c8:	92 fd       	sbrc	r25, 2
    16ca:	19 c0       	rjmp	.+50     	; 0x16fe <_ZL11SendControlh+0x58>
    16cc:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
    16d0:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <_ZL6_cmark>
    16d4:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <_ZL6_cmark+0x1>
    16d8:	01 96       	adiw	r24, 0x01	; 1
    16da:	8f 73       	andi	r24, 0x3F	; 63
    16dc:	99 27       	eor	r25, r25
    16de:	89 2b       	or	r24, r25
    16e0:	19 f4       	brne	.+6      	; 0x16e8 <_ZL11SendControlh+0x42>
    16e2:	8e ef       	ldi	r24, 0xFE	; 254
    16e4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    16e8:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <_ZL6_cmark>
    16ec:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <_ZL6_cmark+0x1>
    16f0:	01 96       	adiw	r24, 0x01	; 1
    16f2:	90 93 9d 03 	sts	0x039D, r25	; 0x80039d <_ZL6_cmark+0x1>
    16f6:	80 93 9c 03 	sts	0x039C, r24	; 0x80039c <_ZL6_cmark>
    16fa:	81 e0       	ldi	r24, 0x01	; 1
    16fc:	08 95       	ret
    16fe:	80 e0       	ldi	r24, 0x00	; 0
    1700:	08 95       	ret

00001702 <_ZL24USB_SendStringDescriptorPKhhh>:
    1702:	df 92       	push	r13
    1704:	ef 92       	push	r14
    1706:	ff 92       	push	r15
    1708:	0f 93       	push	r16
    170a:	1f 93       	push	r17
    170c:	cf 93       	push	r28
    170e:	df 93       	push	r29
    1710:	d8 2e       	mov	r13, r24
    1712:	f9 2e       	mov	r15, r25
    1714:	e4 2e       	mov	r14, r20
    1716:	06 2f       	mov	r16, r22
    1718:	10 e0       	ldi	r17, 0x00	; 0
    171a:	c8 01       	movw	r24, r16
    171c:	01 96       	adiw	r24, 0x01	; 1
    171e:	88 0f       	add	r24, r24
    1720:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <_ZL11SendControlh>
    1724:	83 e0       	ldi	r24, 0x03	; 3
    1726:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <_ZL11SendControlh>
    172a:	cd 2d       	mov	r28, r13
    172c:	df 2d       	mov	r29, r15
    172e:	0c 0f       	add	r16, r28
    1730:	1d 1f       	adc	r17, r29
    1732:	c0 17       	cp	r28, r16
    1734:	d1 07       	cpc	r29, r17
    1736:	89 f0       	breq	.+34     	; 0x175a <_ZL24USB_SendStringDescriptorPKhhh+0x58>
    1738:	e7 fe       	sbrs	r14, 7
    173a:	03 c0       	rjmp	.+6      	; 0x1742 <_ZL24USB_SendStringDescriptorPKhhh+0x40>
    173c:	fe 01       	movw	r30, r28
    173e:	84 91       	lpm	r24, Z
    1740:	01 c0       	rjmp	.+2      	; 0x1744 <_ZL24USB_SendStringDescriptorPKhhh+0x42>
    1742:	88 81       	ld	r24, Y
    1744:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <_ZL11SendControlh>
    1748:	f8 2e       	mov	r15, r24
    174a:	80 e0       	ldi	r24, 0x00	; 0
    174c:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <_ZL11SendControlh>
    1750:	8f 21       	and	r24, r15
    1752:	21 96       	adiw	r28, 0x01	; 1
    1754:	81 11       	cpse	r24, r1
    1756:	ed cf       	rjmp	.-38     	; 0x1732 <_ZL24USB_SendStringDescriptorPKhhh+0x30>
    1758:	01 c0       	rjmp	.+2      	; 0x175c <_ZL24USB_SendStringDescriptorPKhhh+0x5a>
    175a:	81 e0       	ldi	r24, 0x01	; 1
    175c:	df 91       	pop	r29
    175e:	cf 91       	pop	r28
    1760:	1f 91       	pop	r17
    1762:	0f 91       	pop	r16
    1764:	ff 90       	pop	r15
    1766:	ef 90       	pop	r14
    1768:	df 90       	pop	r13
    176a:	08 95       	ret

0000176c <_ZL15USB_ClockEnablev>:
    176c:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__DATA_REGION_ORIGIN__+0x77>
    1770:	81 60       	ori	r24, 0x01	; 1
    1772:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__DATA_REGION_ORIGIN__+0x77>
    1776:	80 ea       	ldi	r24, 0xA0	; 160
    1778:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
    177c:	89 b5       	in	r24, 0x29	; 41
    177e:	80 61       	ori	r24, 0x10	; 16
    1780:	89 bd       	out	0x29, r24	; 41
    1782:	89 b5       	in	r24, 0x29	; 41
    1784:	82 60       	ori	r24, 0x02	; 2
    1786:	89 bd       	out	0x29, r24	; 41
    1788:	09 b4       	in	r0, 0x29	; 41
    178a:	00 fe       	sbrs	r0, 0
    178c:	fd cf       	rjmp	.-6      	; 0x1788 <_ZL15USB_ClockEnablev+0x1c>
    178e:	61 e0       	ldi	r22, 0x01	; 1
    1790:	70 e0       	ldi	r23, 0x00	; 0
    1792:	80 e0       	ldi	r24, 0x00	; 0
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	0e 94 03 10 	call	0x2006	; 0x2006 <delay>
    179a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
    179e:	8f 7c       	andi	r24, 0xCF	; 207
    17a0:	80 61       	ori	r24, 0x10	; 16
    17a2:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__DATA_REGION_ORIGIN__+0x78>
    17a6:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__DATA_REGION_ORIGIN__+0x80>
    17aa:	80 7f       	andi	r24, 0xF0	; 240
    17ac:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__DATA_REGION_ORIGIN__+0x80>
    17b0:	08 95       	ret

000017b2 <_ZL14SendInterfacesv>:
    17b2:	cf 93       	push	r28
    17b4:	df 93       	push	r29
    17b6:	1f 92       	push	r1
    17b8:	cd b7       	in	r28, 0x3d	; 61
    17ba:	de b7       	in	r29, 0x3e	; 62
    17bc:	19 82       	std	Y+1, r1	; 0x01
    17be:	ce 01       	movw	r24, r28
    17c0:	01 96       	adiw	r24, 0x01	; 1
    17c2:	0e 94 c7 15 	call	0x2b8e	; 0x2b8e <_Z16CDC_GetInterfacePh>
    17c6:	0e 94 ef 16 	call	0x2dde	; 0x2dde <_Z12PluggableUSBv>
    17ca:	be 01       	movw	r22, r28
    17cc:	6f 5f       	subi	r22, 0xFF	; 255
    17ce:	7f 4f       	sbci	r23, 0xFF	; 255
    17d0:	0e 94 6a 16 	call	0x2cd4	; 0x2cd4 <_ZN13PluggableUSB_12getInterfaceEPh>
    17d4:	89 81       	ldd	r24, Y+1	; 0x01
    17d6:	0f 90       	pop	r0
    17d8:	df 91       	pop	r29
    17da:	cf 91       	pop	r28
    17dc:	08 95       	ret

000017de <_ZN6LockEPC1Eh>:
    17de:	2f b7       	in	r18, 0x3f	; 63
    17e0:	fc 01       	movw	r30, r24
    17e2:	20 83       	st	Z, r18
    17e4:	f8 94       	cli
    17e6:	67 70       	andi	r22, 0x07	; 7
    17e8:	60 93 e9 00 	sts	0x00E9, r22	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
    17ec:	08 95       	ret

000017ee <_Z13USB_Availableh>:
    17ee:	cf 93       	push	r28
    17f0:	df 93       	push	r29
    17f2:	1f 92       	push	r1
    17f4:	cd b7       	in	r28, 0x3d	; 61
    17f6:	de b7       	in	r29, 0x3e	; 62
    17f8:	68 2f       	mov	r22, r24
    17fa:	ce 01       	movw	r24, r28
    17fc:	01 96       	adiw	r24, 0x01	; 1
    17fe:	0e 94 ef 0b 	call	0x17de	; 0x17de <_ZN6LockEPC1Eh>
    1802:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
    1806:	99 81       	ldd	r25, Y+1	; 0x01
    1808:	9f bf       	out	0x3f, r25	; 63
    180a:	0f 90       	pop	r0
    180c:	df 91       	pop	r29
    180e:	cf 91       	pop	r28
    1810:	08 95       	ret

00001812 <_Z8USB_RecvhPvi>:
    1812:	ef 92       	push	r14
    1814:	ff 92       	push	r15
    1816:	0f 93       	push	r16
    1818:	1f 93       	push	r17
    181a:	cf 93       	push	r28
    181c:	df 93       	push	r29
    181e:	1f 92       	push	r1
    1820:	cd b7       	in	r28, 0x3d	; 61
    1822:	de b7       	in	r29, 0x3e	; 62
    1824:	90 91 a0 03 	lds	r25, 0x03A0	; 0x8003a0 <_usbConfiguration>
    1828:	99 23       	and	r25, r25
    182a:	11 f0       	breq	.+4      	; 0x1830 <_Z8USB_RecvhPvi+0x1e>
    182c:	57 ff       	sbrs	r21, 7
    182e:	03 c0       	rjmp	.+6      	; 0x1836 <_Z8USB_RecvhPvi+0x24>
    1830:	8f ef       	ldi	r24, 0xFF	; 255
    1832:	9f ef       	ldi	r25, 0xFF	; 255
    1834:	29 c0       	rjmp	.+82     	; 0x1888 <_Z8USB_RecvhPvi+0x76>
    1836:	8a 01       	movw	r16, r20
    1838:	7b 01       	movw	r14, r22
    183a:	68 2f       	mov	r22, r24
    183c:	ce 01       	movw	r24, r28
    183e:	01 96       	adiw	r24, 0x01	; 1
    1840:	0e 94 ef 0b 	call	0x17de	; 0x17de <_ZN6LockEPC1Eh>
    1844:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	02 17       	cp	r16, r18
    184c:	13 07       	cpc	r17, r19
    184e:	0c f4       	brge	.+2      	; 0x1852 <_Z8USB_RecvhPvi+0x40>
    1850:	98 01       	movw	r18, r16
    1852:	82 2f       	mov	r24, r18
    1854:	f7 01       	movw	r30, r14
    1856:	94 e6       	ldi	r25, 0x64	; 100
    1858:	81 50       	subi	r24, 0x01	; 1
    185a:	38 f0       	brcs	.+14     	; 0x186a <_Z8USB_RecvhPvi+0x58>
    185c:	28 9a       	sbi	0x05, 0	; 5
    185e:	90 93 a1 03 	sts	0x03A1, r25	; 0x8003a1 <RxLEDPulse>
    1862:	40 91 f1 00 	lds	r20, 0x00F1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
    1866:	41 93       	st	Z+, r20
    1868:	f7 cf       	rjmp	.-18     	; 0x1858 <_Z8USB_RecvhPvi+0x46>
    186a:	21 15       	cp	r18, r1
    186c:	31 05       	cpc	r19, r1
    186e:	21 f0       	breq	.+8      	; 0x1878 <_Z8USB_RecvhPvi+0x66>
    1870:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
    1874:	88 23       	and	r24, r24
    1876:	21 f0       	breq	.+8      	; 0x1880 <_Z8USB_RecvhPvi+0x6e>
    1878:	89 81       	ldd	r24, Y+1	; 0x01
    187a:	8f bf       	out	0x3f, r24	; 63
    187c:	c9 01       	movw	r24, r18
    187e:	04 c0       	rjmp	.+8      	; 0x1888 <_Z8USB_RecvhPvi+0x76>
    1880:	8b e6       	ldi	r24, 0x6B	; 107
    1882:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    1886:	f8 cf       	rjmp	.-16     	; 0x1878 <_Z8USB_RecvhPvi+0x66>
    1888:	0f 90       	pop	r0
    188a:	df 91       	pop	r29
    188c:	cf 91       	pop	r28
    188e:	1f 91       	pop	r17
    1890:	0f 91       	pop	r16
    1892:	ff 90       	pop	r15
    1894:	ef 90       	pop	r14
    1896:	08 95       	ret

00001898 <_Z8USB_Recvh>:
    1898:	cf 93       	push	r28
    189a:	df 93       	push	r29
    189c:	1f 92       	push	r1
    189e:	cd b7       	in	r28, 0x3d	; 61
    18a0:	de b7       	in	r29, 0x3e	; 62
    18a2:	41 e0       	ldi	r20, 0x01	; 1
    18a4:	50 e0       	ldi	r21, 0x00	; 0
    18a6:	be 01       	movw	r22, r28
    18a8:	6f 5f       	subi	r22, 0xFF	; 255
    18aa:	7f 4f       	sbci	r23, 0xFF	; 255
    18ac:	0e 94 09 0c 	call	0x1812	; 0x1812 <_Z8USB_RecvhPvi>
    18b0:	01 97       	sbiw	r24, 0x01	; 1
    18b2:	19 f4       	brne	.+6      	; 0x18ba <_Z8USB_Recvh+0x22>
    18b4:	89 81       	ldd	r24, Y+1	; 0x01
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	02 c0       	rjmp	.+4      	; 0x18be <_Z8USB_Recvh+0x26>
    18ba:	8f ef       	ldi	r24, 0xFF	; 255
    18bc:	9f ef       	ldi	r25, 0xFF	; 255
    18be:	0f 90       	pop	r0
    18c0:	df 91       	pop	r29
    18c2:	cf 91       	pop	r28
    18c4:	08 95       	ret

000018c6 <_Z13USB_SendSpaceh>:
    18c6:	cf 93       	push	r28
    18c8:	df 93       	push	r29
    18ca:	1f 92       	push	r1
    18cc:	cd b7       	in	r28, 0x3d	; 61
    18ce:	de b7       	in	r29, 0x3e	; 62
    18d0:	68 2f       	mov	r22, r24
    18d2:	ce 01       	movw	r24, r28
    18d4:	01 96       	adiw	r24, 0x01	; 1
    18d6:	0e 94 ef 0b 	call	0x17de	; 0x17de <_ZN6LockEPC1Eh>
    18da:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    18de:	89 2f       	mov	r24, r25
    18e0:	80 72       	andi	r24, 0x20	; 32
    18e2:	95 ff       	sbrs	r25, 5
    18e4:	04 c0       	rjmp	.+8      	; 0x18ee <_Z13USB_SendSpaceh+0x28>
    18e6:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
    18ea:	8f e3       	ldi	r24, 0x3F	; 63
    18ec:	89 1b       	sub	r24, r25
    18ee:	99 81       	ldd	r25, Y+1	; 0x01
    18f0:	9f bf       	out	0x3f, r25	; 63
    18f2:	0f 90       	pop	r0
    18f4:	df 91       	pop	r29
    18f6:	cf 91       	pop	r28
    18f8:	08 95       	ret

000018fa <_Z8USB_SendhPKvi>:
    18fa:	6f 92       	push	r6
    18fc:	7f 92       	push	r7
    18fe:	8f 92       	push	r8
    1900:	9f 92       	push	r9
    1902:	af 92       	push	r10
    1904:	bf 92       	push	r11
    1906:	cf 92       	push	r12
    1908:	df 92       	push	r13
    190a:	ef 92       	push	r14
    190c:	ff 92       	push	r15
    190e:	0f 93       	push	r16
    1910:	1f 93       	push	r17
    1912:	cf 93       	push	r28
    1914:	df 93       	push	r29
    1916:	1f 92       	push	r1
    1918:	cd b7       	in	r28, 0x3d	; 61
    191a:	de b7       	in	r29, 0x3e	; 62
    191c:	a8 2e       	mov	r10, r24
    191e:	6b 01       	movw	r12, r22
    1920:	b4 2e       	mov	r11, r20
    1922:	05 2f       	mov	r16, r21
    1924:	80 91 a0 03 	lds	r24, 0x03A0	; 0x8003a0 <_usbConfiguration>
    1928:	81 11       	cpse	r24, r1
    192a:	03 c0       	rjmp	.+6      	; 0x1932 <_Z8USB_SendhPKvi+0x38>
    192c:	8f ef       	ldi	r24, 0xFF	; 255
    192e:	9f ef       	ldi	r25, 0xFF	; 255
    1930:	69 c0       	rjmp	.+210    	; 0x1a04 <_Z8USB_SendhPKvi+0x10a>
    1932:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <_usbSuspendState>
    1936:	80 ff       	sbrs	r24, 0
    1938:	05 c0       	rjmp	.+10     	; 0x1944 <_Z8USB_SendhPKvi+0x4a>
    193a:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__DATA_REGION_ORIGIN__+0x80>
    193e:	82 60       	ori	r24, 0x02	; 2
    1940:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__DATA_REGION_ORIGIN__+0x80>
    1944:	eb 2c       	mov	r14, r11
    1946:	f0 2e       	mov	r15, r16
    1948:	8a ef       	ldi	r24, 0xFA	; 250
    194a:	98 2e       	mov	r9, r24
    194c:	8a 2d       	mov	r24, r10
    194e:	80 72       	andi	r24, 0x20	; 32
    1950:	78 2e       	mov	r7, r24
    1952:	9a e3       	ldi	r25, 0x3A	; 58
    1954:	89 2e       	mov	r8, r25
    1956:	8a 2d       	mov	r24, r10
    1958:	80 74       	andi	r24, 0x40	; 64
    195a:	68 2e       	mov	r6, r24
    195c:	e1 14       	cp	r14, r1
    195e:	f1 04       	cpc	r15, r1
    1960:	09 f4       	brne	.+2      	; 0x1964 <_Z8USB_SendhPKvi+0x6a>
    1962:	46 c0       	rjmp	.+140    	; 0x19f0 <_Z8USB_SendhPKvi+0xf6>
    1964:	8a 2d       	mov	r24, r10
    1966:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <_Z13USB_SendSpaceh>
    196a:	18 2f       	mov	r17, r24
    196c:	81 11       	cpse	r24, r1
    196e:	0a c0       	rjmp	.+20     	; 0x1984 <_Z8USB_SendhPKvi+0x8a>
    1970:	9a 94       	dec	r9
    1972:	99 20       	and	r9, r9
    1974:	d9 f2       	breq	.-74     	; 0x192c <_Z8USB_SendhPKvi+0x32>
    1976:	61 e0       	ldi	r22, 0x01	; 1
    1978:	70 e0       	ldi	r23, 0x00	; 0
    197a:	80 e0       	ldi	r24, 0x00	; 0
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	0e 94 03 10 	call	0x2006	; 0x2006 <delay>
    1982:	ec cf       	rjmp	.-40     	; 0x195c <_Z8USB_SendhPKvi+0x62>
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	e8 16       	cp	r14, r24
    1988:	f9 06       	cpc	r15, r25
    198a:	0c f4       	brge	.+2      	; 0x198e <_Z8USB_SendhPKvi+0x94>
    198c:	1e 2d       	mov	r17, r14
    198e:	6a 2d       	mov	r22, r10
    1990:	ce 01       	movw	r24, r28
    1992:	01 96       	adiw	r24, 0x01	; 1
    1994:	0e 94 ef 0b 	call	0x17de	; 0x17de <_ZN6LockEPC1Eh>
    1998:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    199c:	85 ff       	sbrs	r24, 5
    199e:	25 c0       	rjmp	.+74     	; 0x19ea <_Z8USB_SendhPKvi+0xf0>
    19a0:	81 2f       	mov	r24, r17
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	e8 1a       	sub	r14, r24
    19a6:	f9 0a       	sbc	r15, r25
    19a8:	77 20       	and	r7, r7
    19aa:	29 f0       	breq	.+10     	; 0x19b6 <_Z8USB_SendhPKvi+0xbc>
    19ac:	11 50       	subi	r17, 0x01	; 1
    19ae:	a0 f0       	brcs	.+40     	; 0x19d8 <_Z8USB_SendhPKvi+0xde>
    19b0:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
    19b4:	fb cf       	rjmp	.-10     	; 0x19ac <_Z8USB_SendhPKvi+0xb2>
    19b6:	f6 01       	movw	r30, r12
    19b8:	a7 fe       	sbrs	r10, 7
    19ba:	0a c0       	rjmp	.+20     	; 0x19d0 <_Z8USB_SendhPKvi+0xd6>
    19bc:	11 50       	subi	r17, 0x01	; 1
    19be:	50 f0       	brcs	.+20     	; 0x19d4 <_Z8USB_SendhPKvi+0xda>
    19c0:	24 91       	lpm	r18, Z
    19c2:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
    19c6:	31 96       	adiw	r30, 0x01	; 1
    19c8:	f9 cf       	rjmp	.-14     	; 0x19bc <_Z8USB_SendhPKvi+0xc2>
    19ca:	21 91       	ld	r18, Z+
    19cc:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
    19d0:	11 50       	subi	r17, 0x01	; 1
    19d2:	d8 f7       	brcc	.-10     	; 0x19ca <_Z8USB_SendhPKvi+0xd0>
    19d4:	c8 0e       	add	r12, r24
    19d6:	d9 1e       	adc	r13, r25
    19d8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    19dc:	85 ff       	sbrs	r24, 5
    19de:	0f c0       	rjmp	.+30     	; 0x19fe <_Z8USB_SendhPKvi+0x104>
    19e0:	e1 14       	cp	r14, r1
    19e2:	f1 04       	cpc	r15, r1
    19e4:	11 f4       	brne	.+4      	; 0x19ea <_Z8USB_SendhPKvi+0xf0>
    19e6:	61 10       	cpse	r6, r1
    19e8:	0a c0       	rjmp	.+20     	; 0x19fe <_Z8USB_SendhPKvi+0x104>
    19ea:	89 81       	ldd	r24, Y+1	; 0x01
    19ec:	8f bf       	out	0x3f, r24	; 63
    19ee:	b6 cf       	rjmp	.-148    	; 0x195c <_Z8USB_SendhPKvi+0x62>
    19f0:	5d 9a       	sbi	0x0b, 5	; 11
    19f2:	84 e6       	ldi	r24, 0x64	; 100
    19f4:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <TxLEDPulse>
    19f8:	8b 2d       	mov	r24, r11
    19fa:	90 2f       	mov	r25, r16
    19fc:	03 c0       	rjmp	.+6      	; 0x1a04 <_Z8USB_SendhPKvi+0x10a>
    19fe:	80 92 e8 00 	sts	0x00E8, r8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    1a02:	f3 cf       	rjmp	.-26     	; 0x19ea <_Z8USB_SendhPKvi+0xf0>
    1a04:	0f 90       	pop	r0
    1a06:	df 91       	pop	r29
    1a08:	cf 91       	pop	r28
    1a0a:	1f 91       	pop	r17
    1a0c:	0f 91       	pop	r16
    1a0e:	ff 90       	pop	r15
    1a10:	ef 90       	pop	r14
    1a12:	df 90       	pop	r13
    1a14:	cf 90       	pop	r12
    1a16:	bf 90       	pop	r11
    1a18:	af 90       	pop	r10
    1a1a:	9f 90       	pop	r9
    1a1c:	8f 90       	pop	r8
    1a1e:	7f 90       	pop	r7
    1a20:	6f 90       	pop	r6
    1a22:	08 95       	ret

00001a24 <_Z11InitControli>:
    1a24:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
    1a28:	10 92 9d 03 	sts	0x039D, r1	; 0x80039d <_ZL6_cmark+0x1>
    1a2c:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <_ZL6_cmark>
    1a30:	90 93 9b 03 	sts	0x039B, r25	; 0x80039b <_ZL5_cend+0x1>
    1a34:	80 93 9a 03 	sts	0x039A, r24	; 0x80039a <_ZL5_cend>
    1a38:	08 95       	ret

00001a3a <_Z15USB_SendControlhPKvi>:
    1a3a:	df 92       	push	r13
    1a3c:	ef 92       	push	r14
    1a3e:	ff 92       	push	r15
    1a40:	0f 93       	push	r16
    1a42:	1f 93       	push	r17
    1a44:	cf 93       	push	r28
    1a46:	df 93       	push	r29
    1a48:	d8 2e       	mov	r13, r24
    1a4a:	8a 01       	movw	r16, r20
    1a4c:	7b 01       	movw	r14, r22
    1a4e:	e4 0e       	add	r14, r20
    1a50:	f5 1e       	adc	r15, r21
    1a52:	eb 01       	movw	r28, r22
    1a54:	ce 15       	cp	r28, r14
    1a56:	df 05       	cpc	r29, r15
    1a58:	71 f0       	breq	.+28     	; 0x1a76 <_Z15USB_SendControlhPKvi+0x3c>
    1a5a:	d7 fe       	sbrs	r13, 7
    1a5c:	03 c0       	rjmp	.+6      	; 0x1a64 <_Z15USB_SendControlhPKvi+0x2a>
    1a5e:	fe 01       	movw	r30, r28
    1a60:	84 91       	lpm	r24, Z
    1a62:	01 c0       	rjmp	.+2      	; 0x1a66 <_Z15USB_SendControlhPKvi+0x2c>
    1a64:	88 81       	ld	r24, Y
    1a66:	0e 94 53 0b 	call	0x16a6	; 0x16a6 <_ZL11SendControlh>
    1a6a:	21 96       	adiw	r28, 0x01	; 1
    1a6c:	81 11       	cpse	r24, r1
    1a6e:	f2 cf       	rjmp	.-28     	; 0x1a54 <_Z15USB_SendControlhPKvi+0x1a>
    1a70:	8f ef       	ldi	r24, 0xFF	; 255
    1a72:	9f ef       	ldi	r25, 0xFF	; 255
    1a74:	01 c0       	rjmp	.+2      	; 0x1a78 <_Z15USB_SendControlhPKvi+0x3e>
    1a76:	c8 01       	movw	r24, r16
    1a78:	df 91       	pop	r29
    1a7a:	cf 91       	pop	r28
    1a7c:	1f 91       	pop	r17
    1a7e:	0f 91       	pop	r16
    1a80:	ff 90       	pop	r15
    1a82:	ef 90       	pop	r14
    1a84:	df 90       	pop	r13
    1a86:	08 95       	ret

00001a88 <_Z15USB_RecvControlPvi>:
    1a88:	af 92       	push	r10
    1a8a:	bf 92       	push	r11
    1a8c:	df 92       	push	r13
    1a8e:	ef 92       	push	r14
    1a90:	ff 92       	push	r15
    1a92:	0f 93       	push	r16
    1a94:	1f 93       	push	r17
    1a96:	cf 93       	push	r28
    1a98:	df 93       	push	r29
    1a9a:	5c 01       	movw	r10, r24
    1a9c:	8b 01       	movw	r16, r22
    1a9e:	eb 01       	movw	r28, r22
    1aa0:	9b ef       	ldi	r25, 0xFB	; 251
    1aa2:	d9 2e       	mov	r13, r25
    1aa4:	20 97       	sbiw	r28, 0x00	; 0
    1aa6:	c1 f0       	breq	.+48     	; 0x1ad8 <_Z15USB_RecvControlPvi+0x50>
    1aa8:	7e 01       	movw	r14, r28
    1aaa:	c1 34       	cpi	r28, 0x41	; 65
    1aac:	d1 05       	cpc	r29, r1
    1aae:	1c f0       	brlt	.+6      	; 0x1ab6 <_Z15USB_RecvControlPvi+0x2e>
    1ab0:	80 e4       	ldi	r24, 0x40	; 64
    1ab2:	e8 2e       	mov	r14, r24
    1ab4:	f1 2c       	mov	r15, r1
    1ab6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    1aba:	82 ff       	sbrs	r24, 2
    1abc:	fc cf       	rjmp	.-8      	; 0x1ab6 <_Z15USB_RecvControlPvi+0x2e>
    1abe:	c8 01       	movw	r24, r16
    1ac0:	8c 1b       	sub	r24, r28
    1ac2:	9d 0b       	sbc	r25, r29
    1ac4:	6e 2d       	mov	r22, r14
    1ac6:	8a 0d       	add	r24, r10
    1ac8:	9b 1d       	adc	r25, r11
    1aca:	0e 94 46 0b 	call	0x168c	; 0x168c <_ZL4RecvPVhh>
    1ace:	d0 92 e8 00 	sts	0x00E8, r13	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    1ad2:	ce 19       	sub	r28, r14
    1ad4:	df 09       	sbc	r29, r15
    1ad6:	e6 cf       	rjmp	.-52     	; 0x1aa4 <_Z15USB_RecvControlPvi+0x1c>
    1ad8:	c8 01       	movw	r24, r16
    1ada:	df 91       	pop	r29
    1adc:	cf 91       	pop	r28
    1ade:	1f 91       	pop	r17
    1ae0:	0f 91       	pop	r16
    1ae2:	ff 90       	pop	r15
    1ae4:	ef 90       	pop	r14
    1ae6:	df 90       	pop	r13
    1ae8:	bf 90       	pop	r11
    1aea:	af 90       	pop	r10
    1aec:	08 95       	ret

00001aee <__vector_11>:
    1aee:	1f 92       	push	r1
    1af0:	0f 92       	push	r0
    1af2:	0f b6       	in	r0, 0x3f	; 63
    1af4:	0f 92       	push	r0
    1af6:	11 24       	eor	r1, r1
    1af8:	cf 92       	push	r12
    1afa:	df 92       	push	r13
    1afc:	ef 92       	push	r14
    1afe:	ff 92       	push	r15
    1b00:	0f 93       	push	r16
    1b02:	1f 93       	push	r17
    1b04:	2f 93       	push	r18
    1b06:	3f 93       	push	r19
    1b08:	4f 93       	push	r20
    1b0a:	5f 93       	push	r21
    1b0c:	6f 93       	push	r22
    1b0e:	7f 93       	push	r23
    1b10:	8f 93       	push	r24
    1b12:	9f 93       	push	r25
    1b14:	af 93       	push	r26
    1b16:	bf 93       	push	r27
    1b18:	ef 93       	push	r30
    1b1a:	ff 93       	push	r31
    1b1c:	cf 93       	push	r28
    1b1e:	df 93       	push	r29
    1b20:	cd b7       	in	r28, 0x3d	; 61
    1b22:	de b7       	in	r29, 0x3e	; 62
    1b24:	6c 97       	sbiw	r28, 0x1c	; 28
    1b26:	de bf       	out	0x3e, r29	; 62
    1b28:	cd bf       	out	0x3d, r28	; 61
    1b2a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
    1b2e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    1b32:	83 ff       	sbrs	r24, 3
    1b34:	24 c1       	rjmp	.+584    	; 0x1d7e <__vector_11+0x290>
    1b36:	68 e0       	ldi	r22, 0x08	; 8
    1b38:	ce 01       	movw	r24, r28
    1b3a:	45 96       	adiw	r24, 0x15	; 21
    1b3c:	0e 94 46 0b 	call	0x168c	; 0x168c <_ZL4RecvPVhh>
    1b40:	82 ef       	ldi	r24, 0xF2	; 242
    1b42:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    1b46:	8d 89       	ldd	r24, Y+21	; 0x15
    1b48:	87 ff       	sbrs	r24, 7
    1b4a:	05 c0       	rjmp	.+10     	; 0x1b56 <__vector_11+0x68>
    1b4c:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    1b50:	90 ff       	sbrs	r25, 0
    1b52:	fc cf       	rjmp	.-8      	; 0x1b4c <__vector_11+0x5e>
    1b54:	03 c0       	rjmp	.+6      	; 0x1b5c <__vector_11+0x6e>
    1b56:	9e ef       	ldi	r25, 0xFE	; 254
    1b58:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    1b5c:	98 2f       	mov	r25, r24
    1b5e:	90 76       	andi	r25, 0x60	; 96
    1b60:	09 f0       	breq	.+2      	; 0x1b64 <__vector_11+0x76>
    1b62:	e5 c0       	rjmp	.+458    	; 0x1d2e <__vector_11+0x240>
    1b64:	9e 89       	ldd	r25, Y+22	; 0x16
    1b66:	4f 89       	ldd	r20, Y+23	; 0x17
    1b68:	58 8d       	ldd	r21, Y+24	; 0x18
    1b6a:	2f 89       	ldd	r18, Y+23	; 0x17
    1b6c:	18 8d       	ldd	r17, Y+24	; 0x18
    1b6e:	91 11       	cpse	r25, r1
    1b70:	0c c0       	rjmp	.+24     	; 0x1b8a <__vector_11+0x9c>
    1b72:	80 38       	cpi	r24, 0x80	; 128
    1b74:	29 f4       	brne	.+10     	; 0x1b80 <__vector_11+0x92>
    1b76:	80 91 9f 03 	lds	r24, 0x039F	; 0x80039f <_usbCurrentStatus>
    1b7a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
    1b7e:	02 c0       	rjmp	.+4      	; 0x1b84 <__vector_11+0x96>
    1b80:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
    1b84:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
    1b88:	f3 c0       	rjmp	.+486    	; 0x1d70 <__vector_11+0x282>
    1b8a:	91 30       	cpi	r25, 0x01	; 1
    1b8c:	51 f4       	brne	.+20     	; 0x1ba2 <__vector_11+0xb4>
    1b8e:	81 11       	cpse	r24, r1
    1b90:	ef c0       	rjmp	.+478    	; 0x1d70 <__vector_11+0x282>
    1b92:	41 30       	cpi	r20, 0x01	; 1
    1b94:	51 05       	cpc	r21, r1
    1b96:	09 f0       	breq	.+2      	; 0x1b9a <__vector_11+0xac>
    1b98:	eb c0       	rjmp	.+470    	; 0x1d70 <__vector_11+0x282>
    1b9a:	80 91 9f 03 	lds	r24, 0x039F	; 0x80039f <_usbCurrentStatus>
    1b9e:	8d 7f       	andi	r24, 0xFD	; 253
    1ba0:	0b c0       	rjmp	.+22     	; 0x1bb8 <__vector_11+0xca>
    1ba2:	93 30       	cpi	r25, 0x03	; 3
    1ba4:	61 f4       	brne	.+24     	; 0x1bbe <__vector_11+0xd0>
    1ba6:	81 11       	cpse	r24, r1
    1ba8:	e3 c0       	rjmp	.+454    	; 0x1d70 <__vector_11+0x282>
    1baa:	41 30       	cpi	r20, 0x01	; 1
    1bac:	51 05       	cpc	r21, r1
    1bae:	09 f0       	breq	.+2      	; 0x1bb2 <__vector_11+0xc4>
    1bb0:	df c0       	rjmp	.+446    	; 0x1d70 <__vector_11+0x282>
    1bb2:	80 91 9f 03 	lds	r24, 0x039F	; 0x80039f <_usbCurrentStatus>
    1bb6:	82 60       	ori	r24, 0x02	; 2
    1bb8:	80 93 9f 03 	sts	0x039F, r24	; 0x80039f <_usbCurrentStatus>
    1bbc:	d9 c0       	rjmp	.+434    	; 0x1d70 <__vector_11+0x282>
    1bbe:	95 30       	cpi	r25, 0x05	; 5
    1bc0:	49 f4       	brne	.+18     	; 0x1bd4 <__vector_11+0xe6>
    1bc2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    1bc6:	80 ff       	sbrs	r24, 0
    1bc8:	fc cf       	rjmp	.-8      	; 0x1bc2 <__vector_11+0xd4>
    1bca:	82 2f       	mov	r24, r18
    1bcc:	80 68       	ori	r24, 0x80	; 128
    1bce:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__DATA_REGION_ORIGIN__+0x83>
    1bd2:	ce c0       	rjmp	.+412    	; 0x1d70 <__vector_11+0x282>
    1bd4:	96 30       	cpi	r25, 0x06	; 6
    1bd6:	09 f0       	breq	.+2      	; 0x1bda <__vector_11+0xec>
    1bd8:	7d c0       	rjmp	.+250    	; 0x1cd4 <__vector_11+0x1e6>
    1bda:	eb 8c       	ldd	r14, Y+27	; 0x1b
    1bdc:	fc 8c       	ldd	r15, Y+28	; 0x1c
    1bde:	12 30       	cpi	r17, 0x02	; 2
    1be0:	69 f5       	brne	.+90     	; 0x1c3c <__vector_11+0x14e>
    1be2:	80 e0       	ldi	r24, 0x00	; 0
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <_Z11InitControli>
    1bea:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <_ZL14SendInterfacesv>
    1bee:	99 e0       	ldi	r25, 0x09	; 9
    1bf0:	9e 01       	movw	r18, r28
    1bf2:	2f 5f       	subi	r18, 0xFF	; 255
    1bf4:	3f 4f       	sbci	r19, 0xFF	; 255
    1bf6:	69 01       	movw	r12, r18
    1bf8:	f9 01       	movw	r30, r18
    1bfa:	29 2f       	mov	r18, r25
    1bfc:	11 92       	st	Z+, r1
    1bfe:	2a 95       	dec	r18
    1c00:	e9 f7       	brne	.-6      	; 0x1bfc <__vector_11+0x10e>
    1c02:	99 83       	std	Y+1, r25	; 0x01
    1c04:	1a 83       	std	Y+2, r17	; 0x02
    1c06:	91 e0       	ldi	r25, 0x01	; 1
    1c08:	9e 83       	std	Y+6, r25	; 0x06
    1c0a:	90 ea       	ldi	r25, 0xA0	; 160
    1c0c:	98 87       	std	Y+8, r25	; 0x08
    1c0e:	9a ef       	ldi	r25, 0xFA	; 250
    1c10:	99 87       	std	Y+9, r25	; 0x09
    1c12:	20 91 9c 03 	lds	r18, 0x039C	; 0x80039c <_ZL6_cmark>
    1c16:	30 91 9d 03 	lds	r19, 0x039D	; 0x80039d <_ZL6_cmark+0x1>
    1c1a:	27 5f       	subi	r18, 0xF7	; 247
    1c1c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c1e:	3c 83       	std	Y+4, r19	; 0x04
    1c20:	2b 83       	std	Y+3, r18	; 0x03
    1c22:	8d 83       	std	Y+5, r24	; 0x05
    1c24:	c7 01       	movw	r24, r14
    1c26:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <_Z11InitControli>
    1c2a:	49 e0       	ldi	r20, 0x09	; 9
    1c2c:	50 e0       	ldi	r21, 0x00	; 0
    1c2e:	b6 01       	movw	r22, r12
    1c30:	80 e0       	ldi	r24, 0x00	; 0
    1c32:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <_Z15USB_SendControlhPKvi>
    1c36:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <_ZL14SendInterfacesv>
    1c3a:	9a c0       	rjmp	.+308    	; 0x1d70 <__vector_11+0x282>
    1c3c:	c7 01       	movw	r24, r14
    1c3e:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <_Z11InitControli>
    1c42:	0e 94 ef 16 	call	0x2dde	; 0x2dde <_Z12PluggableUSBv>
    1c46:	be 01       	movw	r22, r28
    1c48:	6b 5e       	subi	r22, 0xEB	; 235
    1c4a:	7f 4f       	sbci	r23, 0xFF	; 255
    1c4c:	0e 94 93 16 	call	0x2d26	; 0x2d26 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
    1c50:	00 97       	sbiw	r24, 0x00	; 0
    1c52:	19 f0       	breq	.+6      	; 0x1c5a <__vector_11+0x16c>
    1c54:	0c f0       	brlt	.+2      	; 0x1c58 <__vector_11+0x16a>
    1c56:	8c c0       	rjmp	.+280    	; 0x1d70 <__vector_11+0x282>
    1c58:	8f c0       	rjmp	.+286    	; 0x1d78 <__vector_11+0x28a>
    1c5a:	11 30       	cpi	r17, 0x01	; 1
    1c5c:	71 f4       	brne	.+28     	; 0x1c7a <__vector_11+0x18c>
    1c5e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c60:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c62:	08 97       	sbiw	r24, 0x08	; 8
    1c64:	19 f4       	brne	.+6      	; 0x1c6c <__vector_11+0x17e>
    1c66:	81 e0       	ldi	r24, 0x01	; 1
    1c68:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <_ZL13_cdcComposite>
    1c6c:	80 91 99 03 	lds	r24, 0x0399	; 0x800399 <_ZL13_cdcComposite>
    1c70:	81 11       	cpse	r24, r1
    1c72:	73 c0       	rjmp	.+230    	; 0x1d5a <__vector_11+0x26c>
    1c74:	6c ed       	ldi	r22, 0xDC	; 220
    1c76:	70 e0       	ldi	r23, 0x00	; 0
    1c78:	75 c0       	rjmp	.+234    	; 0x1d64 <__vector_11+0x276>
    1c7a:	13 30       	cpi	r17, 0x03	; 3
    1c7c:	09 f0       	breq	.+2      	; 0x1c80 <__vector_11+0x192>
    1c7e:	7c c0       	rjmp	.+248    	; 0x1d78 <__vector_11+0x28a>
    1c80:	8f 89       	ldd	r24, Y+23	; 0x17
    1c82:	88 23       	and	r24, r24
    1c84:	09 f4       	brne	.+2      	; 0x1c88 <__vector_11+0x19a>
    1c86:	6c c0       	rjmp	.+216    	; 0x1d60 <__vector_11+0x272>
    1c88:	82 30       	cpi	r24, 0x02	; 2
    1c8a:	29 f4       	brne	.+10     	; 0x1c96 <__vector_11+0x1a8>
    1c8c:	40 e8       	ldi	r20, 0x80	; 128
    1c8e:	6d e0       	ldi	r22, 0x0D	; 13
    1c90:	8a ef       	ldi	r24, 0xFA	; 250
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	06 c0       	rjmp	.+12     	; 0x1ca2 <__vector_11+0x1b4>
    1c96:	81 30       	cpi	r24, 0x01	; 1
    1c98:	39 f4       	brne	.+14     	; 0x1ca8 <__vector_11+0x1ba>
    1c9a:	40 e8       	ldi	r20, 0x80	; 128
    1c9c:	6b e0       	ldi	r22, 0x0B	; 11
    1c9e:	8e ee       	ldi	r24, 0xEE	; 238
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	0e 94 81 0b 	call	0x1702	; 0x1702 <_ZL24USB_SendStringDescriptorPKhhh>
    1ca6:	56 c0       	rjmp	.+172    	; 0x1d54 <__vector_11+0x266>
    1ca8:	83 30       	cpi	r24, 0x03	; 3
    1caa:	09 f0       	breq	.+2      	; 0x1cae <__vector_11+0x1c0>
    1cac:	65 c0       	rjmp	.+202    	; 0x1d78 <__vector_11+0x28a>
    1cae:	0e 94 ef 16 	call	0x2dde	; 0x2dde <_Z12PluggableUSBv>
    1cb2:	8e 01       	movw	r16, r28
    1cb4:	0f 5f       	subi	r16, 0xFF	; 255
    1cb6:	1f 4f       	sbci	r17, 0xFF	; 255
    1cb8:	b8 01       	movw	r22, r16
    1cba:	0e 94 b2 16 	call	0x2d64	; 0x2d64 <_ZN13PluggableUSB_12getShortNameEPc>
    1cbe:	f8 01       	movw	r30, r16
    1cc0:	01 90       	ld	r0, Z+
    1cc2:	00 20       	and	r0, r0
    1cc4:	e9 f7       	brne	.-6      	; 0x1cc0 <__vector_11+0x1d2>
    1cc6:	31 97       	sbiw	r30, 0x01	; 1
    1cc8:	bf 01       	movw	r22, r30
    1cca:	60 1b       	sub	r22, r16
    1ccc:	71 0b       	sbc	r23, r17
    1cce:	40 e0       	ldi	r20, 0x00	; 0
    1cd0:	c8 01       	movw	r24, r16
    1cd2:	e7 cf       	rjmp	.-50     	; 0x1ca2 <__vector_11+0x1b4>
    1cd4:	97 30       	cpi	r25, 0x07	; 7
    1cd6:	09 f4       	brne	.+2      	; 0x1cda <__vector_11+0x1ec>
    1cd8:	4f c0       	rjmp	.+158    	; 0x1d78 <__vector_11+0x28a>
    1cda:	98 30       	cpi	r25, 0x08	; 8
    1cdc:	21 f4       	brne	.+8      	; 0x1ce6 <__vector_11+0x1f8>
    1cde:	81 e0       	ldi	r24, 0x01	; 1
    1ce0:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__DATA_REGION_ORIGIN__+0x91>
    1ce4:	45 c0       	rjmp	.+138    	; 0x1d70 <__vector_11+0x282>
    1ce6:	99 30       	cpi	r25, 0x09	; 9
    1ce8:	09 f0       	breq	.+2      	; 0x1cec <__vector_11+0x1fe>
    1cea:	42 c0       	rjmp	.+132    	; 0x1d70 <__vector_11+0x282>
    1cec:	83 70       	andi	r24, 0x03	; 3
    1cee:	09 f0       	breq	.+2      	; 0x1cf2 <__vector_11+0x204>
    1cf0:	43 c0       	rjmp	.+134    	; 0x1d78 <__vector_11+0x28a>
    1cf2:	ef e3       	ldi	r30, 0x3F	; 63
    1cf4:	f1 e0       	ldi	r31, 0x01	; 1
    1cf6:	81 e0       	ldi	r24, 0x01	; 1
    1cf8:	31 e0       	ldi	r19, 0x01	; 1
    1cfa:	96 e3       	ldi	r25, 0x36	; 54
    1cfc:	20 81       	ld	r18, Z
    1cfe:	21 11       	cpse	r18, r1
    1d00:	09 c0       	rjmp	.+18     	; 0x1d14 <__vector_11+0x226>
    1d02:	8e e7       	ldi	r24, 0x7E	; 126
    1d04:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__DATA_REGION_ORIGIN__+0x8a>
    1d08:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__DATA_REGION_ORIGIN__+0x8a>
    1d0c:	8f 89       	ldd	r24, Y+23	; 0x17
    1d0e:	80 93 a0 03 	sts	0x03A0, r24	; 0x8003a0 <_usbConfiguration>
    1d12:	2e c0       	rjmp	.+92     	; 0x1d70 <__vector_11+0x282>
    1d14:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
    1d18:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
    1d1c:	21 91       	ld	r18, Z+
    1d1e:	20 93 ec 00 	sts	0x00EC, r18	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
    1d22:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
    1d26:	8f 5f       	subi	r24, 0xFF	; 255
    1d28:	87 30       	cpi	r24, 0x07	; 7
    1d2a:	41 f7       	brne	.-48     	; 0x1cfc <__vector_11+0x20e>
    1d2c:	ea cf       	rjmp	.-44     	; 0x1d02 <__vector_11+0x214>
    1d2e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d30:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d32:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <_Z11InitControli>
    1d36:	89 8d       	ldd	r24, Y+25	; 0x19
    1d38:	81 11       	cpse	r24, r1
    1d3a:	05 c0       	rjmp	.+10     	; 0x1d46 <__vector_11+0x258>
    1d3c:	ce 01       	movw	r24, r28
    1d3e:	45 96       	adiw	r24, 0x15	; 21
    1d40:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <_Z9CDC_SetupR8USBSetup>
    1d44:	07 c0       	rjmp	.+14     	; 0x1d54 <__vector_11+0x266>
    1d46:	0e 94 ef 16 	call	0x2dde	; 0x2dde <_Z12PluggableUSBv>
    1d4a:	be 01       	movw	r22, r28
    1d4c:	6b 5e       	subi	r22, 0xEB	; 235
    1d4e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d50:	0e 94 d1 16 	call	0x2da2	; 0x2da2 <_ZN13PluggableUSB_5setupER8USBSetup>
    1d54:	88 23       	and	r24, r24
    1d56:	81 f0       	breq	.+32     	; 0x1d78 <__vector_11+0x28a>
    1d58:	0b c0       	rjmp	.+22     	; 0x1d70 <__vector_11+0x282>
    1d5a:	6a ec       	ldi	r22, 0xCA	; 202
    1d5c:	70 e0       	ldi	r23, 0x00	; 0
    1d5e:	02 c0       	rjmp	.+4      	; 0x1d64 <__vector_11+0x276>
    1d60:	68 e0       	ldi	r22, 0x08	; 8
    1d62:	71 e0       	ldi	r23, 0x01	; 1
    1d64:	fb 01       	movw	r30, r22
    1d66:	44 91       	lpm	r20, Z
    1d68:	50 e0       	ldi	r21, 0x00	; 0
    1d6a:	80 e8       	ldi	r24, 0x80	; 128
    1d6c:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <_Z15USB_SendControlhPKvi>
    1d70:	8e ef       	ldi	r24, 0xFE	; 254
    1d72:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    1d76:	03 c0       	rjmp	.+6      	; 0x1d7e <__vector_11+0x290>
    1d78:	81 e2       	ldi	r24, 0x21	; 33
    1d7a:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
    1d7e:	6c 96       	adiw	r28, 0x1c	; 28
    1d80:	0f b6       	in	r0, 0x3f	; 63
    1d82:	f8 94       	cli
    1d84:	de bf       	out	0x3e, r29	; 62
    1d86:	0f be       	out	0x3f, r0	; 63
    1d88:	cd bf       	out	0x3d, r28	; 61
    1d8a:	df 91       	pop	r29
    1d8c:	cf 91       	pop	r28
    1d8e:	ff 91       	pop	r31
    1d90:	ef 91       	pop	r30
    1d92:	bf 91       	pop	r27
    1d94:	af 91       	pop	r26
    1d96:	9f 91       	pop	r25
    1d98:	8f 91       	pop	r24
    1d9a:	7f 91       	pop	r23
    1d9c:	6f 91       	pop	r22
    1d9e:	5f 91       	pop	r21
    1da0:	4f 91       	pop	r20
    1da2:	3f 91       	pop	r19
    1da4:	2f 91       	pop	r18
    1da6:	1f 91       	pop	r17
    1da8:	0f 91       	pop	r16
    1daa:	ff 90       	pop	r15
    1dac:	ef 90       	pop	r14
    1dae:	df 90       	pop	r13
    1db0:	cf 90       	pop	r12
    1db2:	0f 90       	pop	r0
    1db4:	0f be       	out	0x3f, r0	; 63
    1db6:	0f 90       	pop	r0
    1db8:	1f 90       	pop	r1
    1dba:	18 95       	reti

00001dbc <_Z9USB_Flushh>:
    1dbc:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
    1dc0:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__DATA_REGION_ORIGIN__+0x92>
    1dc4:	88 23       	and	r24, r24
    1dc6:	19 f0       	breq	.+6      	; 0x1dce <_Z9USB_Flushh+0x12>
    1dc8:	8a e3       	ldi	r24, 0x3A	; 58
    1dca:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__DATA_REGION_ORIGIN__+0x88>
    1dce:	08 95       	ret

00001dd0 <__vector_10>:
    1dd0:	1f 92       	push	r1
    1dd2:	0f 92       	push	r0
    1dd4:	0f b6       	in	r0, 0x3f	; 63
    1dd6:	0f 92       	push	r0
    1dd8:	11 24       	eor	r1, r1
    1dda:	2f 93       	push	r18
    1ddc:	3f 93       	push	r19
    1dde:	4f 93       	push	r20
    1de0:	5f 93       	push	r21
    1de2:	6f 93       	push	r22
    1de4:	7f 93       	push	r23
    1de6:	8f 93       	push	r24
    1de8:	9f 93       	push	r25
    1dea:	af 93       	push	r26
    1dec:	bf 93       	push	r27
    1dee:	cf 93       	push	r28
    1df0:	ef 93       	push	r30
    1df2:	ff 93       	push	r31
    1df4:	c0 91 e1 00 	lds	r28, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
    1df8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
    1dfc:	83 7f       	andi	r24, 0xF3	; 243
    1dfe:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
    1e02:	c3 ff       	sbrs	r28, 3
    1e04:	0f c0       	rjmp	.+30     	; 0x1e24 <__vector_10+0x54>
    1e06:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__DATA_REGION_ORIGIN__+0x89>
    1e0a:	81 e0       	ldi	r24, 0x01	; 1
    1e0c:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__DATA_REGION_ORIGIN__+0x8b>
    1e10:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__DATA_REGION_ORIGIN__+0x8c>
    1e14:	82 e3       	ldi	r24, 0x32	; 50
    1e16:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__DATA_REGION_ORIGIN__+0x8d>
    1e1a:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <_usbConfiguration>
    1e1e:	88 e0       	ldi	r24, 0x08	; 8
    1e20:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__DATA_REGION_ORIGIN__+0x90>
    1e24:	c2 ff       	sbrs	r28, 2
    1e26:	19 c0       	rjmp	.+50     	; 0x1e5a <__vector_10+0x8a>
    1e28:	83 e0       	ldi	r24, 0x03	; 3
    1e2a:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <_Z9USB_Flushh>
    1e2e:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <TxLEDPulse>
    1e32:	88 23       	and	r24, r24
    1e34:	39 f0       	breq	.+14     	; 0x1e44 <__vector_10+0x74>
    1e36:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <TxLEDPulse>
    1e3a:	81 50       	subi	r24, 0x01	; 1
    1e3c:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <TxLEDPulse>
    1e40:	88 23       	and	r24, r24
    1e42:	89 f1       	breq	.+98     	; 0x1ea6 <__vector_10+0xd6>
    1e44:	80 91 a1 03 	lds	r24, 0x03A1	; 0x8003a1 <RxLEDPulse>
    1e48:	88 23       	and	r24, r24
    1e4a:	39 f0       	breq	.+14     	; 0x1e5a <__vector_10+0x8a>
    1e4c:	80 91 a1 03 	lds	r24, 0x03A1	; 0x8003a1 <RxLEDPulse>
    1e50:	81 50       	subi	r24, 0x01	; 1
    1e52:	80 93 a1 03 	sts	0x03A1, r24	; 0x8003a1 <RxLEDPulse>
    1e56:	88 23       	and	r24, r24
    1e58:	41 f1       	breq	.+80     	; 0x1eaa <__vector_10+0xda>
    1e5a:	c4 ff       	sbrs	r28, 4
    1e5c:	10 c0       	rjmp	.+32     	; 0x1e7e <__vector_10+0xae>
    1e5e:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    1e62:	8e 7e       	andi	r24, 0xEE	; 238
    1e64:	81 60       	ori	r24, 0x01	; 1
    1e66:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    1e6a:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
    1e6e:	8f 7e       	andi	r24, 0xEF	; 239
    1e70:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
    1e74:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <_usbSuspendState>
    1e78:	8e 7e       	andi	r24, 0xEE	; 238
    1e7a:	80 61       	ori	r24, 0x10	; 16
    1e7c:	11 c0       	rjmp	.+34     	; 0x1ea0 <__vector_10+0xd0>
    1e7e:	c0 ff       	sbrs	r28, 0
    1e80:	16 c0       	rjmp	.+44     	; 0x1eae <__vector_10+0xde>
    1e82:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    1e86:	8e 7e       	andi	r24, 0xEE	; 238
    1e88:	80 61       	ori	r24, 0x10	; 16
    1e8a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
    1e8e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
    1e92:	8e 7e       	andi	r24, 0xEE	; 238
    1e94:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
    1e98:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <_usbSuspendState>
    1e9c:	8e 7e       	andi	r24, 0xEE	; 238
    1e9e:	81 60       	ori	r24, 0x01	; 1
    1ea0:	80 93 9e 03 	sts	0x039E, r24	; 0x80039e <_usbSuspendState>
    1ea4:	04 c0       	rjmp	.+8      	; 0x1eae <__vector_10+0xde>
    1ea6:	5d 98       	cbi	0x0b, 5	; 11
    1ea8:	cd cf       	rjmp	.-102    	; 0x1e44 <__vector_10+0x74>
    1eaa:	28 98       	cbi	0x05, 0	; 5
    1eac:	d6 cf       	rjmp	.-84     	; 0x1e5a <__vector_10+0x8a>
    1eae:	ff 91       	pop	r31
    1eb0:	ef 91       	pop	r30
    1eb2:	cf 91       	pop	r28
    1eb4:	bf 91       	pop	r27
    1eb6:	af 91       	pop	r26
    1eb8:	9f 91       	pop	r25
    1eba:	8f 91       	pop	r24
    1ebc:	7f 91       	pop	r23
    1ebe:	6f 91       	pop	r22
    1ec0:	5f 91       	pop	r21
    1ec2:	4f 91       	pop	r20
    1ec4:	3f 91       	pop	r19
    1ec6:	2f 91       	pop	r18
    1ec8:	0f 90       	pop	r0
    1eca:	0f be       	out	0x3f, r0	; 63
    1ecc:	0f 90       	pop	r0
    1ece:	1f 90       	pop	r1
    1ed0:	18 95       	reti

00001ed2 <_ZN10USBDevice_6attachEv>:
{
}

void USBDevice_::attach()
{
	_usbConfiguration = 0;
    1ed2:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <_usbConfiguration>
	_usbCurrentStatus = 0;
    1ed6:	10 92 9f 03 	sts	0x039F, r1	; 0x80039f <_usbCurrentStatus>
	_usbSuspendState = 0;
    1eda:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <_usbSuspendState>
	USB_ClockEnable();
    1ede:	0e 94 b6 0b 	call	0x176c	; 0x176c <_ZL15USB_ClockEnablev>

	UDINT &= ~((1<<WAKEUPI) | (1<<SUSPI)); // clear already pending WAKEUP / SUSPEND requests
    1ee2:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
    1ee6:	8e 7e       	andi	r24, 0xEE	; 238
    1ee8:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__DATA_REGION_ORIGIN__+0x81>
	UDIEN = (1<<EORSTE) | (1<<SOFE) | (1<<SUSPE);	// Enable interrupts for EOR (End of Reset), SOF (start of frame) and SUSPEND
    1eec:	8d e0       	ldi	r24, 0x0D	; 13
    1eee:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__DATA_REGION_ORIGIN__+0x82>
	
	TX_RX_LED_INIT;
    1ef2:	55 9a       	sbi	0x0a, 5	; 10
    1ef4:	20 9a       	sbi	0x04, 0	; 4
    1ef6:	5d 98       	cbi	0x0b, 5	; 11
    1ef8:	28 98       	cbi	0x05, 0	; 5

#if MAGIC_KEY_POS != (RAMEND-1)
	if (pgm_read_word(FLASHEND - 1) == NEW_LUFA_SIGNATURE) {
    1efa:	ee ef       	ldi	r30, 0xFE	; 254
    1efc:	ff e7       	ldi	r31, 0x7F	; 127
    1efe:	85 91       	lpm	r24, Z+
    1f00:	94 91       	lpm	r25, Z
    1f02:	8b 3f       	cpi	r24, 0xFB	; 251
    1f04:	9c 4d       	sbci	r25, 0xDC	; 220
    1f06:	19 f4       	brne	.+6      	; 0x1f0e <_ZN10USBDevice_6attachEv+0x3c>
		_updatedLUFAbootloader = true;
    1f08:	81 e0       	ldi	r24, 0x01	; 1
    1f0a:	80 93 fd 03 	sts	0x03FD, r24	; 0x8003fd <_updatedLUFAbootloader>
    1f0e:	08 95       	ret

00001f10 <__vector_23>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    1f10:	1f 92       	push	r1
    1f12:	0f 92       	push	r0
    1f14:	0f b6       	in	r0, 0x3f	; 63
    1f16:	0f 92       	push	r0
    1f18:	11 24       	eor	r1, r1
    1f1a:	2f 93       	push	r18
    1f1c:	3f 93       	push	r19
    1f1e:	8f 93       	push	r24
    1f20:	9f 93       	push	r25
    1f22:	af 93       	push	r26
    1f24:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    1f26:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <timer0_millis>
    1f2a:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <timer0_millis+0x1>
    1f2e:	a0 91 a6 03 	lds	r26, 0x03A6	; 0x8003a6 <timer0_millis+0x2>
    1f32:	b0 91 a7 03 	lds	r27, 0x03A7	; 0x8003a7 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    1f36:	30 91 a3 03 	lds	r19, 0x03A3	; 0x8003a3 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    1f3a:	23 e0       	ldi	r18, 0x03	; 3
    1f3c:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    1f3e:	2d 37       	cpi	r18, 0x7D	; 125
    1f40:	20 f4       	brcc	.+8      	; 0x1f4a <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    1f42:	01 96       	adiw	r24, 0x01	; 1
    1f44:	a1 1d       	adc	r26, r1
    1f46:	b1 1d       	adc	r27, r1
    1f48:	05 c0       	rjmp	.+10     	; 0x1f54 <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    1f4a:	26 e8       	ldi	r18, 0x86	; 134
    1f4c:	23 0f       	add	r18, r19
		m += 1;
    1f4e:	02 96       	adiw	r24, 0x02	; 2
    1f50:	a1 1d       	adc	r26, r1
    1f52:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    1f54:	20 93 a3 03 	sts	0x03A3, r18	; 0x8003a3 <timer0_fract>
	timer0_millis = m;
    1f58:	80 93 a4 03 	sts	0x03A4, r24	; 0x8003a4 <timer0_millis>
    1f5c:	90 93 a5 03 	sts	0x03A5, r25	; 0x8003a5 <timer0_millis+0x1>
    1f60:	a0 93 a6 03 	sts	0x03A6, r26	; 0x8003a6 <timer0_millis+0x2>
    1f64:	b0 93 a7 03 	sts	0x03A7, r27	; 0x8003a7 <timer0_millis+0x3>
	timer0_overflow_count++;
    1f68:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <timer0_overflow_count>
    1f6c:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <timer0_overflow_count+0x1>
    1f70:	a0 91 aa 03 	lds	r26, 0x03AA	; 0x8003aa <timer0_overflow_count+0x2>
    1f74:	b0 91 ab 03 	lds	r27, 0x03AB	; 0x8003ab <timer0_overflow_count+0x3>
    1f78:	01 96       	adiw	r24, 0x01	; 1
    1f7a:	a1 1d       	adc	r26, r1
    1f7c:	b1 1d       	adc	r27, r1
    1f7e:	80 93 a8 03 	sts	0x03A8, r24	; 0x8003a8 <timer0_overflow_count>
    1f82:	90 93 a9 03 	sts	0x03A9, r25	; 0x8003a9 <timer0_overflow_count+0x1>
    1f86:	a0 93 aa 03 	sts	0x03AA, r26	; 0x8003aa <timer0_overflow_count+0x2>
    1f8a:	b0 93 ab 03 	sts	0x03AB, r27	; 0x8003ab <timer0_overflow_count+0x3>
}
    1f8e:	bf 91       	pop	r27
    1f90:	af 91       	pop	r26
    1f92:	9f 91       	pop	r25
    1f94:	8f 91       	pop	r24
    1f96:	3f 91       	pop	r19
    1f98:	2f 91       	pop	r18
    1f9a:	0f 90       	pop	r0
    1f9c:	0f be       	out	0x3f, r0	; 63
    1f9e:	0f 90       	pop	r0
    1fa0:	1f 90       	pop	r1
    1fa2:	18 95       	reti

00001fa4 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    1fa4:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    1fa6:	f8 94       	cli
	m = timer0_millis;
    1fa8:	60 91 a4 03 	lds	r22, 0x03A4	; 0x8003a4 <timer0_millis>
    1fac:	70 91 a5 03 	lds	r23, 0x03A5	; 0x8003a5 <timer0_millis+0x1>
    1fb0:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <timer0_millis+0x2>
    1fb4:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <timer0_millis+0x3>
	SREG = oldSREG;
    1fb8:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    1fba:	08 95       	ret

00001fbc <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    1fbc:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    1fbe:	f8 94       	cli
	m = timer0_overflow_count;
    1fc0:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <timer0_overflow_count>
    1fc4:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <timer0_overflow_count+0x1>
    1fc8:	a0 91 aa 03 	lds	r26, 0x03AA	; 0x8003aa <timer0_overflow_count+0x2>
    1fcc:	b0 91 ab 03 	lds	r27, 0x03AB	; 0x8003ab <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    1fd0:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    1fd2:	a8 9b       	sbis	0x15, 0	; 21
    1fd4:	05 c0       	rjmp	.+10     	; 0x1fe0 <micros+0x24>
    1fd6:	2f 3f       	cpi	r18, 0xFF	; 255
    1fd8:	19 f0       	breq	.+6      	; 0x1fe0 <micros+0x24>
		m++;
    1fda:	01 96       	adiw	r24, 0x01	; 1
    1fdc:	a1 1d       	adc	r26, r1
    1fde:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    1fe0:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    1fe2:	ba 2f       	mov	r27, r26
    1fe4:	a9 2f       	mov	r26, r25
    1fe6:	98 2f       	mov	r25, r24
    1fe8:	88 27       	eor	r24, r24
    1fea:	82 0f       	add	r24, r18
    1fec:	91 1d       	adc	r25, r1
    1fee:	a1 1d       	adc	r26, r1
    1ff0:	b1 1d       	adc	r27, r1
    1ff2:	bc 01       	movw	r22, r24
    1ff4:	cd 01       	movw	r24, r26
    1ff6:	42 e0       	ldi	r20, 0x02	; 2
    1ff8:	66 0f       	add	r22, r22
    1ffa:	77 1f       	adc	r23, r23
    1ffc:	88 1f       	adc	r24, r24
    1ffe:	99 1f       	adc	r25, r25
    2000:	4a 95       	dec	r20
    2002:	d1 f7       	brne	.-12     	; 0x1ff8 <micros+0x3c>
}
    2004:	08 95       	ret

00002006 <delay>:

void delay(unsigned long ms)
{
    2006:	8f 92       	push	r8
    2008:	9f 92       	push	r9
    200a:	af 92       	push	r10
    200c:	bf 92       	push	r11
    200e:	cf 92       	push	r12
    2010:	df 92       	push	r13
    2012:	ef 92       	push	r14
    2014:	ff 92       	push	r15
    2016:	6b 01       	movw	r12, r22
    2018:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    201a:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <micros>
    201e:	4b 01       	movw	r8, r22
    2020:	5c 01       	movw	r10, r24

	while (ms > 0) {
    2022:	c1 14       	cp	r12, r1
    2024:	d1 04       	cpc	r13, r1
    2026:	e1 04       	cpc	r14, r1
    2028:	f1 04       	cpc	r15, r1
    202a:	01 f1       	breq	.+64     	; 0x206c <delay+0x66>
		yield();
    202c:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    2030:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <micros>
    2034:	dc 01       	movw	r26, r24
    2036:	cb 01       	movw	r24, r22
    2038:	88 19       	sub	r24, r8
    203a:	99 09       	sbc	r25, r9
    203c:	aa 09       	sbc	r26, r10
    203e:	bb 09       	sbc	r27, r11
    2040:	88 3e       	cpi	r24, 0xE8	; 232
    2042:	93 40       	sbci	r25, 0x03	; 3
    2044:	a1 05       	cpc	r26, r1
    2046:	b1 05       	cpc	r27, r1
    2048:	60 f3       	brcs	.-40     	; 0x2022 <delay+0x1c>
			ms--;
    204a:	21 e0       	ldi	r18, 0x01	; 1
    204c:	c2 1a       	sub	r12, r18
    204e:	d1 08       	sbc	r13, r1
    2050:	e1 08       	sbc	r14, r1
    2052:	f1 08       	sbc	r15, r1
			start += 1000;
    2054:	88 ee       	ldi	r24, 0xE8	; 232
    2056:	88 0e       	add	r8, r24
    2058:	83 e0       	ldi	r24, 0x03	; 3
    205a:	98 1e       	adc	r9, r24
    205c:	a1 1c       	adc	r10, r1
    205e:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    2060:	c1 14       	cp	r12, r1
    2062:	d1 04       	cpc	r13, r1
    2064:	e1 04       	cpc	r14, r1
    2066:	f1 04       	cpc	r15, r1
    2068:	19 f7       	brne	.-58     	; 0x2030 <delay+0x2a>
    206a:	db cf       	rjmp	.-74     	; 0x2022 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    206c:	ff 90       	pop	r15
    206e:	ef 90       	pop	r14
    2070:	df 90       	pop	r13
    2072:	cf 90       	pop	r12
    2074:	bf 90       	pop	r11
    2076:	af 90       	pop	r10
    2078:	9f 90       	pop	r9
    207a:	8f 90       	pop	r8
    207c:	08 95       	ret

0000207e <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    207e:	82 30       	cpi	r24, 0x02	; 2
    2080:	91 05       	cpc	r25, r1
    2082:	38 f0       	brcs	.+14     	; 0x2092 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    2084:	88 0f       	add	r24, r24
    2086:	99 1f       	adc	r25, r25
    2088:	88 0f       	add	r24, r24
    208a:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    208c:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    208e:	01 97       	sbiw	r24, 0x01	; 1
    2090:	f1 f7       	brne	.-4      	; 0x208e <delayMicroseconds+0x10>
    2092:	08 95       	ret

00002094 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2094:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2096:	84 b5       	in	r24, 0x24	; 36
    2098:	82 60       	ori	r24, 0x02	; 2
    209a:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    209c:	84 b5       	in	r24, 0x24	; 36
    209e:	81 60       	ori	r24, 0x01	; 1
    20a0:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    20a2:	85 b5       	in	r24, 0x25	; 37
    20a4:	82 60       	ori	r24, 0x02	; 2
    20a6:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    20a8:	85 b5       	in	r24, 0x25	; 37
    20aa:	81 60       	ori	r24, 0x01	; 1
    20ac:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    20ae:	ee e6       	ldi	r30, 0x6E	; 110
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	80 81       	ld	r24, Z
    20b4:	81 60       	ori	r24, 0x01	; 1
    20b6:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    20b8:	e1 e8       	ldi	r30, 0x81	; 129
    20ba:	f0 e0       	ldi	r31, 0x00	; 0
    20bc:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    20be:	80 81       	ld	r24, Z
    20c0:	82 60       	ori	r24, 0x02	; 2
    20c2:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    20c4:	80 81       	ld	r24, Z
    20c6:	81 60       	ori	r24, 0x01	; 1
    20c8:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    20ca:	e0 e8       	ldi	r30, 0x80	; 128
    20cc:	f0 e0       	ldi	r31, 0x00	; 0
    20ce:	80 81       	ld	r24, Z
    20d0:	81 60       	ori	r24, 0x01	; 1
    20d2:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    20d4:	e1 e9       	ldi	r30, 0x91	; 145
    20d6:	f0 e0       	ldi	r31, 0x00	; 0
    20d8:	80 81       	ld	r24, Z
    20da:	82 60       	ori	r24, 0x02	; 2
    20dc:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    20de:	80 81       	ld	r24, Z
    20e0:	81 60       	ori	r24, 0x01	; 1
    20e2:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    20e4:	e0 e9       	ldi	r30, 0x90	; 144
    20e6:	f0 e0       	ldi	r31, 0x00	; 0
    20e8:	80 81       	ld	r24, Z
    20ea:	81 60       	ori	r24, 0x01	; 1
    20ec:	80 83       	st	Z, r24
#endif

#if defined(TCCR4A) && defined(TCCR4B) && defined(TCCR4D) /* beginning of timer4 block for 32U4 and similar */
	sbi(TCCR4B, CS42);		// set timer4 prescale factor to 64
    20ee:	e1 ec       	ldi	r30, 0xC1	; 193
    20f0:	f0 e0       	ldi	r31, 0x00	; 0
    20f2:	80 81       	ld	r24, Z
    20f4:	84 60       	ori	r24, 0x04	; 4
    20f6:	80 83       	st	Z, r24
	sbi(TCCR4B, CS41);
    20f8:	80 81       	ld	r24, Z
    20fa:	82 60       	ori	r24, 0x02	; 2
    20fc:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    20fe:	80 81       	ld	r24, Z
    2100:	81 60       	ori	r24, 0x01	; 1
    2102:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
    2104:	e3 ec       	ldi	r30, 0xC3	; 195
    2106:	f0 e0       	ldi	r31, 0x00	; 0
    2108:	80 81       	ld	r24, Z
    210a:	81 60       	ori	r24, 0x01	; 1
    210c:	80 83       	st	Z, r24
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
    210e:	e0 ec       	ldi	r30, 0xC0	; 192
    2110:	f0 e0       	ldi	r31, 0x00	; 0
    2112:	80 81       	ld	r24, Z
    2114:	82 60       	ori	r24, 0x02	; 2
    2116:	80 83       	st	Z, r24
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
    2118:	e2 ec       	ldi	r30, 0xC2	; 194
    211a:	f0 e0       	ldi	r31, 0x00	; 0
    211c:	80 81       	ld	r24, Z
    211e:	81 60       	ori	r24, 0x01	; 1
    2120:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    2122:	ea e7       	ldi	r30, 0x7A	; 122
    2124:	f0 e0       	ldi	r31, 0x00	; 0
    2126:	80 81       	ld	r24, Z
    2128:	84 60       	ori	r24, 0x04	; 4
    212a:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    212c:	80 81       	ld	r24, Z
    212e:	82 60       	ori	r24, 0x02	; 2
    2130:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    2132:	80 81       	ld	r24, Z
    2134:	81 60       	ori	r24, 0x01	; 1
    2136:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2138:	80 81       	ld	r24, Z
    213a:	80 68       	ori	r24, 0x80	; 128
    213c:	80 83       	st	Z, r24
    213e:	08 95       	ret

00002140 <analogRead>:
{
	uint8_t low, high;

#if defined(analogPinToChannel)
#if defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
    2140:	82 31       	cpi	r24, 0x12	; 18
    2142:	08 f0       	brcs	.+2      	; 0x2146 <analogRead+0x6>
    2144:	82 51       	subi	r24, 0x12	; 18
#endif
	pin = analogPinToChannel(pin);
    2146:	e8 2f       	mov	r30, r24
    2148:	f0 e0       	ldi	r31, 0x00	; 0
    214a:	e4 5f       	subi	r30, 0xF4	; 244
    214c:	fe 4f       	sbci	r31, 0xFE	; 254
    214e:	e4 91       	lpm	r30, Z
#endif

#if defined(ADCSRB) && defined(MUX5)
	// the MUX5 bit of ADCSRB selects whether we're reading from channels
	// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
    2150:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
    2154:	e3 fb       	bst	r30, 3
    2156:	22 27       	eor	r18, r18
    2158:	20 f9       	bld	r18, 0
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	95 e0       	ldi	r25, 0x05	; 5
    215e:	22 0f       	add	r18, r18
    2160:	33 1f       	adc	r19, r19
    2162:	9a 95       	dec	r25
    2164:	e1 f7       	brne	.-8      	; 0x215e <analogRead+0x1e>
    2166:	8f 7d       	andi	r24, 0xDF	; 223
    2168:	28 2b       	or	r18, r24
    216a:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__DATA_REGION_ORIGIN__+0x1b>
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    216e:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <analog_reference>
    2172:	20 e4       	ldi	r18, 0x40	; 64
    2174:	82 9f       	mul	r24, r18
    2176:	c0 01       	movw	r24, r0
    2178:	11 24       	eor	r1, r1
    217a:	e7 70       	andi	r30, 0x07	; 7
    217c:	e8 2b       	or	r30, r24
    217e:	e0 93 7c 00 	sts	0x007C, r30	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    2182:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    2186:	80 64       	ori	r24, 0x40	; 64
    2188:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    218c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    2190:	86 fd       	sbrc	r24, 6
    2192:	fc cf       	rjmp	.-8      	; 0x218c <analogRead+0x4c>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    2194:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
	high = ADCH;
    2198:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    219c:	90 e0       	ldi	r25, 0x00	; 0
}
    219e:	92 2b       	or	r25, r18
    21a0:	08 95       	ret

000021a2 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	fc 01       	movw	r30, r24
    21a6:	31 97       	sbiw	r30, 0x01	; 1
    21a8:	ef 30       	cpi	r30, 0x0F	; 15
    21aa:	f1 05       	cpc	r31, r1
    21ac:	b0 f5       	brcc	.+108    	; 0x221a <turnOffPWM+0x78>
    21ae:	ea 5a       	subi	r30, 0xAA	; 170
    21b0:	ff 4f       	sbci	r31, 0xFF	; 255
    21b2:	0c 94 25 17 	jmp	0x2e4a	; 0x2e4a <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    21b6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    21ba:	8f 77       	andi	r24, 0x7F	; 127
    21bc:	03 c0       	rjmp	.+6      	; 0x21c4 <turnOffPWM+0x22>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    21be:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    21c2:	8f 7d       	andi	r24, 0xDF	; 223
    21c4:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    21c8:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    21ca:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    21ce:	87 7f       	andi	r24, 0xF7	; 247
    21d0:	f9 cf       	rjmp	.-14     	; 0x21c4 <turnOffPWM+0x22>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    21d2:	84 b5       	in	r24, 0x24	; 36
    21d4:	8f 77       	andi	r24, 0x7F	; 127
    21d6:	02 c0       	rjmp	.+4      	; 0x21dc <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    21d8:	84 b5       	in	r24, 0x24	; 36
    21da:	8f 7d       	andi	r24, 0xDF	; 223
    21dc:	84 bd       	out	0x24, r24	; 36
    21de:	08 95       	ret
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    21e0:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__DATA_REGION_ORIGIN__+0x30>
    21e4:	8f 77       	andi	r24, 0x7F	; 127
    21e6:	07 c0       	rjmp	.+14     	; 0x21f6 <turnOffPWM+0x54>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    21e8:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__DATA_REGION_ORIGIN__+0x30>
    21ec:	8f 7d       	andi	r24, 0xDF	; 223
    21ee:	03 c0       	rjmp	.+6      	; 0x21f6 <turnOffPWM+0x54>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    21f0:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__DATA_REGION_ORIGIN__+0x30>
    21f4:	87 7f       	andi	r24, 0xF7	; 247
    21f6:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__DATA_REGION_ORIGIN__+0x30>
    21fa:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    21fc:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    2200:	8f 77       	andi	r24, 0x7F	; 127
    2202:	03 c0       	rjmp	.+6      	; 0x220a <turnOffPWM+0x68>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    2204:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    2208:	8f 7d       	andi	r24, 0xDF	; 223
    220a:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    220e:	08 95       	ret
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
		#endif			
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
    2210:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
    2214:	87 7f       	andi	r24, 0xF7	; 247
    2216:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
    221a:	08 95       	ret

0000221c <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    221c:	cf 93       	push	r28
    221e:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	fc 01       	movw	r30, r24
    2224:	e9 5c       	subi	r30, 0xC9	; 201
    2226:	fe 4f       	sbci	r31, 0xFE	; 254
    2228:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    222a:	fc 01       	movw	r30, r24
    222c:	ea 5a       	subi	r30, 0xAA	; 170
    222e:	fe 4f       	sbci	r31, 0xFE	; 254
    2230:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    2232:	88 23       	and	r24, r24
    2234:	61 f1       	breq	.+88     	; 0x228e <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    2236:	90 e0       	ldi	r25, 0x00	; 0
    2238:	88 0f       	add	r24, r24
    223a:	99 1f       	adc	r25, r25
    223c:	fc 01       	movw	r30, r24
    223e:	ed 57       	subi	r30, 0x7D	; 125
    2240:	fe 4f       	sbci	r31, 0xFE	; 254
    2242:	c5 91       	lpm	r28, Z+
    2244:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    2246:	fc 01       	movw	r30, r24
    2248:	eb 58       	subi	r30, 0x8B	; 139
    224a:	fe 4f       	sbci	r31, 0xFE	; 254
    224c:	a5 91       	lpm	r26, Z+
    224e:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    2250:	61 11       	cpse	r22, r1
    2252:	09 c0       	rjmp	.+18     	; 0x2266 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    2254:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2256:	f8 94       	cli
		*reg &= ~bit;
    2258:	88 81       	ld	r24, Y
    225a:	20 95       	com	r18
    225c:	82 23       	and	r24, r18
    225e:	88 83       	st	Y, r24
		*out &= ~bit;
    2260:	ec 91       	ld	r30, X
    2262:	2e 23       	and	r18, r30
    2264:	0b c0       	rjmp	.+22     	; 0x227c <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    2266:	62 30       	cpi	r22, 0x02	; 2
    2268:	61 f4       	brne	.+24     	; 0x2282 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    226a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    226c:	f8 94       	cli
		*reg &= ~bit;
    226e:	88 81       	ld	r24, Y
    2270:	32 2f       	mov	r19, r18
    2272:	30 95       	com	r19
    2274:	83 23       	and	r24, r19
    2276:	88 83       	st	Y, r24
		*out |= bit;
    2278:	ec 91       	ld	r30, X
    227a:	2e 2b       	or	r18, r30
    227c:	2c 93       	st	X, r18
		SREG = oldSREG;
    227e:	9f bf       	out	0x3f, r25	; 63
    2280:	06 c0       	rjmp	.+12     	; 0x228e <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    2282:	8f b7       	in	r24, 0x3f	; 63
                cli();
    2284:	f8 94       	cli
		*reg |= bit;
    2286:	e8 81       	ld	r30, Y
    2288:	2e 2b       	or	r18, r30
    228a:	28 83       	st	Y, r18
		SREG = oldSREG;
    228c:	8f bf       	out	0x3f, r24	; 63
	}
}
    228e:	df 91       	pop	r29
    2290:	cf 91       	pop	r28
    2292:	08 95       	ret

00002294 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2294:	1f 93       	push	r17
    2296:	cf 93       	push	r28
    2298:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    229a:	28 2f       	mov	r18, r24
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	f9 01       	movw	r30, r18
    22a0:	e8 5e       	subi	r30, 0xE8	; 232
    22a2:	fe 4f       	sbci	r31, 0xFE	; 254
    22a4:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    22a6:	f9 01       	movw	r30, r18
    22a8:	e9 5c       	subi	r30, 0xC9	; 201
    22aa:	fe 4f       	sbci	r31, 0xFE	; 254
    22ac:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    22ae:	f9 01       	movw	r30, r18
    22b0:	ea 5a       	subi	r30, 0xAA	; 170
    22b2:	fe 4f       	sbci	r31, 0xFE	; 254
    22b4:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    22b6:	cc 23       	and	r28, r28
    22b8:	c1 f0       	breq	.+48     	; 0x22ea <digitalWrite+0x56>
    22ba:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    22bc:	81 11       	cpse	r24, r1
    22be:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <turnOffPWM>

	out = portOutputRegister(port);
    22c2:	ec 2f       	mov	r30, r28
    22c4:	f0 e0       	ldi	r31, 0x00	; 0
    22c6:	ee 0f       	add	r30, r30
    22c8:	ff 1f       	adc	r31, r31
    22ca:	eb 58       	subi	r30, 0x8B	; 139
    22cc:	fe 4f       	sbci	r31, 0xFE	; 254
    22ce:	a5 91       	lpm	r26, Z+
    22d0:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    22d2:	9f b7       	in	r25, 0x3f	; 63
	cli();
    22d4:	f8 94       	cli

	if (val == LOW) {
    22d6:	11 11       	cpse	r17, r1
    22d8:	04 c0       	rjmp	.+8      	; 0x22e2 <digitalWrite+0x4e>
		*out &= ~bit;
    22da:	8c 91       	ld	r24, X
    22dc:	d0 95       	com	r29
    22de:	d8 23       	and	r29, r24
    22e0:	02 c0       	rjmp	.+4      	; 0x22e6 <digitalWrite+0x52>
	} else {
		*out |= bit;
    22e2:	ec 91       	ld	r30, X
    22e4:	de 2b       	or	r29, r30
    22e6:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    22e8:	9f bf       	out	0x3f, r25	; 63
}
    22ea:	df 91       	pop	r29
    22ec:	cf 91       	pop	r28
    22ee:	1f 91       	pop	r17
    22f0:	08 95       	ret

000022f2 <_ZN3PID7ComputeEv>:
 *     This, as they say, is where the magic happens.  this function should be called
 *   every time "void loop()" executes.  the function will decide for itself whether a new
 *   pid Output needs to be computed
 **********************************************************************************/ 
void PID::Compute()
{
    22f2:	2f 92       	push	r2
    22f4:	3f 92       	push	r3
    22f6:	4f 92       	push	r4
    22f8:	5f 92       	push	r5
    22fa:	6f 92       	push	r6
    22fc:	7f 92       	push	r7
    22fe:	8f 92       	push	r8
    2300:	9f 92       	push	r9
    2302:	af 92       	push	r10
    2304:	bf 92       	push	r11
    2306:	cf 92       	push	r12
    2308:	df 92       	push	r13
    230a:	ef 92       	push	r14
    230c:	ff 92       	push	r15
    230e:	0f 93       	push	r16
    2310:	1f 93       	push	r17
    2312:	cf 93       	push	r28
    2314:	df 93       	push	r29
    2316:	cd b7       	in	r28, 0x3d	; 61
    2318:	de b7       	in	r29, 0x3e	; 62
    231a:	2a 97       	sbiw	r28, 0x0a	; 10
    231c:	0f b6       	in	r0, 0x3f	; 63
    231e:	f8 94       	cli
    2320:	de bf       	out	0x3e, r29	; 62
    2322:	0f be       	out	0x3f, r0	; 63
    2324:	cd bf       	out	0x3d, r28	; 61
   if(!inAuto) return;
    2326:	dc 01       	movw	r26, r24
    2328:	d6 96       	adiw	r26, 0x36	; 54
    232a:	2c 91       	ld	r18, X
    232c:	22 23       	and	r18, r18
    232e:	09 f4       	brne	.+2      	; 0x2332 <_ZN3PID7ComputeEv+0x40>
    2330:	e9 c0       	rjmp	.+466    	; 0x2504 <_ZN3PID7ComputeEv+0x212>
    2332:	9a 87       	std	Y+10, r25	; 0x0a
    2334:	89 87       	std	Y+9, r24	; 0x09
   unsigned long now = millis();
    2336:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <millis>
    233a:	69 83       	std	Y+1, r22	; 0x01
    233c:	7a 83       	std	Y+2, r23	; 0x02
    233e:	8b 83       	std	Y+3, r24	; 0x03
    2340:	9c 83       	std	Y+4, r25	; 0x04
   int timeChange = (now - lastTime);
   if(timeChange>=SampleTime)
    2342:	e9 85       	ldd	r30, Y+9	; 0x09
    2344:	fa 85       	ldd	r31, Y+10	; 0x0a
    2346:	80 a1       	ldd	r24, Z+32	; 0x20
    2348:	91 a1       	ldd	r25, Z+33	; 0x21
    234a:	29 81       	ldd	r18, Y+1	; 0x01
    234c:	3a 81       	ldd	r19, Y+2	; 0x02
    234e:	28 1b       	sub	r18, r24
    2350:	39 0b       	sbc	r19, r25
    2352:	84 a5       	ldd	r24, Z+44	; 0x2c
    2354:	95 a5       	ldd	r25, Z+45	; 0x2d
    2356:	28 17       	cp	r18, r24
    2358:	39 07       	cpc	r19, r25
    235a:	0c f4       	brge	.+2      	; 0x235e <_ZN3PID7ComputeEv+0x6c>
    235c:	d3 c0       	rjmp	.+422    	; 0x2504 <_ZN3PID7ComputeEv+0x212>
   {
      /*Compute all the working error variables*/
	  double input = *myInput;
    235e:	02 8c       	ldd	r0, Z+26	; 0x1a
    2360:	f3 8d       	ldd	r31, Z+27	; 0x1b
    2362:	e0 2d       	mov	r30, r0
    2364:	80 80       	ld	r8, Z
    2366:	91 80       	ldd	r9, Z+1	; 0x01
    2368:	a2 80       	ldd	r10, Z+2	; 0x02
    236a:	b3 80       	ldd	r11, Z+3	; 0x03
      double error = *mySetpoint - input;
    236c:	a9 85       	ldd	r26, Y+9	; 0x09
    236e:	ba 85       	ldd	r27, Y+10	; 0x0a
    2370:	5e 96       	adiw	r26, 0x1e	; 30
    2372:	ed 91       	ld	r30, X+
    2374:	fc 91       	ld	r31, X
    2376:	5f 97       	sbiw	r26, 0x1f	; 31
    2378:	a5 01       	movw	r20, r10
    237a:	94 01       	movw	r18, r8
    237c:	60 81       	ld	r22, Z
    237e:	71 81       	ldd	r23, Z+1	; 0x01
    2380:	82 81       	ldd	r24, Z+2	; 0x02
    2382:	93 81       	ldd	r25, Z+3	; 0x03
    2384:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <__subsf3>
    2388:	2b 01       	movw	r4, r22
    238a:	3c 01       	movw	r6, r24
      ITerm+= (ki * error);
    238c:	e9 85       	ldd	r30, Y+9	; 0x09
    238e:	fa 85       	ldd	r31, Y+10	; 0x0a
    2390:	20 89       	ldd	r18, Z+16	; 0x10
    2392:	31 89       	ldd	r19, Z+17	; 0x11
    2394:	42 89       	ldd	r20, Z+18	; 0x12
    2396:	53 89       	ldd	r21, Z+19	; 0x13
    2398:	0e 94 b4 08 	call	0x1168	; 0x1168 <__mulsf3>
    239c:	a9 85       	ldd	r26, Y+9	; 0x09
    239e:	ba 85       	ldd	r27, Y+10	; 0x0a
    23a0:	94 96       	adiw	r26, 0x24	; 36
    23a2:	2d 91       	ld	r18, X+
    23a4:	3d 91       	ld	r19, X+
    23a6:	4d 91       	ld	r20, X+
    23a8:	5c 91       	ld	r21, X
    23aa:	97 97       	sbiw	r26, 0x27	; 39
    23ac:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__addsf3>
    23b0:	6b 01       	movw	r12, r22
    23b2:	7c 01       	movw	r14, r24
    23b4:	e9 85       	ldd	r30, Y+9	; 0x09
    23b6:	fa 85       	ldd	r31, Y+10	; 0x0a
    23b8:	64 a3       	std	Z+36, r22	; 0x24
    23ba:	75 a3       	std	Z+37, r23	; 0x25
    23bc:	86 a3       	std	Z+38, r24	; 0x26
    23be:	97 a3       	std	Z+39, r25	; 0x27
      if(ITerm > outMax) ITerm= outMax;
    23c0:	12 a9       	ldd	r17, Z+50	; 0x32
    23c2:	03 a9       	ldd	r16, Z+51	; 0x33
    23c4:	34 a8       	ldd	r3, Z+52	; 0x34
    23c6:	25 a8       	ldd	r2, Z+53	; 0x35
    23c8:	21 2f       	mov	r18, r17
    23ca:	30 2f       	mov	r19, r16
    23cc:	43 2d       	mov	r20, r3
    23ce:	52 2d       	mov	r21, r2
    23d0:	0e 94 af 08 	call	0x115e	; 0x115e <__gesf2>
    23d4:	18 16       	cp	r1, r24
    23d6:	2c f4       	brge	.+10     	; 0x23e2 <_ZN3PID7ComputeEv+0xf0>
    23d8:	81 2f       	mov	r24, r17
    23da:	90 2f       	mov	r25, r16
    23dc:	a3 2d       	mov	r26, r3
    23de:	b2 2d       	mov	r27, r2
    23e0:	18 c0       	rjmp	.+48     	; 0x2412 <_ZN3PID7ComputeEv+0x120>
      else if(ITerm < outMin) ITerm= outMin;
    23e2:	a9 85       	ldd	r26, Y+9	; 0x09
    23e4:	ba 85       	ldd	r27, Y+10	; 0x0a
    23e6:	9e 96       	adiw	r26, 0x2e	; 46
    23e8:	8d 91       	ld	r24, X+
    23ea:	9d 91       	ld	r25, X+
    23ec:	0d 90       	ld	r0, X+
    23ee:	bc 91       	ld	r27, X
    23f0:	a0 2d       	mov	r26, r0
    23f2:	8d 83       	std	Y+5, r24	; 0x05
    23f4:	9e 83       	std	Y+6, r25	; 0x06
    23f6:	af 83       	std	Y+7, r26	; 0x07
    23f8:	b8 87       	std	Y+8, r27	; 0x08
    23fa:	9c 01       	movw	r18, r24
    23fc:	ad 01       	movw	r20, r26
    23fe:	c7 01       	movw	r24, r14
    2400:	b6 01       	movw	r22, r12
    2402:	0e 94 57 07 	call	0xeae	; 0xeae <__cmpsf2>
    2406:	87 ff       	sbrs	r24, 7
    2408:	0a c0       	rjmp	.+20     	; 0x241e <_ZN3PID7ComputeEv+0x12c>
    240a:	8d 81       	ldd	r24, Y+5	; 0x05
    240c:	9e 81       	ldd	r25, Y+6	; 0x06
    240e:	af 81       	ldd	r26, Y+7	; 0x07
    2410:	b8 85       	ldd	r27, Y+8	; 0x08
    2412:	e9 85       	ldd	r30, Y+9	; 0x09
    2414:	fa 85       	ldd	r31, Y+10	; 0x0a
    2416:	84 a3       	std	Z+36, r24	; 0x24
    2418:	95 a3       	std	Z+37, r25	; 0x25
    241a:	a6 a3       	std	Z+38, r26	; 0x26
    241c:	b7 a3       	std	Z+39, r27	; 0x27
      double dInput = (input - lastInput);
 
      /*Compute PID Output*/
      double output = kp * error + ITerm- kd * dInput;
    241e:	a9 85       	ldd	r26, Y+9	; 0x09
    2420:	ba 85       	ldd	r27, Y+10	; 0x0a
    2422:	1c 96       	adiw	r26, 0x0c	; 12
    2424:	2d 91       	ld	r18, X+
    2426:	3d 91       	ld	r19, X+
    2428:	4d 91       	ld	r20, X+
    242a:	5c 91       	ld	r21, X
    242c:	1f 97       	sbiw	r26, 0x0f	; 15
    242e:	c3 01       	movw	r24, r6
    2430:	b2 01       	movw	r22, r4
    2432:	0e 94 b4 08 	call	0x1168	; 0x1168 <__mulsf3>
    2436:	e9 85       	ldd	r30, Y+9	; 0x09
    2438:	fa 85       	ldd	r31, Y+10	; 0x0a
    243a:	24 a1       	ldd	r18, Z+36	; 0x24
    243c:	35 a1       	ldd	r19, Z+37	; 0x25
    243e:	46 a1       	ldd	r20, Z+38	; 0x26
    2440:	57 a1       	ldd	r21, Z+39	; 0x27
    2442:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__addsf3>
    2446:	6b 01       	movw	r12, r22
    2448:	7c 01       	movw	r14, r24
    244a:	a9 85       	ldd	r26, Y+9	; 0x09
    244c:	ba 85       	ldd	r27, Y+10	; 0x0a
    244e:	98 96       	adiw	r26, 0x28	; 40
    2450:	2d 91       	ld	r18, X+
    2452:	3d 91       	ld	r19, X+
    2454:	4d 91       	ld	r20, X+
    2456:	5c 91       	ld	r21, X
    2458:	9b 97       	sbiw	r26, 0x2b	; 43
    245a:	c5 01       	movw	r24, r10
    245c:	b4 01       	movw	r22, r8
    245e:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <__subsf3>
    2462:	e9 85       	ldd	r30, Y+9	; 0x09
    2464:	fa 85       	ldd	r31, Y+10	; 0x0a
    2466:	24 89       	ldd	r18, Z+20	; 0x14
    2468:	35 89       	ldd	r19, Z+21	; 0x15
    246a:	46 89       	ldd	r20, Z+22	; 0x16
    246c:	57 89       	ldd	r21, Z+23	; 0x17
    246e:	0e 94 b4 08 	call	0x1168	; 0x1168 <__mulsf3>
    2472:	9b 01       	movw	r18, r22
    2474:	ac 01       	movw	r20, r24
    2476:	c7 01       	movw	r24, r14
    2478:	b6 01       	movw	r22, r12
    247a:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <__subsf3>
    247e:	6b 01       	movw	r12, r22
    2480:	7c 01       	movw	r14, r24
      
	  if(output > outMax) output = outMax;
    2482:	9b 01       	movw	r18, r22
    2484:	ac 01       	movw	r20, r24
    2486:	61 2f       	mov	r22, r17
    2488:	70 2f       	mov	r23, r16
    248a:	83 2d       	mov	r24, r3
    248c:	92 2d       	mov	r25, r2
    248e:	0e 94 57 07 	call	0xeae	; 0xeae <__cmpsf2>
    2492:	87 fd       	sbrc	r24, 7
    2494:	1b c0       	rjmp	.+54     	; 0x24cc <_ZN3PID7ComputeEv+0x1da>
      else if(output < outMin) output = outMin;
    2496:	a9 85       	ldd	r26, Y+9	; 0x09
    2498:	ba 85       	ldd	r27, Y+10	; 0x0a
    249a:	9e 96       	adiw	r26, 0x2e	; 46
    249c:	1c 91       	ld	r17, X
    249e:	9e 97       	sbiw	r26, 0x2e	; 46
    24a0:	9f 96       	adiw	r26, 0x2f	; 47
    24a2:	0c 91       	ld	r16, X
    24a4:	9f 97       	sbiw	r26, 0x2f	; 47
    24a6:	d0 96       	adiw	r26, 0x30	; 48
    24a8:	3c 90       	ld	r3, X
    24aa:	d0 97       	sbiw	r26, 0x30	; 48
    24ac:	d1 96       	adiw	r26, 0x31	; 49
    24ae:	2c 90       	ld	r2, X
    24b0:	21 2f       	mov	r18, r17
    24b2:	30 2f       	mov	r19, r16
    24b4:	43 2d       	mov	r20, r3
    24b6:	52 2d       	mov	r21, r2
    24b8:	b6 01       	movw	r22, r12
    24ba:	c7 01       	movw	r24, r14
    24bc:	0e 94 57 07 	call	0xeae	; 0xeae <__cmpsf2>
    24c0:	87 fd       	sbrc	r24, 7
    24c2:	04 c0       	rjmp	.+8      	; 0x24cc <_ZN3PID7ComputeEv+0x1da>
      if(ITerm > outMax) ITerm= outMax;
      else if(ITerm < outMin) ITerm= outMin;
      double dInput = (input - lastInput);
 
      /*Compute PID Output*/
      double output = kp * error + ITerm- kd * dInput;
    24c4:	1c 2d       	mov	r17, r12
    24c6:	0d 2d       	mov	r16, r13
    24c8:	3e 2c       	mov	r3, r14
    24ca:	2f 2c       	mov	r2, r15
      
	  if(output > outMax) output = outMax;
      else if(output < outMin) output = outMin;
	  *myOutput = output;
    24cc:	a9 85       	ldd	r26, Y+9	; 0x09
    24ce:	ba 85       	ldd	r27, Y+10	; 0x0a
    24d0:	5c 96       	adiw	r26, 0x1c	; 28
    24d2:	ed 91       	ld	r30, X+
    24d4:	fc 91       	ld	r31, X
    24d6:	5d 97       	sbiw	r26, 0x1d	; 29
    24d8:	81 2f       	mov	r24, r17
    24da:	90 2f       	mov	r25, r16
    24dc:	a3 2d       	mov	r26, r3
    24de:	b2 2d       	mov	r27, r2
    24e0:	80 83       	st	Z, r24
    24e2:	91 83       	std	Z+1, r25	; 0x01
    24e4:	a2 83       	std	Z+2, r26	; 0x02
    24e6:	b3 83       	std	Z+3, r27	; 0x03
	  
      /*Remember some variables for next time*/
      lastInput = input;
    24e8:	e9 85       	ldd	r30, Y+9	; 0x09
    24ea:	fa 85       	ldd	r31, Y+10	; 0x0a
    24ec:	80 a6       	std	Z+40, r8	; 0x28
    24ee:	91 a6       	std	Z+41, r9	; 0x29
    24f0:	a2 a6       	std	Z+42, r10	; 0x2a
    24f2:	b3 a6       	std	Z+43, r11	; 0x2b
      lastTime = now;
    24f4:	89 81       	ldd	r24, Y+1	; 0x01
    24f6:	9a 81       	ldd	r25, Y+2	; 0x02
    24f8:	ab 81       	ldd	r26, Y+3	; 0x03
    24fa:	bc 81       	ldd	r27, Y+4	; 0x04
    24fc:	80 a3       	std	Z+32, r24	; 0x20
    24fe:	91 a3       	std	Z+33, r25	; 0x21
    2500:	a2 a3       	std	Z+34, r26	; 0x22
    2502:	b3 a3       	std	Z+35, r27	; 0x23
   }
}
    2504:	2a 96       	adiw	r28, 0x0a	; 10
    2506:	0f b6       	in	r0, 0x3f	; 63
    2508:	f8 94       	cli
    250a:	de bf       	out	0x3e, r29	; 62
    250c:	0f be       	out	0x3f, r0	; 63
    250e:	cd bf       	out	0x3d, r28	; 61
    2510:	df 91       	pop	r29
    2512:	cf 91       	pop	r28
    2514:	1f 91       	pop	r17
    2516:	0f 91       	pop	r16
    2518:	ff 90       	pop	r15
    251a:	ef 90       	pop	r14
    251c:	df 90       	pop	r13
    251e:	cf 90       	pop	r12
    2520:	bf 90       	pop	r11
    2522:	af 90       	pop	r10
    2524:	9f 90       	pop	r9
    2526:	8f 90       	pop	r8
    2528:	7f 90       	pop	r7
    252a:	6f 90       	pop	r6
    252c:	5f 90       	pop	r5
    252e:	4f 90       	pop	r4
    2530:	3f 90       	pop	r3
    2532:	2f 90       	pop	r2
    2534:	08 95       	ret

00002536 <_ZN3PID10SetTuningsEddd>:
 * This function allows the controller's dynamic performance to be adjusted. 
 * it's called automatically from the constructor, but tunings can also
 * be adjusted on the fly during normal operation
 ******************************************************************************/ 
void PID::SetTunings(double Kp, double Ki, double Kd)
{
    2536:	4f 92       	push	r4
    2538:	5f 92       	push	r5
    253a:	6f 92       	push	r6
    253c:	7f 92       	push	r7
    253e:	8f 92       	push	r8
    2540:	9f 92       	push	r9
    2542:	af 92       	push	r10
    2544:	bf 92       	push	r11
    2546:	cf 92       	push	r12
    2548:	df 92       	push	r13
    254a:	ef 92       	push	r14
    254c:	ff 92       	push	r15
    254e:	0f 93       	push	r16
    2550:	1f 93       	push	r17
    2552:	cf 93       	push	r28
    2554:	df 93       	push	r29
    2556:	00 d0       	rcall	.+0      	; 0x2558 <_ZN3PID10SetTuningsEddd+0x22>
    2558:	00 d0       	rcall	.+0      	; 0x255a <_ZN3PID10SetTuningsEddd+0x24>
    255a:	00 d0       	rcall	.+0      	; 0x255c <_ZN3PID10SetTuningsEddd+0x26>
    255c:	cd b7       	in	r28, 0x3d	; 61
    255e:	de b7       	in	r29, 0x3e	; 62
    2560:	9e 83       	std	Y+6, r25	; 0x06
    2562:	8d 83       	std	Y+5, r24	; 0x05
    2564:	2a 01       	movw	r4, r20
    2566:	3b 01       	movw	r6, r22
    2568:	48 01       	movw	r8, r16
    256a:	59 01       	movw	r10, r18
   if (Kp<0 || Ki<0 || Kd<0) return;
    256c:	20 e0       	ldi	r18, 0x00	; 0
    256e:	30 e0       	ldi	r19, 0x00	; 0
    2570:	a9 01       	movw	r20, r18
    2572:	c3 01       	movw	r24, r6
    2574:	b2 01       	movw	r22, r4
    2576:	0e 94 57 07 	call	0xeae	; 0xeae <__cmpsf2>
    257a:	87 fd       	sbrc	r24, 7
    257c:	81 c0       	rjmp	.+258    	; 0x2680 <_ZN3PID10SetTuningsEddd+0x14a>
    257e:	20 e0       	ldi	r18, 0x00	; 0
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	a9 01       	movw	r20, r18
    2584:	c5 01       	movw	r24, r10
    2586:	b4 01       	movw	r22, r8
    2588:	0e 94 57 07 	call	0xeae	; 0xeae <__cmpsf2>
    258c:	87 fd       	sbrc	r24, 7
    258e:	78 c0       	rjmp	.+240    	; 0x2680 <_ZN3PID10SetTuningsEddd+0x14a>
    2590:	20 e0       	ldi	r18, 0x00	; 0
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	a9 01       	movw	r20, r18
    2596:	c7 01       	movw	r24, r14
    2598:	b6 01       	movw	r22, r12
    259a:	0e 94 57 07 	call	0xeae	; 0xeae <__cmpsf2>
    259e:	87 fd       	sbrc	r24, 7
    25a0:	6f c0       	rjmp	.+222    	; 0x2680 <_ZN3PID10SetTuningsEddd+0x14a>
 
   dispKp = Kp; dispKi = Ki; dispKd = Kd;
    25a2:	ed 81       	ldd	r30, Y+5	; 0x05
    25a4:	fe 81       	ldd	r31, Y+6	; 0x06
    25a6:	40 82       	st	Z, r4
    25a8:	51 82       	std	Z+1, r5	; 0x01
    25aa:	62 82       	std	Z+2, r6	; 0x02
    25ac:	73 82       	std	Z+3, r7	; 0x03
    25ae:	84 82       	std	Z+4, r8	; 0x04
    25b0:	95 82       	std	Z+5, r9	; 0x05
    25b2:	a6 82       	std	Z+6, r10	; 0x06
    25b4:	b7 82       	std	Z+7, r11	; 0x07
    25b6:	c0 86       	std	Z+8, r12	; 0x08
    25b8:	d1 86       	std	Z+9, r13	; 0x09
    25ba:	e2 86       	std	Z+10, r14	; 0x0a
    25bc:	f3 86       	std	Z+11, r15	; 0x0b
   
   double SampleTimeInSec = ((double)SampleTime)/1000;  
    25be:	64 a5       	ldd	r22, Z+44	; 0x2c
    25c0:	75 a5       	ldd	r23, Z+45	; 0x2d
    25c2:	07 2e       	mov	r0, r23
    25c4:	00 0c       	add	r0, r0
    25c6:	88 0b       	sbc	r24, r24
    25c8:	99 0b       	sbc	r25, r25
    25ca:	0e 94 ff 07 	call	0xffe	; 0xffe <__floatsisf>
    25ce:	20 e0       	ldi	r18, 0x00	; 0
    25d0:	30 e0       	ldi	r19, 0x00	; 0
    25d2:	4a e7       	ldi	r20, 0x7A	; 122
    25d4:	54 e4       	ldi	r21, 0x44	; 68
    25d6:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <__divsf3>
    25da:	69 83       	std	Y+1, r22	; 0x01
    25dc:	7a 83       	std	Y+2, r23	; 0x02
    25de:	8b 83       	std	Y+3, r24	; 0x03
    25e0:	9c 83       	std	Y+4, r25	; 0x04
   kp = Kp;
    25e2:	ed 81       	ldd	r30, Y+5	; 0x05
    25e4:	fe 81       	ldd	r31, Y+6	; 0x06
    25e6:	44 86       	std	Z+12, r4	; 0x0c
    25e8:	55 86       	std	Z+13, r5	; 0x0d
    25ea:	66 86       	std	Z+14, r6	; 0x0e
    25ec:	77 86       	std	Z+15, r7	; 0x0f
   ki = Ki * SampleTimeInSec;
    25ee:	9b 01       	movw	r18, r22
    25f0:	ac 01       	movw	r20, r24
    25f2:	c5 01       	movw	r24, r10
    25f4:	b4 01       	movw	r22, r8
    25f6:	0e 94 b4 08 	call	0x1168	; 0x1168 <__mulsf3>
    25fa:	4b 01       	movw	r8, r22
    25fc:	5c 01       	movw	r10, r24
    25fe:	ed 81       	ldd	r30, Y+5	; 0x05
    2600:	fe 81       	ldd	r31, Y+6	; 0x06
    2602:	60 8b       	std	Z+16, r22	; 0x10
    2604:	71 8b       	std	Z+17, r23	; 0x11
    2606:	82 8b       	std	Z+18, r24	; 0x12
    2608:	93 8b       	std	Z+19, r25	; 0x13
   kd = Kd / SampleTimeInSec;
    260a:	29 81       	ldd	r18, Y+1	; 0x01
    260c:	3a 81       	ldd	r19, Y+2	; 0x02
    260e:	4b 81       	ldd	r20, Y+3	; 0x03
    2610:	5c 81       	ldd	r21, Y+4	; 0x04
    2612:	c7 01       	movw	r24, r14
    2614:	b6 01       	movw	r22, r12
    2616:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <__divsf3>
    261a:	6b 01       	movw	r12, r22
    261c:	7c 01       	movw	r14, r24
    261e:	ed 81       	ldd	r30, Y+5	; 0x05
    2620:	fe 81       	ldd	r31, Y+6	; 0x06
    2622:	64 8b       	std	Z+20, r22	; 0x14
    2624:	75 8b       	std	Z+21, r23	; 0x15
    2626:	86 8b       	std	Z+22, r24	; 0x16
    2628:	97 8b       	std	Z+23, r25	; 0x17
 
  if(controllerDirection ==REVERSE)
    262a:	80 8d       	ldd	r24, Z+24	; 0x18
    262c:	91 8d       	ldd	r25, Z+25	; 0x19
    262e:	01 97       	sbiw	r24, 0x01	; 1
    2630:	39 f5       	brne	.+78     	; 0x2680 <_ZN3PID10SetTuningsEddd+0x14a>
   {
      kp = (0 - kp);
    2632:	a3 01       	movw	r20, r6
    2634:	92 01       	movw	r18, r4
    2636:	60 e0       	ldi	r22, 0x00	; 0
    2638:	70 e0       	ldi	r23, 0x00	; 0
    263a:	cb 01       	movw	r24, r22
    263c:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <__subsf3>
    2640:	ed 81       	ldd	r30, Y+5	; 0x05
    2642:	fe 81       	ldd	r31, Y+6	; 0x06
    2644:	64 87       	std	Z+12, r22	; 0x0c
    2646:	75 87       	std	Z+13, r23	; 0x0d
    2648:	86 87       	std	Z+14, r24	; 0x0e
    264a:	97 87       	std	Z+15, r25	; 0x0f
      ki = (0 - ki);
    264c:	a5 01       	movw	r20, r10
    264e:	94 01       	movw	r18, r8
    2650:	60 e0       	ldi	r22, 0x00	; 0
    2652:	70 e0       	ldi	r23, 0x00	; 0
    2654:	cb 01       	movw	r24, r22
    2656:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <__subsf3>
    265a:	ed 81       	ldd	r30, Y+5	; 0x05
    265c:	fe 81       	ldd	r31, Y+6	; 0x06
    265e:	60 8b       	std	Z+16, r22	; 0x10
    2660:	71 8b       	std	Z+17, r23	; 0x11
    2662:	82 8b       	std	Z+18, r24	; 0x12
    2664:	93 8b       	std	Z+19, r25	; 0x13
      kd = (0 - kd);
    2666:	a7 01       	movw	r20, r14
    2668:	96 01       	movw	r18, r12
    266a:	60 e0       	ldi	r22, 0x00	; 0
    266c:	70 e0       	ldi	r23, 0x00	; 0
    266e:	cb 01       	movw	r24, r22
    2670:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <__subsf3>
    2674:	ed 81       	ldd	r30, Y+5	; 0x05
    2676:	fe 81       	ldd	r31, Y+6	; 0x06
    2678:	64 8b       	std	Z+20, r22	; 0x14
    267a:	75 8b       	std	Z+21, r23	; 0x15
    267c:	86 8b       	std	Z+22, r24	; 0x16
    267e:	97 8b       	std	Z+23, r25	; 0x17
   }
}
    2680:	26 96       	adiw	r28, 0x06	; 6
    2682:	0f b6       	in	r0, 0x3f	; 63
    2684:	f8 94       	cli
    2686:	de bf       	out	0x3e, r29	; 62
    2688:	0f be       	out	0x3f, r0	; 63
    268a:	cd bf       	out	0x3d, r28	; 61
    268c:	df 91       	pop	r29
    268e:	cf 91       	pop	r28
    2690:	1f 91       	pop	r17
    2692:	0f 91       	pop	r16
    2694:	ff 90       	pop	r15
    2696:	ef 90       	pop	r14
    2698:	df 90       	pop	r13
    269a:	cf 90       	pop	r12
    269c:	bf 90       	pop	r11
    269e:	af 90       	pop	r10
    26a0:	9f 90       	pop	r9
    26a2:	8f 90       	pop	r8
    26a4:	7f 90       	pop	r7
    26a6:	6f 90       	pop	r6
    26a8:	5f 90       	pop	r5
    26aa:	4f 90       	pop	r4
    26ac:	08 95       	ret

000026ae <_ZN3PID13SetSampleTimeEi>:
  
/* SetSampleTime(...) *********************************************************
 * sets the period, in Milliseconds, at which the calculation is performed	
 ******************************************************************************/
void PID::SetSampleTime(int NewSampleTime)
{
    26ae:	cf 92       	push	r12
    26b0:	df 92       	push	r13
    26b2:	ef 92       	push	r14
    26b4:	ff 92       	push	r15
    26b6:	0f 93       	push	r16
    26b8:	1f 93       	push	r17
    26ba:	cf 93       	push	r28
    26bc:	df 93       	push	r29
   if (NewSampleTime > 0)
    26be:	16 16       	cp	r1, r22
    26c0:	17 06       	cpc	r1, r23
    26c2:	a4 f5       	brge	.+104    	; 0x272c <_ZN3PID13SetSampleTimeEi+0x7e>
    26c4:	8b 01       	movw	r16, r22
    26c6:	ec 01       	movw	r28, r24
   {
      double ratio  = (double)NewSampleTime
                      / (double)SampleTime;
    26c8:	07 2e       	mov	r0, r23
    26ca:	00 0c       	add	r0, r0
    26cc:	88 0b       	sbc	r24, r24
    26ce:	99 0b       	sbc	r25, r25
    26d0:	0e 94 ff 07 	call	0xffe	; 0xffe <__floatsisf>
    26d4:	6b 01       	movw	r12, r22
    26d6:	7c 01       	movw	r14, r24
    26d8:	6c a5       	ldd	r22, Y+44	; 0x2c
    26da:	7d a5       	ldd	r23, Y+45	; 0x2d
    26dc:	07 2e       	mov	r0, r23
    26de:	00 0c       	add	r0, r0
    26e0:	88 0b       	sbc	r24, r24
    26e2:	99 0b       	sbc	r25, r25
    26e4:	0e 94 ff 07 	call	0xffe	; 0xffe <__floatsisf>
    26e8:	9b 01       	movw	r18, r22
    26ea:	ac 01       	movw	r20, r24
    26ec:	c7 01       	movw	r24, r14
    26ee:	b6 01       	movw	r22, r12
    26f0:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <__divsf3>
    26f4:	6b 01       	movw	r12, r22
    26f6:	7c 01       	movw	r14, r24
      ki *= ratio;
    26f8:	9b 01       	movw	r18, r22
    26fa:	ac 01       	movw	r20, r24
    26fc:	68 89       	ldd	r22, Y+16	; 0x10
    26fe:	79 89       	ldd	r23, Y+17	; 0x11
    2700:	8a 89       	ldd	r24, Y+18	; 0x12
    2702:	9b 89       	ldd	r25, Y+19	; 0x13
    2704:	0e 94 b4 08 	call	0x1168	; 0x1168 <__mulsf3>
    2708:	68 8b       	std	Y+16, r22	; 0x10
    270a:	79 8b       	std	Y+17, r23	; 0x11
    270c:	8a 8b       	std	Y+18, r24	; 0x12
    270e:	9b 8b       	std	Y+19, r25	; 0x13
      kd /= ratio;
    2710:	a7 01       	movw	r20, r14
    2712:	96 01       	movw	r18, r12
    2714:	6c 89       	ldd	r22, Y+20	; 0x14
    2716:	7d 89       	ldd	r23, Y+21	; 0x15
    2718:	8e 89       	ldd	r24, Y+22	; 0x16
    271a:	9f 89       	ldd	r25, Y+23	; 0x17
    271c:	0e 94 5c 07 	call	0xeb8	; 0xeb8 <__divsf3>
    2720:	6c 8b       	std	Y+20, r22	; 0x14
    2722:	7d 8b       	std	Y+21, r23	; 0x15
    2724:	8e 8b       	std	Y+22, r24	; 0x16
    2726:	9f 8b       	std	Y+23, r25	; 0x17
      SampleTime = (unsigned long)NewSampleTime;
    2728:	1d a7       	std	Y+45, r17	; 0x2d
    272a:	0c a7       	std	Y+44, r16	; 0x2c
   }
}
    272c:	df 91       	pop	r29
    272e:	cf 91       	pop	r28
    2730:	1f 91       	pop	r17
    2732:	0f 91       	pop	r16
    2734:	ff 90       	pop	r15
    2736:	ef 90       	pop	r14
    2738:	df 90       	pop	r13
    273a:	cf 90       	pop	r12
    273c:	08 95       	ret

0000273e <_ZN3PID15SetOutputLimitsEdd>:
 *  be doing a time window and will need 0-8000 or something.  or maybe they'll
 *  want to clamp it from 0-125.  who knows.  at any rate, that can all be done
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
    273e:	2f 92       	push	r2
    2740:	3f 92       	push	r3
    2742:	4f 92       	push	r4
    2744:	5f 92       	push	r5
    2746:	6f 92       	push	r6
    2748:	7f 92       	push	r7
    274a:	8f 92       	push	r8
    274c:	9f 92       	push	r9
    274e:	af 92       	push	r10
    2750:	bf 92       	push	r11
    2752:	cf 92       	push	r12
    2754:	df 92       	push	r13
    2756:	ef 92       	push	r14
    2758:	ff 92       	push	r15
    275a:	0f 93       	push	r16
    275c:	1f 93       	push	r17
    275e:	cf 93       	push	r28
    2760:	df 93       	push	r29
    2762:	ec 01       	movw	r28, r24
    2764:	6a 01       	movw	r12, r20
    2766:	7b 01       	movw	r14, r22
    2768:	48 01       	movw	r8, r16
    276a:	59 01       	movw	r10, r18
   if(Min >= Max) return;
    276c:	a9 01       	movw	r20, r18
    276e:	98 01       	movw	r18, r16
    2770:	c7 01       	movw	r24, r14
    2772:	b6 01       	movw	r22, r12
    2774:	0e 94 af 08 	call	0x115e	; 0x115e <__gesf2>
    2778:	87 ff       	sbrs	r24, 7
    277a:	4e c0       	rjmp	.+156    	; 0x2818 <_ZN3PID15SetOutputLimitsEdd+0xda>
   outMin = Min;
    277c:	ce a6       	std	Y+46, r12	; 0x2e
    277e:	df a6       	std	Y+47, r13	; 0x2f
    2780:	e8 aa       	std	Y+48, r14	; 0x30
    2782:	f9 aa       	std	Y+49, r15	; 0x31
   outMax = Max;
    2784:	8a aa       	std	Y+50, r8	; 0x32
    2786:	9b aa       	std	Y+51, r9	; 0x33
    2788:	ac aa       	std	Y+52, r10	; 0x34
    278a:	bd aa       	std	Y+53, r11	; 0x35
 
   if(inAuto)
    278c:	8e a9       	ldd	r24, Y+54	; 0x36
    278e:	88 23       	and	r24, r24
    2790:	09 f4       	brne	.+2      	; 0x2794 <_ZN3PID15SetOutputLimitsEdd+0x56>
    2792:	42 c0       	rjmp	.+132    	; 0x2818 <_ZN3PID15SetOutputLimitsEdd+0xda>
   {
	   if(*myOutput > outMax) *myOutput = outMax;
    2794:	2c 8c       	ldd	r2, Y+28	; 0x1c
    2796:	3d 8c       	ldd	r3, Y+29	; 0x1d
    2798:	f1 01       	movw	r30, r2
    279a:	40 80       	ld	r4, Z
    279c:	51 80       	ldd	r5, Z+1	; 0x01
    279e:	62 80       	ldd	r6, Z+2	; 0x02
    27a0:	73 80       	ldd	r7, Z+3	; 0x03
    27a2:	a3 01       	movw	r20, r6
    27a4:	92 01       	movw	r18, r4
    27a6:	c5 01       	movw	r24, r10
    27a8:	b4 01       	movw	r22, r8
    27aa:	0e 94 57 07 	call	0xeae	; 0xeae <__cmpsf2>
    27ae:	87 ff       	sbrs	r24, 7
    27b0:	06 c0       	rjmp	.+12     	; 0x27be <_ZN3PID15SetOutputLimitsEdd+0x80>
    27b2:	f1 01       	movw	r30, r2
    27b4:	80 82       	st	Z, r8
    27b6:	91 82       	std	Z+1, r9	; 0x01
    27b8:	a2 82       	std	Z+2, r10	; 0x02
    27ba:	b3 82       	std	Z+3, r11	; 0x03
    27bc:	0d c0       	rjmp	.+26     	; 0x27d8 <_ZN3PID15SetOutputLimitsEdd+0x9a>
	   else if(*myOutput < outMin) *myOutput = outMin;
    27be:	a3 01       	movw	r20, r6
    27c0:	92 01       	movw	r18, r4
    27c2:	c7 01       	movw	r24, r14
    27c4:	b6 01       	movw	r22, r12
    27c6:	0e 94 af 08 	call	0x115e	; 0x115e <__gesf2>
    27ca:	18 16       	cp	r1, r24
    27cc:	2c f4       	brge	.+10     	; 0x27d8 <_ZN3PID15SetOutputLimitsEdd+0x9a>
    27ce:	f1 01       	movw	r30, r2
    27d0:	c0 82       	st	Z, r12
    27d2:	d1 82       	std	Z+1, r13	; 0x01
    27d4:	e2 82       	std	Z+2, r14	; 0x02
    27d6:	f3 82       	std	Z+3, r15	; 0x03
	 
	   if(ITerm > outMax) ITerm= outMax;
    27d8:	8c a0       	ldd	r8, Y+36	; 0x24
    27da:	9d a0       	ldd	r9, Y+37	; 0x25
    27dc:	ae a0       	ldd	r10, Y+38	; 0x26
    27de:	bf a0       	ldd	r11, Y+39	; 0x27
    27e0:	ca a8       	ldd	r12, Y+50	; 0x32
    27e2:	db a8       	ldd	r13, Y+51	; 0x33
    27e4:	ec a8       	ldd	r14, Y+52	; 0x34
    27e6:	fd a8       	ldd	r15, Y+53	; 0x35
    27e8:	a7 01       	movw	r20, r14
    27ea:	96 01       	movw	r18, r12
    27ec:	c5 01       	movw	r24, r10
    27ee:	b4 01       	movw	r22, r8
    27f0:	0e 94 af 08 	call	0x115e	; 0x115e <__gesf2>
    27f4:	18 16       	cp	r1, r24
    27f6:	64 f0       	brlt	.+24     	; 0x2810 <_ZN3PID15SetOutputLimitsEdd+0xd2>
	   else if(ITerm < outMin) ITerm= outMin;
    27f8:	ce a4       	ldd	r12, Y+46	; 0x2e
    27fa:	df a4       	ldd	r13, Y+47	; 0x2f
    27fc:	e8 a8       	ldd	r14, Y+48	; 0x30
    27fe:	f9 a8       	ldd	r15, Y+49	; 0x31
    2800:	a7 01       	movw	r20, r14
    2802:	96 01       	movw	r18, r12
    2804:	c5 01       	movw	r24, r10
    2806:	b4 01       	movw	r22, r8
    2808:	0e 94 57 07 	call	0xeae	; 0xeae <__cmpsf2>
    280c:	87 ff       	sbrs	r24, 7
    280e:	04 c0       	rjmp	.+8      	; 0x2818 <_ZN3PID15SetOutputLimitsEdd+0xda>
    2810:	cc a2       	std	Y+36, r12	; 0x24
    2812:	dd a2       	std	Y+37, r13	; 0x25
    2814:	ee a2       	std	Y+38, r14	; 0x26
    2816:	ff a2       	std	Y+39, r15	; 0x27
   }
}
    2818:	df 91       	pop	r29
    281a:	cf 91       	pop	r28
    281c:	1f 91       	pop	r17
    281e:	0f 91       	pop	r16
    2820:	ff 90       	pop	r15
    2822:	ef 90       	pop	r14
    2824:	df 90       	pop	r13
    2826:	cf 90       	pop	r12
    2828:	bf 90       	pop	r11
    282a:	af 90       	pop	r10
    282c:	9f 90       	pop	r9
    282e:	8f 90       	pop	r8
    2830:	7f 90       	pop	r7
    2832:	6f 90       	pop	r6
    2834:	5f 90       	pop	r5
    2836:	4f 90       	pop	r4
    2838:	3f 90       	pop	r3
    283a:	2f 90       	pop	r2
    283c:	08 95       	ret

0000283e <_ZN3PID10InitializeEv>:
/* Initialize()****************************************************************
 *	does all the things that need to happen to ensure a bumpless transfer
 *  from manual to automatic mode.
 ******************************************************************************/ 
void PID::Initialize()
{
    283e:	8f 92       	push	r8
    2840:	9f 92       	push	r9
    2842:	af 92       	push	r10
    2844:	bf 92       	push	r11
    2846:	cf 92       	push	r12
    2848:	df 92       	push	r13
    284a:	ef 92       	push	r14
    284c:	ff 92       	push	r15
    284e:	cf 93       	push	r28
    2850:	df 93       	push	r29
    2852:	ec 01       	movw	r28, r24
   ITerm = *myOutput;
    2854:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2856:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2858:	c0 80       	ld	r12, Z
    285a:	d1 80       	ldd	r13, Z+1	; 0x01
    285c:	e2 80       	ldd	r14, Z+2	; 0x02
    285e:	f3 80       	ldd	r15, Z+3	; 0x03
    2860:	cc a2       	std	Y+36, r12	; 0x24
    2862:	dd a2       	std	Y+37, r13	; 0x25
    2864:	ee a2       	std	Y+38, r14	; 0x26
    2866:	ff a2       	std	Y+39, r15	; 0x27
   lastInput = *myInput;
    2868:	ea 8d       	ldd	r30, Y+26	; 0x1a
    286a:	fb 8d       	ldd	r31, Y+27	; 0x1b
    286c:	80 81       	ld	r24, Z
    286e:	91 81       	ldd	r25, Z+1	; 0x01
    2870:	a2 81       	ldd	r26, Z+2	; 0x02
    2872:	b3 81       	ldd	r27, Z+3	; 0x03
    2874:	88 a7       	std	Y+40, r24	; 0x28
    2876:	99 a7       	std	Y+41, r25	; 0x29
    2878:	aa a7       	std	Y+42, r26	; 0x2a
    287a:	bb a7       	std	Y+43, r27	; 0x2b
   if(ITerm > outMax) ITerm = outMax;
    287c:	8a a8       	ldd	r8, Y+50	; 0x32
    287e:	9b a8       	ldd	r9, Y+51	; 0x33
    2880:	ac a8       	ldd	r10, Y+52	; 0x34
    2882:	bd a8       	ldd	r11, Y+53	; 0x35
    2884:	a5 01       	movw	r20, r10
    2886:	94 01       	movw	r18, r8
    2888:	c7 01       	movw	r24, r14
    288a:	b6 01       	movw	r22, r12
    288c:	0e 94 af 08 	call	0x115e	; 0x115e <__gesf2>
    2890:	18 16       	cp	r1, r24
    2892:	64 f0       	brlt	.+24     	; 0x28ac <_ZN3PID10InitializeEv+0x6e>
   else if(ITerm < outMin) ITerm = outMin;
    2894:	8e a4       	ldd	r8, Y+46	; 0x2e
    2896:	9f a4       	ldd	r9, Y+47	; 0x2f
    2898:	a8 a8       	ldd	r10, Y+48	; 0x30
    289a:	b9 a8       	ldd	r11, Y+49	; 0x31
    289c:	a5 01       	movw	r20, r10
    289e:	94 01       	movw	r18, r8
    28a0:	c7 01       	movw	r24, r14
    28a2:	b6 01       	movw	r22, r12
    28a4:	0e 94 57 07 	call	0xeae	; 0xeae <__cmpsf2>
    28a8:	87 ff       	sbrs	r24, 7
    28aa:	04 c0       	rjmp	.+8      	; 0x28b4 <_ZN3PID10InitializeEv+0x76>
    28ac:	8c a2       	std	Y+36, r8	; 0x24
    28ae:	9d a2       	std	Y+37, r9	; 0x25
    28b0:	ae a2       	std	Y+38, r10	; 0x26
    28b2:	bf a2       	std	Y+39, r11	; 0x27
}
    28b4:	df 91       	pop	r29
    28b6:	cf 91       	pop	r28
    28b8:	ff 90       	pop	r15
    28ba:	ef 90       	pop	r14
    28bc:	df 90       	pop	r13
    28be:	cf 90       	pop	r12
    28c0:	bf 90       	pop	r11
    28c2:	af 90       	pop	r10
    28c4:	9f 90       	pop	r9
    28c6:	8f 90       	pop	r8
    28c8:	08 95       	ret

000028ca <_ZN3PID7SetModeEi>:
 * Allows the controller Mode to be set to manual (0) or Automatic (non-zero)
 * when the transition from manual to auto occurs, the controller is
 * automatically initialized
 ******************************************************************************/ 
void PID::SetMode(int Mode)
{
    28ca:	1f 93       	push	r17
    28cc:	cf 93       	push	r28
    28ce:	df 93       	push	r29
    28d0:	ec 01       	movw	r28, r24
    bool newAuto = (Mode == AUTOMATIC);
    28d2:	11 e0       	ldi	r17, 0x01	; 1
    28d4:	61 30       	cpi	r22, 0x01	; 1
    28d6:	71 05       	cpc	r23, r1
    28d8:	09 f0       	breq	.+2      	; 0x28dc <_ZN3PID7SetModeEi+0x12>
    28da:	10 e0       	ldi	r17, 0x00	; 0
    if(newAuto == !inAuto)
    28dc:	9e a9       	ldd	r25, Y+54	; 0x36
    28de:	81 e0       	ldi	r24, 0x01	; 1
    28e0:	89 27       	eor	r24, r25
    28e2:	18 13       	cpse	r17, r24
    28e4:	03 c0       	rjmp	.+6      	; 0x28ec <_ZN3PID7SetModeEi+0x22>
    {  /*we just went from manual to auto*/
        PID::Initialize();
    28e6:	ce 01       	movw	r24, r28
    28e8:	0e 94 1f 14 	call	0x283e	; 0x283e <_ZN3PID10InitializeEv>
    }
    inAuto = newAuto;
    28ec:	1e ab       	std	Y+54, r17	; 0x36
}
    28ee:	df 91       	pop	r29
    28f0:	cf 91       	pop	r28
    28f2:	1f 91       	pop	r17
    28f4:	08 95       	ret

000028f6 <_ZN3PID22SetControllerDirectionEi>:
 * to +Input) or a REVERSE acting process(+Output leads to -Input.)  we need to
 * know which one, because otherwise we may increase the output when we should
 * be decreasing.  This is called from the constructor.
 ******************************************************************************/
void PID::SetControllerDirection(int Direction)
{
    28f6:	0f 93       	push	r16
    28f8:	1f 93       	push	r17
    28fa:	cf 93       	push	r28
    28fc:	df 93       	push	r29
    28fe:	ec 01       	movw	r28, r24
    2900:	8b 01       	movw	r16, r22
   if(inAuto && Direction !=controllerDirection)
    2902:	8e a9       	ldd	r24, Y+54	; 0x36
    2904:	88 23       	and	r24, r24
    2906:	61 f1       	breq	.+88     	; 0x2960 <_ZN3PID22SetControllerDirectionEi+0x6a>
    2908:	88 8d       	ldd	r24, Y+24	; 0x18
    290a:	99 8d       	ldd	r25, Y+25	; 0x19
    290c:	86 17       	cp	r24, r22
    290e:	97 07       	cpc	r25, r23
    2910:	39 f1       	breq	.+78     	; 0x2960 <_ZN3PID22SetControllerDirectionEi+0x6a>
   {
	  kp = (0 - kp);
    2912:	2c 85       	ldd	r18, Y+12	; 0x0c
    2914:	3d 85       	ldd	r19, Y+13	; 0x0d
    2916:	4e 85       	ldd	r20, Y+14	; 0x0e
    2918:	5f 85       	ldd	r21, Y+15	; 0x0f
    291a:	60 e0       	ldi	r22, 0x00	; 0
    291c:	70 e0       	ldi	r23, 0x00	; 0
    291e:	cb 01       	movw	r24, r22
    2920:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <__subsf3>
    2924:	6c 87       	std	Y+12, r22	; 0x0c
    2926:	7d 87       	std	Y+13, r23	; 0x0d
    2928:	8e 87       	std	Y+14, r24	; 0x0e
    292a:	9f 87       	std	Y+15, r25	; 0x0f
      ki = (0 - ki);
    292c:	28 89       	ldd	r18, Y+16	; 0x10
    292e:	39 89       	ldd	r19, Y+17	; 0x11
    2930:	4a 89       	ldd	r20, Y+18	; 0x12
    2932:	5b 89       	ldd	r21, Y+19	; 0x13
    2934:	60 e0       	ldi	r22, 0x00	; 0
    2936:	70 e0       	ldi	r23, 0x00	; 0
    2938:	cb 01       	movw	r24, r22
    293a:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <__subsf3>
    293e:	68 8b       	std	Y+16, r22	; 0x10
    2940:	79 8b       	std	Y+17, r23	; 0x11
    2942:	8a 8b       	std	Y+18, r24	; 0x12
    2944:	9b 8b       	std	Y+19, r25	; 0x13
      kd = (0 - kd);
    2946:	2c 89       	ldd	r18, Y+20	; 0x14
    2948:	3d 89       	ldd	r19, Y+21	; 0x15
    294a:	4e 89       	ldd	r20, Y+22	; 0x16
    294c:	5f 89       	ldd	r21, Y+23	; 0x17
    294e:	60 e0       	ldi	r22, 0x00	; 0
    2950:	70 e0       	ldi	r23, 0x00	; 0
    2952:	cb 01       	movw	r24, r22
    2954:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <__subsf3>
    2958:	6c 8b       	std	Y+20, r22	; 0x14
    295a:	7d 8b       	std	Y+21, r23	; 0x15
    295c:	8e 8b       	std	Y+22, r24	; 0x16
    295e:	9f 8b       	std	Y+23, r25	; 0x17
   }   
   controllerDirection = Direction;
    2960:	19 8f       	std	Y+25, r17	; 0x19
    2962:	08 8f       	std	Y+24, r16	; 0x18
}
    2964:	df 91       	pop	r29
    2966:	cf 91       	pop	r28
    2968:	1f 91       	pop	r17
    296a:	0f 91       	pop	r16
    296c:	08 95       	ret

0000296e <_ZN3PIDC1EPdS0_S0_dddi>:

/*Constructor (...)*********************************************************
 *    The parameters specified here are those for for which we can't set up 
 *    reliable defaults, so we need to have the user set them.
 ***************************************************************************/
PID::PID(double* Input, double* Output, double* Setpoint,
    296e:	2f 92       	push	r2
    2970:	3f 92       	push	r3
    2972:	4f 92       	push	r4
    2974:	5f 92       	push	r5
    2976:	6f 92       	push	r6
    2978:	7f 92       	push	r7
    297a:	8f 92       	push	r8
    297c:	9f 92       	push	r9
    297e:	af 92       	push	r10
    2980:	bf 92       	push	r11
    2982:	cf 92       	push	r12
    2984:	df 92       	push	r13
    2986:	ef 92       	push	r14
    2988:	ff 92       	push	r15
    298a:	0f 93       	push	r16
    298c:	1f 93       	push	r17
    298e:	cf 93       	push	r28
    2990:	df 93       	push	r29
    2992:	cd b7       	in	r28, 0x3d	; 61
    2994:	de b7       	in	r29, 0x3e	; 62
    2996:	28 97       	sbiw	r28, 0x08	; 8
    2998:	0f b6       	in	r0, 0x3f	; 63
    299a:	f8 94       	cli
    299c:	de bf       	out	0x3e, r29	; 62
    299e:	0f be       	out	0x3f, r0	; 63
    29a0:	cd bf       	out	0x3d, r28	; 61
    29a2:	4c 01       	movw	r8, r24
    29a4:	7a 83       	std	Y+2, r23	; 0x02
    29a6:	69 83       	std	Y+1, r22	; 0x01
    29a8:	1a 01       	movw	r2, r20
    29aa:	3c 83       	std	Y+4, r19	; 0x04
    29ac:	2b 83       	std	Y+3, r18	; 0x03
    29ae:	27 01       	movw	r4, r14
    29b0:	38 01       	movw	r6, r16
    29b2:	ad 82       	std	Y+5, r10	; 0x05
    29b4:	be 82       	std	Y+6, r11	; 0x06
    29b6:	cf 82       	std	Y+7, r12	; 0x07
    29b8:	d8 86       	std	Y+8, r13	; 0x08
        double Kp, double Ki, double Kd, int ControllerDirection)
{
	PID::SetOutputLimits(0, 255);				//default output limit corresponds to 
    29ba:	00 e0       	ldi	r16, 0x00	; 0
    29bc:	10 e0       	ldi	r17, 0x00	; 0
    29be:	2f e7       	ldi	r18, 0x7F	; 127
    29c0:	33 e4       	ldi	r19, 0x43	; 67
    29c2:	40 e0       	ldi	r20, 0x00	; 0
    29c4:	50 e0       	ldi	r21, 0x00	; 0
    29c6:	ba 01       	movw	r22, r20
    29c8:	0e 94 9f 13 	call	0x273e	; 0x273e <_ZN3PID15SetOutputLimitsEdd>
												//the arduino pwm limits

    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds
    29cc:	84 e6       	ldi	r24, 0x64	; 100
    29ce:	90 e0       	ldi	r25, 0x00	; 0
    29d0:	f4 01       	movw	r30, r8
    29d2:	95 a7       	std	Z+45, r25	; 0x2d
    29d4:	84 a7       	std	Z+44, r24	; 0x2c

    PID::SetControllerDirection(ControllerDirection);
    29d6:	69 a1       	ldd	r22, Y+33	; 0x21
    29d8:	7a a1       	ldd	r23, Y+34	; 0x22
    29da:	c4 01       	movw	r24, r8
    29dc:	0e 94 7b 14 	call	0x28f6	; 0x28f6 <_ZN3PID22SetControllerDirectionEi>
    PID::SetTunings(Kp, Ki, Kd);
    29e0:	cd 8c       	ldd	r12, Y+29	; 0x1d
    29e2:	de 8c       	ldd	r13, Y+30	; 0x1e
    29e4:	ef 8c       	ldd	r14, Y+31	; 0x1f
    29e6:	f8 a0       	ldd	r15, Y+32	; 0x20
    29e8:	0d 81       	ldd	r16, Y+5	; 0x05
    29ea:	1e 81       	ldd	r17, Y+6	; 0x06
    29ec:	2f 81       	ldd	r18, Y+7	; 0x07
    29ee:	38 85       	ldd	r19, Y+8	; 0x08
    29f0:	b3 01       	movw	r22, r6
    29f2:	a2 01       	movw	r20, r4
    29f4:	c4 01       	movw	r24, r8
    29f6:	0e 94 9b 12 	call	0x2536	; 0x2536 <_ZN3PID10SetTuningsEddd>

    lastTime = millis()-SampleTime;				
    29fa:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <millis>
    29fe:	f4 01       	movw	r30, r8
    2a00:	44 a4       	ldd	r4, Z+44	; 0x2c
    2a02:	55 a4       	ldd	r5, Z+45	; 0x2d
    2a04:	05 2c       	mov	r0, r5
    2a06:	00 0c       	add	r0, r0
    2a08:	66 08       	sbc	r6, r6
    2a0a:	77 08       	sbc	r7, r7
    2a0c:	dc 01       	movw	r26, r24
    2a0e:	cb 01       	movw	r24, r22
    2a10:	84 19       	sub	r24, r4
    2a12:	95 09       	sbc	r25, r5
    2a14:	a6 09       	sbc	r26, r6
    2a16:	b7 09       	sbc	r27, r7
    2a18:	80 a3       	std	Z+32, r24	; 0x20
    2a1a:	91 a3       	std	Z+33, r25	; 0x21
    2a1c:	a2 a3       	std	Z+34, r26	; 0x22
    2a1e:	b3 a3       	std	Z+35, r27	; 0x23
    inAuto = false;
    2a20:	16 aa       	std	Z+54, r1	; 0x36
    myOutput = Output;
    2a22:	35 8e       	std	Z+29, r3	; 0x1d
    2a24:	24 8e       	std	Z+28, r2	; 0x1c
    myInput = Input;
    2a26:	89 81       	ldd	r24, Y+1	; 0x01
    2a28:	9a 81       	ldd	r25, Y+2	; 0x02
    2a2a:	93 8f       	std	Z+27, r25	; 0x1b
    2a2c:	82 8f       	std	Z+26, r24	; 0x1a
    mySetpoint = Setpoint;
    2a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2a30:	9c 81       	ldd	r25, Y+4	; 0x04
    2a32:	97 8f       	std	Z+31, r25	; 0x1f
    2a34:	86 8f       	std	Z+30, r24	; 0x1e
		
}
    2a36:	28 96       	adiw	r28, 0x08	; 8
    2a38:	0f b6       	in	r0, 0x3f	; 63
    2a3a:	f8 94       	cli
    2a3c:	de bf       	out	0x3e, r29	; 62
    2a3e:	0f be       	out	0x3f, r0	; 63
    2a40:	cd bf       	out	0x3d, r28	; 61
    2a42:	df 91       	pop	r29
    2a44:	cf 91       	pop	r28
    2a46:	1f 91       	pop	r17
    2a48:	0f 91       	pop	r16
    2a4a:	ff 90       	pop	r15
    2a4c:	ef 90       	pop	r14
    2a4e:	df 90       	pop	r13
    2a50:	cf 90       	pop	r12
    2a52:	bf 90       	pop	r11
    2a54:	af 90       	pop	r10
    2a56:	9f 90       	pop	r9
    2a58:	8f 90       	pop	r8
    2a5a:	7f 90       	pop	r7
    2a5c:	6f 90       	pop	r6
    2a5e:	5f 90       	pop	r5
    2a60:	4f 90       	pop	r4
    2a62:	3f 90       	pop	r3
    2a64:	2f 90       	pop	r2
    2a66:	08 95       	ret

00002a68 <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    2a68:	cf 93       	push	r28
  uint8_t sreg = SREG;
    2a6a:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    2a6c:	f8 94       	cli
  if (!initialized) {
    2a6e:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <_ZN8SPIClass11initializedE>
    2a72:	81 11       	cpse	r24, r1
    2a74:	27 c0       	rjmp	.+78     	; 0x2ac4 <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    2a76:	e7 e6       	ldi	r30, 0x67	; 103
    2a78:	f1 e0       	ldi	r31, 0x01	; 1
    2a7a:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    2a7c:	e8 e4       	ldi	r30, 0x48	; 72
    2a7e:	f1 e0       	ldi	r31, 0x01	; 1
    2a80:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    2a82:	e8 2f       	mov	r30, r24
    2a84:	f0 e0       	ldi	r31, 0x00	; 0
    2a86:	ee 0f       	add	r30, r30
    2a88:	ff 1f       	adc	r31, r31
    2a8a:	ed 57       	subi	r30, 0x7D	; 125
    2a8c:	fe 4f       	sbci	r31, 0xFE	; 254
    2a8e:	a5 91       	lpm	r26, Z+
    2a90:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    2a92:	ec 91       	ld	r30, X
    2a94:	e9 23       	and	r30, r25
    2a96:	21 f4       	brne	.+8      	; 0x2aa0 <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    2a98:	61 e0       	ldi	r22, 0x01	; 1
    2a9a:	81 e1       	ldi	r24, 0x11	; 17
    2a9c:	0e 94 4a 11 	call	0x2294	; 0x2294 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    2aa0:	61 e0       	ldi	r22, 0x01	; 1
    2aa2:	81 e1       	ldi	r24, 0x11	; 17
    2aa4:	0e 94 0e 11 	call	0x221c	; 0x221c <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    2aa8:	8c b5       	in	r24, 0x2c	; 44
    2aaa:	80 61       	ori	r24, 0x10	; 16
    2aac:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    2aae:	8c b5       	in	r24, 0x2c	; 44
    2ab0:	80 64       	ori	r24, 0x40	; 64
    2ab2:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    2ab4:	61 e0       	ldi	r22, 0x01	; 1
    2ab6:	8f e0       	ldi	r24, 0x0F	; 15
    2ab8:	0e 94 0e 11 	call	0x221c	; 0x221c <pinMode>
    pinMode(MOSI, OUTPUT);
    2abc:	61 e0       	ldi	r22, 0x01	; 1
    2abe:	80 e1       	ldi	r24, 0x10	; 16
    2ac0:	0e 94 0e 11 	call	0x221c	; 0x221c <pinMode>
  }
  initialized++; // reference count
    2ac4:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <_ZN8SPIClass11initializedE>
    2ac8:	8f 5f       	subi	r24, 0xFF	; 255
    2aca:	80 93 ac 03 	sts	0x03AC, r24	; 0x8003ac <_ZN8SPIClass11initializedE>
  SREG = sreg;
    2ace:	cf bf       	out	0x3f, r28	; 63
}
    2ad0:	cf 91       	pop	r28
    2ad2:	08 95       	ret

00002ad4 <_ZN7Serial_5writeEh>:
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
		ret = breakValue;
		breakValue = -1;
	}
	return ret;
}
    2ad4:	cf 93       	push	r28
    2ad6:	df 93       	push	r29
    2ad8:	1f 92       	push	r1
    2ada:	cd b7       	in	r28, 0x3d	; 61
    2adc:	de b7       	in	r29, 0x3e	; 62
    2ade:	69 83       	std	Y+1, r22	; 0x01
    2ae0:	dc 01       	movw	r26, r24
    2ae2:	ed 91       	ld	r30, X+
    2ae4:	fc 91       	ld	r31, X
    2ae6:	02 80       	ldd	r0, Z+2	; 0x02
    2ae8:	f3 81       	ldd	r31, Z+3	; 0x03
    2aea:	e0 2d       	mov	r30, r0
    2aec:	41 e0       	ldi	r20, 0x01	; 1
    2aee:	50 e0       	ldi	r21, 0x00	; 0
    2af0:	be 01       	movw	r22, r28
    2af2:	6f 5f       	subi	r22, 0xFF	; 255
    2af4:	7f 4f       	sbci	r23, 0xFF	; 255
    2af6:	09 95       	icall
    2af8:	0f 90       	pop	r0
    2afa:	df 91       	pop	r29
    2afc:	cf 91       	pop	r28
    2afe:	08 95       	ret

00002b00 <_ZN7Serial_4peekEv>:
    2b00:	cf 93       	push	r28
    2b02:	df 93       	push	r29
    2b04:	ec 01       	movw	r28, r24
    2b06:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b08:	9d 85       	ldd	r25, Y+13	; 0x0d
    2b0a:	97 ff       	sbrs	r25, 7
    2b0c:	05 c0       	rjmp	.+10     	; 0x2b18 <_ZN7Serial_4peekEv+0x18>
    2b0e:	82 e0       	ldi	r24, 0x02	; 2
    2b10:	0e 94 4c 0c 	call	0x1898	; 0x1898 <_Z8USB_Recvh>
    2b14:	9d 87       	std	Y+13, r25	; 0x0d
    2b16:	8c 87       	std	Y+12, r24	; 0x0c
    2b18:	8c 85       	ldd	r24, Y+12	; 0x0c
    2b1a:	9d 85       	ldd	r25, Y+13	; 0x0d
    2b1c:	df 91       	pop	r29
    2b1e:	cf 91       	pop	r28
    2b20:	08 95       	ret

00002b22 <_ZN7Serial_5flushEv>:
    2b22:	83 e0       	ldi	r24, 0x03	; 3
    2b24:	0c 94 de 0e 	jmp	0x1dbc	; 0x1dbc <_Z9USB_Flushh>

00002b28 <_ZN7Serial_9availableEv>:
    2b28:	fc 01       	movw	r30, r24
    2b2a:	84 85       	ldd	r24, Z+12	; 0x0c
    2b2c:	95 85       	ldd	r25, Z+13	; 0x0d
    2b2e:	97 fd       	sbrc	r25, 7
    2b30:	06 c0       	rjmp	.+12     	; 0x2b3e <_ZN7Serial_9availableEv+0x16>
    2b32:	82 e0       	ldi	r24, 0x02	; 2
    2b34:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <_Z13USB_Availableh>
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	01 96       	adiw	r24, 0x01	; 1
    2b3c:	08 95       	ret
    2b3e:	82 e0       	ldi	r24, 0x02	; 2
    2b40:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <_Z13USB_Availableh>
    2b44:	90 e0       	ldi	r25, 0x00	; 0
    2b46:	08 95       	ret

00002b48 <_ZN7Serial_4readEv>:
    2b48:	fc 01       	movw	r30, r24
    2b4a:	84 85       	ldd	r24, Z+12	; 0x0c
    2b4c:	95 85       	ldd	r25, Z+13	; 0x0d
    2b4e:	97 fd       	sbrc	r25, 7
    2b50:	05 c0       	rjmp	.+10     	; 0x2b5c <_ZN7Serial_4readEv+0x14>
    2b52:	2f ef       	ldi	r18, 0xFF	; 255
    2b54:	3f ef       	ldi	r19, 0xFF	; 255
    2b56:	35 87       	std	Z+13, r19	; 0x0d
    2b58:	24 87       	std	Z+12, r18	; 0x0c
    2b5a:	08 95       	ret
    2b5c:	82 e0       	ldi	r24, 0x02	; 2
    2b5e:	0c 94 4c 0c 	jmp	0x1898	; 0x1898 <_Z8USB_Recvh>

00002b62 <_ZN7Serial_5writeEPKhj>:
    2b62:	cf 93       	push	r28
    2b64:	df 93       	push	r29
    2b66:	ec 01       	movw	r28, r24
    2b68:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <_ZL12_usbLineInfo+0x7>
    2b6c:	88 23       	and	r24, r24
    2b6e:	31 f0       	breq	.+12     	; 0x2b7c <_ZN7Serial_5writeEPKhj+0x1a>
    2b70:	83 e0       	ldi	r24, 0x03	; 3
    2b72:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <_Z8USB_SendhPKvi>
    2b76:	18 16       	cp	r1, r24
    2b78:	19 06       	cpc	r1, r25
    2b7a:	34 f0       	brlt	.+12     	; 0x2b88 <_ZN7Serial_5writeEPKhj+0x26>
    2b7c:	81 e0       	ldi	r24, 0x01	; 1
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	9b 83       	std	Y+3, r25	; 0x03
    2b82:	8a 83       	std	Y+2, r24	; 0x02
    2b84:	80 e0       	ldi	r24, 0x00	; 0
    2b86:	90 e0       	ldi	r25, 0x00	; 0
    2b88:	df 91       	pop	r29
    2b8a:	cf 91       	pop	r28
    2b8c:	08 95       	ret

00002b8e <_Z16CDC_GetInterfacePh>:
    2b8e:	fc 01       	movw	r30, r24
    2b90:	90 81       	ld	r25, Z
    2b92:	9e 5f       	subi	r25, 0xFE	; 254
    2b94:	90 83       	st	Z, r25
    2b96:	42 e4       	ldi	r20, 0x42	; 66
    2b98:	50 e0       	ldi	r21, 0x00	; 0
    2b9a:	61 e9       	ldi	r22, 0x91	; 145
    2b9c:	71 e0       	ldi	r23, 0x01	; 1
    2b9e:	80 e8       	ldi	r24, 0x80	; 128
    2ba0:	0c 94 1d 0d 	jmp	0x1a3a	; 0x1a3a <_Z15USB_SendControlhPKvi>

00002ba4 <_Z9CDC_SetupR8USBSetup>:
    2ba4:	fc 01       	movw	r30, r24
    2ba6:	81 81       	ldd	r24, Z+1	; 0x01
    2ba8:	90 81       	ld	r25, Z
    2baa:	91 3a       	cpi	r25, 0xA1	; 161
    2bac:	59 f4       	brne	.+22     	; 0x2bc4 <_Z9CDC_SetupR8USBSetup+0x20>
    2bae:	81 32       	cpi	r24, 0x21	; 33
    2bb0:	09 f0       	breq	.+2      	; 0x2bb4 <_Z9CDC_SetupR8USBSetup+0x10>
    2bb2:	5c c0       	rjmp	.+184    	; 0x2c6c <_Z9CDC_SetupR8USBSetup+0xc8>
    2bb4:	47 e0       	ldi	r20, 0x07	; 7
    2bb6:	50 e0       	ldi	r21, 0x00	; 0
    2bb8:	6a e4       	ldi	r22, 0x4A	; 74
    2bba:	71 e0       	ldi	r23, 0x01	; 1
    2bbc:	80 e0       	ldi	r24, 0x00	; 0
    2bbe:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <_Z15USB_SendControlhPKvi>
    2bc2:	52 c0       	rjmp	.+164    	; 0x2c68 <_Z9CDC_SetupR8USBSetup+0xc4>
    2bc4:	91 32       	cpi	r25, 0x21	; 33
    2bc6:	09 f0       	breq	.+2      	; 0x2bca <_Z9CDC_SetupR8USBSetup+0x26>
    2bc8:	51 c0       	rjmp	.+162    	; 0x2c6c <_Z9CDC_SetupR8USBSetup+0xc8>
    2bca:	83 32       	cpi	r24, 0x23	; 35
    2bcc:	69 f4       	brne	.+26     	; 0x2be8 <_Z9CDC_SetupR8USBSetup+0x44>
    2bce:	82 81       	ldd	r24, Z+2	; 0x02
    2bd0:	93 81       	ldd	r25, Z+3	; 0x03
    2bd2:	a0 e0       	ldi	r26, 0x00	; 0
    2bd4:	b0 e0       	ldi	r27, 0x00	; 0
    2bd6:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <_ZL10breakValue>
    2bda:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <_ZL10breakValue+0x1>
    2bde:	a0 93 48 01 	sts	0x0148, r26	; 0x800148 <_ZL10breakValue+0x2>
    2be2:	b0 93 49 01 	sts	0x0149, r27	; 0x800149 <_ZL10breakValue+0x3>
    2be6:	40 c0       	rjmp	.+128    	; 0x2c68 <_Z9CDC_SetupR8USBSetup+0xc4>
    2be8:	80 32       	cpi	r24, 0x20	; 32
    2bea:	39 f4       	brne	.+14     	; 0x2bfa <_Z9CDC_SetupR8USBSetup+0x56>
    2bec:	67 e0       	ldi	r22, 0x07	; 7
    2bee:	70 e0       	ldi	r23, 0x00	; 0
    2bf0:	8a e4       	ldi	r24, 0x4A	; 74
    2bf2:	91 e0       	ldi	r25, 0x01	; 1
    2bf4:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <_Z15USB_RecvControlPvi>
    2bf8:	05 c0       	rjmp	.+10     	; 0x2c04 <_Z9CDC_SetupR8USBSetup+0x60>
    2bfa:	82 32       	cpi	r24, 0x22	; 34
    2bfc:	a9 f5       	brne	.+106    	; 0x2c68 <_Z9CDC_SetupR8USBSetup+0xc4>
    2bfe:	82 81       	ldd	r24, Z+2	; 0x02
    2c00:	80 93 51 01 	sts	0x0151, r24	; 0x800151 <_ZL12_usbLineInfo+0x7>
    2c04:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <_updatedLUFAbootloader>
    2c08:	88 23       	and	r24, r24
    2c0a:	19 f0       	breq	.+6      	; 0x2c12 <_Z9CDC_SetupR8USBSetup+0x6e>
    2c0c:	ee ef       	ldi	r30, 0xFE	; 254
    2c0e:	fa e0       	ldi	r31, 0x0A	; 10
    2c10:	02 c0       	rjmp	.+4      	; 0x2c16 <_Z9CDC_SetupR8USBSetup+0x72>
    2c12:	e0 e0       	ldi	r30, 0x00	; 0
    2c14:	f8 e0       	ldi	r31, 0x08	; 8
    2c16:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <_ZL12_usbLineInfo>
    2c1a:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <_ZL12_usbLineInfo+0x1>
    2c1e:	a0 91 4c 01 	lds	r26, 0x014C	; 0x80014c <_ZL12_usbLineInfo+0x2>
    2c22:	b0 91 4d 01 	lds	r27, 0x014D	; 0x80014d <_ZL12_usbLineInfo+0x3>
    2c26:	80 3b       	cpi	r24, 0xB0	; 176
    2c28:	94 40       	sbci	r25, 0x04	; 4
    2c2a:	a1 05       	cpc	r26, r1
    2c2c:	b1 05       	cpc	r27, r1
    2c2e:	01 f5       	brne	.+64     	; 0x2c70 <_Z9CDC_SetupR8USBSetup+0xcc>
    2c30:	80 91 51 01 	lds	r24, 0x0151	; 0x800151 <_ZL12_usbLineInfo+0x7>
    2c34:	80 fd       	sbrc	r24, 0
    2c36:	1c c0       	rjmp	.+56     	; 0x2c70 <_Z9CDC_SetupR8USBSetup+0xcc>
    2c38:	ee 3f       	cpi	r30, 0xFE	; 254
    2c3a:	2a e0       	ldi	r18, 0x0A	; 10
    2c3c:	f2 07       	cpc	r31, r18
    2c3e:	31 f0       	breq	.+12     	; 0x2c4c <_Z9CDC_SetupR8USBSetup+0xa8>
    2c40:	80 81       	ld	r24, Z
    2c42:	91 81       	ldd	r25, Z+1	; 0x01
    2c44:	90 93 ff 0a 	sts	0x0AFF, r25	; 0x800aff <__bss_end+0x6f5>
    2c48:	80 93 fe 0a 	sts	0x0AFE, r24	; 0x800afe <__bss_end+0x6f4>
    2c4c:	87 e7       	ldi	r24, 0x77	; 119
    2c4e:	97 e7       	ldi	r25, 0x77	; 119
    2c50:	91 83       	std	Z+1, r25	; 0x01
    2c52:	80 83       	st	Z, r24
    2c54:	9b e0       	ldi	r25, 0x0B	; 11
    2c56:	88 e1       	ldi	r24, 0x18	; 24
    2c58:	0f b6       	in	r0, 0x3f	; 63
    2c5a:	f8 94       	cli
    2c5c:	a8 95       	wdr
    2c5e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    2c62:	0f be       	out	0x3f, r0	; 63
    2c64:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
    2c68:	81 e0       	ldi	r24, 0x01	; 1
    2c6a:	08 95       	ret
    2c6c:	80 e0       	ldi	r24, 0x00	; 0
    2c6e:	08 95       	ret
    2c70:	0f b6       	in	r0, 0x3f	; 63
    2c72:	f8 94       	cli
    2c74:	a8 95       	wdr
    2c76:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
    2c7a:	88 61       	ori	r24, 0x18	; 24
    2c7c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
    2c80:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
    2c84:	0f be       	out	0x3f, r0	; 63
    2c86:	a8 95       	wdr
    2c88:	ee 3f       	cpi	r30, 0xFE	; 254
    2c8a:	8a e0       	ldi	r24, 0x0A	; 10
    2c8c:	f8 07       	cpc	r31, r24
    2c8e:	39 f0       	breq	.+14     	; 0x2c9e <_Z9CDC_SetupR8USBSetup+0xfa>
    2c90:	80 91 fe 0a 	lds	r24, 0x0AFE	; 0x800afe <__bss_end+0x6f4>
    2c94:	90 91 ff 0a 	lds	r25, 0x0AFF	; 0x800aff <__bss_end+0x6f5>
    2c98:	91 83       	std	Z+1, r25	; 0x01
    2c9a:	80 83       	st	Z, r24
    2c9c:	e5 cf       	rjmp	.-54     	; 0x2c68 <_Z9CDC_SetupR8USBSetup+0xc4>
    2c9e:	10 92 ff 0a 	sts	0x0AFF, r1	; 0x800aff <__bss_end+0x6f5>
    2ca2:	10 92 fe 0a 	sts	0x0AFE, r1	; 0x800afe <__bss_end+0x6f4>
    2ca6:	e0 cf       	rjmp	.-64     	; 0x2c68 <_Z9CDC_SetupR8USBSetup+0xc4>

00002ca8 <_GLOBAL__sub_I__updatedLUFAbootloader>:
    2ca8:	ed ea       	ldi	r30, 0xAD	; 173
    2caa:	f3 e0       	ldi	r31, 0x03	; 3
    2cac:	13 82       	std	Z+3, r1	; 0x03
    2cae:	12 82       	std	Z+2, r1	; 0x02
    2cb0:	88 ee       	ldi	r24, 0xE8	; 232
    2cb2:	93 e0       	ldi	r25, 0x03	; 3
    2cb4:	a0 e0       	ldi	r26, 0x00	; 0
    2cb6:	b0 e0       	ldi	r27, 0x00	; 0
    2cb8:	84 83       	std	Z+4, r24	; 0x04
    2cba:	95 83       	std	Z+5, r25	; 0x05
    2cbc:	a6 83       	std	Z+6, r26	; 0x06
    2cbe:	b7 83       	std	Z+7, r27	; 0x07
class Serial_ : public Stream
{
private:
	int peek_buffer;
public:
	Serial_() { peek_buffer = -1; };
    2cc0:	85 eb       	ldi	r24, 0xB5	; 181
    2cc2:	91 e0       	ldi	r25, 0x01	; 1
    2cc4:	91 83       	std	Z+1, r25	; 0x01
    2cc6:	80 83       	st	Z, r24
    2cc8:	8f ef       	ldi	r24, 0xFF	; 255
    2cca:	9f ef       	ldi	r25, 0xFF	; 255
    2ccc:	95 87       	std	Z+13, r25	; 0x0d
    2cce:	84 87       	std	Z+12, r24	; 0x0c
    2cd0:	08 95       	ret

00002cd2 <yield>:
    2cd2:	08 95       	ret

00002cd4 <_ZN13PluggableUSB_12getInterfaceEPh>:
		_initEndpoints[lastEp] = node->endpointType[i];
		lastEp++;
	}
	return true;
	// restart USB layer???
}
    2cd4:	ef 92       	push	r14
    2cd6:	ff 92       	push	r15
    2cd8:	0f 93       	push	r16
    2cda:	1f 93       	push	r17
    2cdc:	cf 93       	push	r28
    2cde:	df 93       	push	r29
    2ce0:	7b 01       	movw	r14, r22
    2ce2:	fc 01       	movw	r30, r24
    2ce4:	c2 81       	ldd	r28, Z+2	; 0x02
    2ce6:	d3 81       	ldd	r29, Z+3	; 0x03
    2ce8:	00 e0       	ldi	r16, 0x00	; 0
    2cea:	10 e0       	ldi	r17, 0x00	; 0
    2cec:	20 97       	sbiw	r28, 0x00	; 0
    2cee:	81 f0       	breq	.+32     	; 0x2d10 <_ZN13PluggableUSB_12getInterfaceEPh+0x3c>
    2cf0:	e8 81       	ld	r30, Y
    2cf2:	f9 81       	ldd	r31, Y+1	; 0x01
    2cf4:	02 80       	ldd	r0, Z+2	; 0x02
    2cf6:	f3 81       	ldd	r31, Z+3	; 0x03
    2cf8:	e0 2d       	mov	r30, r0
    2cfa:	b7 01       	movw	r22, r14
    2cfc:	ce 01       	movw	r24, r28
    2cfe:	09 95       	icall
    2d00:	97 fd       	sbrc	r25, 7
    2d02:	08 c0       	rjmp	.+16     	; 0x2d14 <_ZN13PluggableUSB_12getInterfaceEPh+0x40>
    2d04:	08 0f       	add	r16, r24
    2d06:	19 1f       	adc	r17, r25
    2d08:	08 84       	ldd	r0, Y+8	; 0x08
    2d0a:	d9 85       	ldd	r29, Y+9	; 0x09
    2d0c:	c0 2d       	mov	r28, r0
    2d0e:	ee cf       	rjmp	.-36     	; 0x2cec <_ZN13PluggableUSB_12getInterfaceEPh+0x18>
    2d10:	c8 01       	movw	r24, r16
    2d12:	02 c0       	rjmp	.+4      	; 0x2d18 <_ZN13PluggableUSB_12getInterfaceEPh+0x44>
    2d14:	8f ef       	ldi	r24, 0xFF	; 255
    2d16:	9f ef       	ldi	r25, 0xFF	; 255
    2d18:	df 91       	pop	r29
    2d1a:	cf 91       	pop	r28
    2d1c:	1f 91       	pop	r17
    2d1e:	0f 91       	pop	r16
    2d20:	ff 90       	pop	r15
    2d22:	ef 90       	pop	r14
    2d24:	08 95       	ret

00002d26 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:
    2d26:	0f 93       	push	r16
    2d28:	1f 93       	push	r17
    2d2a:	cf 93       	push	r28
    2d2c:	df 93       	push	r29
    2d2e:	8b 01       	movw	r16, r22
    2d30:	fc 01       	movw	r30, r24
    2d32:	c2 81       	ldd	r28, Z+2	; 0x02
    2d34:	d3 81       	ldd	r29, Z+3	; 0x03
    2d36:	20 97       	sbiw	r28, 0x00	; 0
    2d38:	71 f0       	breq	.+28     	; 0x2d56 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x30>
    2d3a:	e8 81       	ld	r30, Y
    2d3c:	f9 81       	ldd	r31, Y+1	; 0x01
    2d3e:	04 80       	ldd	r0, Z+4	; 0x04
    2d40:	f5 81       	ldd	r31, Z+5	; 0x05
    2d42:	e0 2d       	mov	r30, r0
    2d44:	b8 01       	movw	r22, r16
    2d46:	ce 01       	movw	r24, r28
    2d48:	09 95       	icall
    2d4a:	00 97       	sbiw	r24, 0x00	; 0
    2d4c:	31 f4       	brne	.+12     	; 0x2d5a <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x34>
    2d4e:	08 84       	ldd	r0, Y+8	; 0x08
    2d50:	d9 85       	ldd	r29, Y+9	; 0x09
    2d52:	c0 2d       	mov	r28, r0
    2d54:	f0 cf       	rjmp	.-32     	; 0x2d36 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x10>
    2d56:	80 e0       	ldi	r24, 0x00	; 0
    2d58:	90 e0       	ldi	r25, 0x00	; 0
    2d5a:	df 91       	pop	r29
    2d5c:	cf 91       	pop	r28
    2d5e:	1f 91       	pop	r17
    2d60:	0f 91       	pop	r16
    2d62:	08 95       	ret

00002d64 <_ZN13PluggableUSB_12getShortNameEPc>:
    2d64:	0f 93       	push	r16
    2d66:	1f 93       	push	r17
    2d68:	cf 93       	push	r28
    2d6a:	df 93       	push	r29
    2d6c:	8b 01       	movw	r16, r22
    2d6e:	fc 01       	movw	r30, r24
    2d70:	c2 81       	ldd	r28, Z+2	; 0x02
    2d72:	d3 81       	ldd	r29, Z+3	; 0x03
    2d74:	20 97       	sbiw	r28, 0x00	; 0
    2d76:	71 f0       	breq	.+28     	; 0x2d94 <_ZN13PluggableUSB_12getShortNameEPc+0x30>
    2d78:	e8 81       	ld	r30, Y
    2d7a:	f9 81       	ldd	r31, Y+1	; 0x01
    2d7c:	06 80       	ldd	r0, Z+6	; 0x06
    2d7e:	f7 81       	ldd	r31, Z+7	; 0x07
    2d80:	e0 2d       	mov	r30, r0
    2d82:	b8 01       	movw	r22, r16
    2d84:	ce 01       	movw	r24, r28
    2d86:	09 95       	icall
    2d88:	08 0f       	add	r16, r24
    2d8a:	11 1d       	adc	r17, r1
    2d8c:	08 84       	ldd	r0, Y+8	; 0x08
    2d8e:	d9 85       	ldd	r29, Y+9	; 0x09
    2d90:	c0 2d       	mov	r28, r0
    2d92:	f0 cf       	rjmp	.-32     	; 0x2d74 <_ZN13PluggableUSB_12getShortNameEPc+0x10>
    2d94:	f8 01       	movw	r30, r16
    2d96:	10 82       	st	Z, r1
    2d98:	df 91       	pop	r29
    2d9a:	cf 91       	pop	r28
    2d9c:	1f 91       	pop	r17
    2d9e:	0f 91       	pop	r16
    2da0:	08 95       	ret

00002da2 <_ZN13PluggableUSB_5setupER8USBSetup>:
    2da2:	0f 93       	push	r16
    2da4:	1f 93       	push	r17
    2da6:	cf 93       	push	r28
    2da8:	df 93       	push	r29
    2daa:	8b 01       	movw	r16, r22
    2dac:	fc 01       	movw	r30, r24
    2dae:	c2 81       	ldd	r28, Z+2	; 0x02
    2db0:	d3 81       	ldd	r29, Z+3	; 0x03
    2db2:	20 97       	sbiw	r28, 0x00	; 0
    2db4:	71 f0       	breq	.+28     	; 0x2dd2 <_ZN13PluggableUSB_5setupER8USBSetup+0x30>
    2db6:	e8 81       	ld	r30, Y
    2db8:	f9 81       	ldd	r31, Y+1	; 0x01
    2dba:	01 90       	ld	r0, Z+
    2dbc:	f0 81       	ld	r31, Z
    2dbe:	e0 2d       	mov	r30, r0
    2dc0:	b8 01       	movw	r22, r16
    2dc2:	ce 01       	movw	r24, r28
    2dc4:	09 95       	icall
    2dc6:	81 11       	cpse	r24, r1
    2dc8:	05 c0       	rjmp	.+10     	; 0x2dd4 <_ZN13PluggableUSB_5setupER8USBSetup+0x32>
    2dca:	08 84       	ldd	r0, Y+8	; 0x08
    2dcc:	d9 85       	ldd	r29, Y+9	; 0x09
    2dce:	c0 2d       	mov	r28, r0
    2dd0:	f0 cf       	rjmp	.-32     	; 0x2db2 <_ZN13PluggableUSB_5setupER8USBSetup+0x10>
    2dd2:	80 e0       	ldi	r24, 0x00	; 0
    2dd4:	df 91       	pop	r29
    2dd6:	cf 91       	pop	r28
    2dd8:	1f 91       	pop	r17
    2dda:	0f 91       	pop	r16
    2ddc:	08 95       	ret

00002dde <_Z12PluggableUSBv>:

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    2dde:	80 91 02 04 	lds	r24, 0x0402	; 0x800402 <_ZGVZ12PluggableUSBvE3obj>
    2de2:	81 11       	cpse	r24, r1
    2de4:	0d c0       	rjmp	.+26     	; 0x2e00 <_Z12PluggableUSBv+0x22>
	return obj;
}

PluggableUSB_::PluggableUSB_() : lastIf(CDC_ACM_INTERFACE + CDC_INTERFACE_COUNT),
                                 lastEp(CDC_FIRST_ENDPOINT + CDC_ENPOINT_COUNT),
                                 rootNode(NULL)
    2de6:	82 e0       	ldi	r24, 0x02	; 2
    2de8:	80 93 fe 03 	sts	0x03FE, r24	; 0x8003fe <_ZZ12PluggableUSBvE3obj>
    2dec:	84 e0       	ldi	r24, 0x04	; 4
    2dee:	80 93 ff 03 	sts	0x03FF, r24	; 0x8003ff <_ZZ12PluggableUSBvE3obj+0x1>
    2df2:	10 92 01 04 	sts	0x0401, r1	; 0x800401 <_ZZ12PluggableUSBvE3obj+0x3>
    2df6:	10 92 00 04 	sts	0x0400, r1	; 0x800400 <_ZZ12PluggableUSBvE3obj+0x2>
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    2dfa:	81 e0       	ldi	r24, 0x01	; 1
    2dfc:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <_ZGVZ12PluggableUSBvE3obj>
	return obj;
}
    2e00:	8e ef       	ldi	r24, 0xFE	; 254
    2e02:	93 e0       	ldi	r25, 0x03	; 3
    2e04:	08 95       	ret

00002e06 <__udivmodsi4>:
    2e06:	a1 e2       	ldi	r26, 0x21	; 33
    2e08:	1a 2e       	mov	r1, r26
    2e0a:	aa 1b       	sub	r26, r26
    2e0c:	bb 1b       	sub	r27, r27
    2e0e:	fd 01       	movw	r30, r26
    2e10:	0d c0       	rjmp	.+26     	; 0x2e2c <__udivmodsi4_ep>

00002e12 <__udivmodsi4_loop>:
    2e12:	aa 1f       	adc	r26, r26
    2e14:	bb 1f       	adc	r27, r27
    2e16:	ee 1f       	adc	r30, r30
    2e18:	ff 1f       	adc	r31, r31
    2e1a:	a2 17       	cp	r26, r18
    2e1c:	b3 07       	cpc	r27, r19
    2e1e:	e4 07       	cpc	r30, r20
    2e20:	f5 07       	cpc	r31, r21
    2e22:	20 f0       	brcs	.+8      	; 0x2e2c <__udivmodsi4_ep>
    2e24:	a2 1b       	sub	r26, r18
    2e26:	b3 0b       	sbc	r27, r19
    2e28:	e4 0b       	sbc	r30, r20
    2e2a:	f5 0b       	sbc	r31, r21

00002e2c <__udivmodsi4_ep>:
    2e2c:	66 1f       	adc	r22, r22
    2e2e:	77 1f       	adc	r23, r23
    2e30:	88 1f       	adc	r24, r24
    2e32:	99 1f       	adc	r25, r25
    2e34:	1a 94       	dec	r1
    2e36:	69 f7       	brne	.-38     	; 0x2e12 <__udivmodsi4_loop>
    2e38:	60 95       	com	r22
    2e3a:	70 95       	com	r23
    2e3c:	80 95       	com	r24
    2e3e:	90 95       	com	r25
    2e40:	9b 01       	movw	r18, r22
    2e42:	ac 01       	movw	r20, r24
    2e44:	bd 01       	movw	r22, r26
    2e46:	cf 01       	movw	r24, r30
    2e48:	08 95       	ret

00002e4a <__tablejump2__>:
    2e4a:	ee 0f       	add	r30, r30
    2e4c:	ff 1f       	adc	r31, r31
    2e4e:	05 90       	lpm	r0, Z+
    2e50:	f4 91       	lpm	r31, Z
    2e52:	e0 2d       	mov	r30, r0
    2e54:	09 94       	ijmp

00002e56 <_exit>:
    2e56:	f8 94       	cli

00002e58 <__stop_program>:
    2e58:	ff cf       	rjmp	.-2      	; 0x2e58 <__stop_program>
