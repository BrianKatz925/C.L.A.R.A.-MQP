
triple_motor_control_with_ls7366r_and_i2c_and_cur_sensing_atmeg.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000f0  00800100  00003688  0000371c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003688  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000002c5  008001f0  008001f0  0000380c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000380c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000383c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000708  00000000  00000000  0000387c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000121a9  00000000  00000000  00003f84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003b82  00000000  00000000  0001612d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004552  00000000  00000000  00019caf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001670  00000000  00000000  0001e204  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000041e0  00000000  00000000  0001f874  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000725e  00000000  00000000  00023a54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000768  00000000  00000000  0002acb2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__ctors_end>
       4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
       8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
       c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      10:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      14:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      18:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      1c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      20:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      24:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      28:	0c 94 73 10 	jmp	0x20e6	; 0x20e6 <__vector_10>
      2c:	0c 94 02 0f 	jmp	0x1e04	; 0x1e04 <__vector_11>
      30:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      34:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      38:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      3c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      40:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      44:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      48:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      4c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      50:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      54:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      58:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      5c:	0c 94 13 11 	jmp	0x2226	; 0x2226 <__vector_23>
      60:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      64:	0c 94 d9 0b 	jmp	0x17b2	; 0x17b2 <__vector_25>
      68:	0c 94 0b 0c 	jmp	0x1816	; 0x1816 <__vector_26>
      6c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      70:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      74:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      78:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      7c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      80:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      84:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      88:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      8c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      90:	0c 94 ed 19 	jmp	0x33da	; 0x33da <__vector_36>
      94:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      98:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      9c:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      a0:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      a4:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      a8:	0c 94 16 01 	jmp	0x22c	; 0x22c <__bad_interrupt>
      ac:	74 12       	cpse	r7, r20
      ae:	77 12       	cpse	r7, r23
      b0:	66 12       	cpse	r6, r22
      b2:	6a 12       	cpse	r6, r26
      b4:	70 12       	cpse	r7, r16
      b6:	98 12       	cpse	r9, r24
      b8:	98 12       	cpse	r9, r24
      ba:	98 12       	cpse	r9, r24
      bc:	7b 12       	cpse	r7, r27
      be:	7f 12       	cpse	r7, r31
      c0:	83 12       	cpse	r8, r19
      c2:	89 12       	cpse	r8, r25
      c4:	8d 12       	cpse	r8, r29
      c6:	98 12       	cpse	r9, r24
      c8:	93 12       	cpse	r9, r19

000000ca <USB_DeviceDescriptorB>:
      ca:	12 01 00 02 ef 02 01 40 41 23 37 80 00 01 01 02     .......@A#7.....
      da:	03 01                                               ..

000000dc <USB_DeviceDescriptor>:
      dc:	12 01 00 02 00 00 00 40 41 23 37 80 00 01 01 02     .......@A#7.....
      ec:	03 01                                               ..

000000ee <STRING_MANUFACTURER>:
      ee:	41 72 64 75 69 6e 6f 20 4c 4c 43 00                 Arduino LLC.

000000fa <STRING_PRODUCT>:
      fa:	41 72 64 75 69 6e 6f 20 4d 69 63 72 6f 00           Arduino Micro.

00000108 <STRING_LANGUAGE>:
     108:	04 03 09 04                                         ....

0000010c <analog_pin_to_channel_PGM>:
     10c:	07 06 05 04 01 00 08 0a 0b 0c 0d 09                 ............

00000118 <digital_pin_to_timer_PGM>:
     118:	00 00 00 02 00 09 0f 00 00 03 04 01 00 0c 00 00     ................
	...

00000137 <digital_pin_to_bit_mask_PGM>:
     137:	04 08 02 01 10 40 80 40 10 20 40 80 40 80 08 02     .....@.@. @.@...
     147:	04 01 80 40 20 10 02 01 10 80 10 20 40 40 20        ...@ ...... @@ 

00000156 <digital_pin_to_port_PGM>:
     156:	04 04 04 04 04 03 04 05 02 02 02 02 04 03 02 02     ................
     166:	02 02 06 06 06 06 06 06 04 04 02 02 02 04 04        ...............

00000175 <port_to_output_PGM>:
     175:	00 00 00 00 25 00 28 00 2b 00 2e 00 31 00           ....%.(.+...1.

00000183 <port_to_mode_PGM>:
     183:	00 00 00 00 24 00 27 00 2a 00 2d 00 30 00           ....$.'.*.-.0.

00000191 <_cdcInterface>:
     191:	08 0b 00 02 02 02 01 00 09 04 00 00 01 02 02 00     ................
     1a1:	00 05 24 00 10 01 05 24 01 01 01 04 24 02 06 05     ..$....$....$...
     1b1:	24 06 00 01 07 05 81 03 10 00 40 09 04 01 00 02     $.........@.....
     1c1:	0a 00 00 00 07 05 02 02 40 00 00 07 05 83 02 40     ........@......@
     1d1:	00 00 00                                            ...

000001d4 <__ctors_start>:
     1d4:	4e 07       	cpc	r20, r30
     1d6:	3b 0c       	add	r3, r11
     1d8:	ec 17       	cp	r30, r28
     1da:	da 18       	sub	r13, r10

000001dc <__ctors_end>:
     1dc:	11 24       	eor	r1, r1
     1de:	1f be       	out	0x3f, r1	; 63
     1e0:	cf ef       	ldi	r28, 0xFF	; 255
     1e2:	da e0       	ldi	r29, 0x0A	; 10
     1e4:	de bf       	out	0x3e, r29	; 62
     1e6:	cd bf       	out	0x3d, r28	; 61

000001e8 <__do_copy_data>:
     1e8:	11 e0       	ldi	r17, 0x01	; 1
     1ea:	a0 e0       	ldi	r26, 0x00	; 0
     1ec:	b1 e0       	ldi	r27, 0x01	; 1
     1ee:	e8 e8       	ldi	r30, 0x88	; 136
     1f0:	f6 e3       	ldi	r31, 0x36	; 54
     1f2:	02 c0       	rjmp	.+4      	; 0x1f8 <__do_copy_data+0x10>
     1f4:	05 90       	lpm	r0, Z+
     1f6:	0d 92       	st	X+, r0
     1f8:	a0 3f       	cpi	r26, 0xF0	; 240
     1fa:	b1 07       	cpc	r27, r17
     1fc:	d9 f7       	brne	.-10     	; 0x1f4 <__do_copy_data+0xc>

000001fe <__do_clear_bss>:
     1fe:	24 e0       	ldi	r18, 0x04	; 4
     200:	a0 ef       	ldi	r26, 0xF0	; 240
     202:	b1 e0       	ldi	r27, 0x01	; 1
     204:	01 c0       	rjmp	.+2      	; 0x208 <.do_clear_bss_start>

00000206 <.do_clear_bss_loop>:
     206:	1d 92       	st	X+, r1

00000208 <.do_clear_bss_start>:
     208:	a5 3b       	cpi	r26, 0xB5	; 181
     20a:	b2 07       	cpc	r27, r18
     20c:	e1 f7       	brne	.-8      	; 0x206 <.do_clear_bss_loop>

0000020e <__do_global_ctors>:
     20e:	10 e0       	ldi	r17, 0x00	; 0
     210:	ce ee       	ldi	r28, 0xEE	; 238
     212:	d0 e0       	ldi	r29, 0x00	; 0
     214:	04 c0       	rjmp	.+8      	; 0x21e <__do_global_ctors+0x10>
     216:	21 97       	sbiw	r28, 0x01	; 1
     218:	fe 01       	movw	r30, r28
     21a:	0e 94 3c 1b 	call	0x3678	; 0x3678 <__tablejump2__>
     21e:	ca 3e       	cpi	r28, 0xEA	; 234
     220:	d1 07       	cpc	r29, r17
     222:	c9 f7       	brne	.-14     	; 0x216 <__do_global_ctors+0x8>
     224:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <main>
     228:	0c 94 42 1b 	jmp	0x3684	; 0x3684 <_exit>

0000022c <__bad_interrupt>:
     22c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000230 <_ZN8SPIClass8transferEh>:
    SPSR = settings.spsr;
  }

  // Write to the SPI bus (MOSI pin) and also receive (MISO pin)
  inline static uint8_t transfer(uint8_t data) {
    SPDR = data;
     230:	8e bd       	out	0x2e, r24	; 46
     * The following NOP introduces a small delay that can prevent the wait
     * loop form iterating when running at the maximum speed. This gives
     * about 10% more speed, even if it seems counter-intuitive. At lower
     * speeds it is unnoticed.
     */
    asm volatile("nop");
     232:	00 00       	nop
    while (!(SPSR & _BV(SPIF))) ; // wait
     234:	0d b4       	in	r0, 0x2d	; 45
     236:	07 fe       	sbrs	r0, 7
     238:	fd cf       	rjmp	.-6      	; 0x234 <_ZN8SPIClass8transferEh+0x4>
    return SPDR;
     23a:	8e b5       	in	r24, 0x2e	; 46
  }
     23c:	08 95       	ret

0000023e <_Z12initEncodersv>:
}

void initEncoders() {
    // Set slave selects as outputs
    // pinMode(slaveSelectEnc1, OUTPUT);
    DDRE |= 0x04;  // pinMode PE2 OUTPUT
     23e:	6a 9a       	sbi	0x0d, 2	; 13
    pinMode(slaveSelectEnc2, OUTPUT);
     240:	61 e0       	ldi	r22, 0x01	; 1
     242:	88 e0       	ldi	r24, 0x08	; 8
     244:	0e 94 99 12 	call	0x2532	; 0x2532 <pinMode>
    pinMode(slaveSelectEnc3, OUTPUT);
     248:	61 e0       	ldi	r22, 0x01	; 1
     24a:	87 e0       	ldi	r24, 0x07	; 7
     24c:	0e 94 99 12 	call	0x2532	; 0x2532 <pinMode>

    // Raise select pins
    // Communication begins when you drop the individual select signsl
    // digitalWrite(slaveSelectEnc1,HIGH);
    PORTE |= 0x04;  // Set PE2
     250:	72 9a       	sbi	0x0e, 2	; 14
    digitalWrite(slaveSelectEnc2, HIGH);
     252:	61 e0       	ldi	r22, 0x01	; 1
     254:	88 e0       	ldi	r24, 0x08	; 8
     256:	0e 94 d5 12 	call	0x25aa	; 0x25aa <digitalWrite>
    digitalWrite(slaveSelectEnc3, HIGH);
     25a:	61 e0       	ldi	r22, 0x01	; 1
     25c:	87 e0       	ldi	r24, 0x07	; 7
     25e:	0e 94 d5 12 	call	0x25aa	; 0x25aa <digitalWrite>

    SPI.begin();
     262:	0e 94 bf 16 	call	0x2d7e	; 0x2d7e <_ZN8SPIClass5beginEv>
    //    Negative index input
    //    free-running count mode
    //    x4 quatrature count mode (four counts per quadrature cycle)
    // NOTE: For more information on commands, see datasheet
    // digitalWrite(slaveSelectEnc1,LOW);        // Begin SPI conversation
    PORTE &= 0xFB;       // Clear PE2
     266:	72 98       	cbi	0x0e, 2	; 14
    SPI.transfer(0x88);  // Write to MDR0
     268:	88 e8       	ldi	r24, 0x88	; 136
     26a:	0e 94 18 01 	call	0x230	; 0x230 <_ZN8SPIClass8transferEh>
    SPI.transfer(0x03);  // Configure to 4 byte mode
     26e:	83 e0       	ldi	r24, 0x03	; 3
     270:	0e 94 18 01 	call	0x230	; 0x230 <_ZN8SPIClass8transferEh>
    // digitalWrite(slaveSelectEnc1,HIGH);       // Terminate SPI conversation
    PORTE |= 0x04;  // Set PE2
     274:	72 9a       	sbi	0x0e, 2	; 14
    //    Clock division factor: 0
    //    Negative index input
    //    free-running count mode
    //    x4 quatrature count mode (four counts per quadrature cycle)
    // NOTE: For more information on commands, see datasheet
    digitalWrite(slaveSelectEnc2, LOW);  // Begin SPI conversation
     276:	60 e0       	ldi	r22, 0x00	; 0
     278:	88 e0       	ldi	r24, 0x08	; 8
     27a:	0e 94 d5 12 	call	0x25aa	; 0x25aa <digitalWrite>
    SPI.transfer(0x88);                  // Write to MDR0
     27e:	88 e8       	ldi	r24, 0x88	; 136
     280:	0e 94 18 01 	call	0x230	; 0x230 <_ZN8SPIClass8transferEh>
    SPI.transfer(0x03);  // x4 quadrature count mode, 4 byte counter mode is by
     284:	83 e0       	ldi	r24, 0x03	; 3
     286:	0e 94 18 01 	call	0x230	; 0x230 <_ZN8SPIClass8transferEh>
    // default on MDR1 register
    digitalWrite(slaveSelectEnc2, HIGH);  // Terminate SPI conversation
     28a:	61 e0       	ldi	r22, 0x01	; 1
     28c:	88 e0       	ldi	r24, 0x08	; 8
     28e:	0e 94 d5 12 	call	0x25aa	; 0x25aa <digitalWrite>
    //    Clock division factor: 0
    //    Negative index input
    //    free-running count mode
    //    x4 quatrature count mode (four counts per quadrature cycle)
    // NOTE: For more information on commands, see datasheet
    digitalWrite(slaveSelectEnc3, LOW);  // Begin SPI conversation
     292:	60 e0       	ldi	r22, 0x00	; 0
     294:	87 e0       	ldi	r24, 0x07	; 7
     296:	0e 94 d5 12 	call	0x25aa	; 0x25aa <digitalWrite>
    SPI.transfer(0x88);                  // Write to MDR0
     29a:	88 e8       	ldi	r24, 0x88	; 136
     29c:	0e 94 18 01 	call	0x230	; 0x230 <_ZN8SPIClass8transferEh>
    SPI.transfer(0x03);  // x4 quadrature count mode, 4 byte counter mode is by
     2a0:	83 e0       	ldi	r24, 0x03	; 3
     2a2:	0e 94 18 01 	call	0x230	; 0x230 <_ZN8SPIClass8transferEh>
    // default on MDR1 register
    digitalWrite(slaveSelectEnc3, HIGH);  // Terminate SPI conversation
     2a6:	61 e0       	ldi	r22, 0x01	; 1
     2a8:	87 e0       	ldi	r24, 0x07	; 7
     2aa:	0c 94 d5 12 	jmp	0x25aa	; 0x25aa <digitalWrite>

000002ae <_Z11readEncoderi>:
}

long readEncoder(int encoder) {
     2ae:	cf 92       	push	r12
     2b0:	df 92       	push	r13
     2b2:	ef 92       	push	r14
     2b4:	ff 92       	push	r15
     2b6:	0f 93       	push	r16
     2b8:	1f 93       	push	r17
     2ba:	cf 93       	push	r28
     2bc:	df 93       	push	r29
    // Initialize temporary variables for SPI read
    unsigned int count_1, count_2, count_3, count_4;
    long count_value;

    // Read encoder 1
    if (encoder == 1) {
     2be:	81 30       	cpi	r24, 0x01	; 1
     2c0:	91 05       	cpc	r25, r1
     2c2:	d1 f4       	brne	.+52     	; 0x2f8 <_Z11readEncoderi+0x4a>
        // digitalWrite(slaveSelectEnc1,LOW);      // Begin SPI conversation
        PORTE &= 0xFB;                 // Clear PE2
     2c4:	72 98       	cbi	0x0e, 2	; 14
        SPI.transfer(0x60);            // Request count
     2c6:	80 e6       	ldi	r24, 0x60	; 96
     2c8:	0e 94 18 01 	call	0x230	; 0x230 <_ZN8SPIClass8transferEh>
        count_1 = SPI.transfer(0x00);  // Read highest order byte
     2cc:	80 e0       	ldi	r24, 0x00	; 0
     2ce:	0e 94 18 01 	call	0x230	; 0x230 <_ZN8SPIClass8transferEh>
     2d2:	c8 2e       	mov	r12, r24
     2d4:	d1 2c       	mov	r13, r1
        count_2 = SPI.transfer(0x00);
     2d6:	80 e0       	ldi	r24, 0x00	; 0
     2d8:	0e 94 18 01 	call	0x230	; 0x230 <_ZN8SPIClass8transferEh>
     2dc:	e8 2e       	mov	r14, r24
     2de:	f1 2c       	mov	r15, r1
        count_3 = SPI.transfer(0x00);
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	0e 94 18 01 	call	0x230	; 0x230 <_ZN8SPIClass8transferEh>
     2e6:	08 2f       	mov	r16, r24
     2e8:	10 e0       	ldi	r17, 0x00	; 0
        count_4 = SPI.transfer(0x00);  // Read lowest order byte
     2ea:	80 e0       	ldi	r24, 0x00	; 0
     2ec:	0e 94 18 01 	call	0x230	; 0x230 <_ZN8SPIClass8transferEh>
     2f0:	c8 2f       	mov	r28, r24
     2f2:	d0 e0       	ldi	r29, 0x00	; 0
        // digitalWrite(slaveSelectEnc1,HIGH);     // Terminate SPI conversation
        PORTE |= 0x04;  // Set PE2
     2f4:	72 9a       	sbi	0x0e, 2	; 14
     2f6:	42 c0       	rjmp	.+132    	; 0x37c <_Z11readEncoderi+0xce>
    }

    // Read encoder 2
    else if (encoder == 2) {
     2f8:	82 30       	cpi	r24, 0x02	; 2
     2fa:	91 05       	cpc	r25, r1
     2fc:	f1 f4       	brne	.+60     	; 0x33a <_Z11readEncoderi+0x8c>
        digitalWrite(slaveSelectEnc2, LOW);  // Begin SPI conversation
     2fe:	60 e0       	ldi	r22, 0x00	; 0
     300:	88 e0       	ldi	r24, 0x08	; 8
     302:	0e 94 d5 12 	call	0x25aa	; 0x25aa <digitalWrite>
        SPI.transfer(0x60);                  // Request count
     306:	80 e6       	ldi	r24, 0x60	; 96
     308:	0e 94 18 01 	call	0x230	; 0x230 <_ZN8SPIClass8transferEh>
        count_1 = SPI.transfer(0x00);        // Read highest order byte
     30c:	80 e0       	ldi	r24, 0x00	; 0
     30e:	0e 94 18 01 	call	0x230	; 0x230 <_ZN8SPIClass8transferEh>
     312:	c8 2e       	mov	r12, r24
     314:	d1 2c       	mov	r13, r1
        count_2 = SPI.transfer(0x00);
     316:	80 e0       	ldi	r24, 0x00	; 0
     318:	0e 94 18 01 	call	0x230	; 0x230 <_ZN8SPIClass8transferEh>
     31c:	e8 2e       	mov	r14, r24
     31e:	f1 2c       	mov	r15, r1
        count_3 = SPI.transfer(0x00);
     320:	80 e0       	ldi	r24, 0x00	; 0
     322:	0e 94 18 01 	call	0x230	; 0x230 <_ZN8SPIClass8transferEh>
     326:	08 2f       	mov	r16, r24
     328:	10 e0       	ldi	r17, 0x00	; 0
        count_4 = SPI.transfer(0x00);  // Read lowest order byte
     32a:	80 e0       	ldi	r24, 0x00	; 0
     32c:	0e 94 18 01 	call	0x230	; 0x230 <_ZN8SPIClass8transferEh>
     330:	c8 2f       	mov	r28, r24
     332:	d0 e0       	ldi	r29, 0x00	; 0
        digitalWrite(slaveSelectEnc2,
                     HIGH);  // Terminate SPI conversation
     334:	61 e0       	ldi	r22, 0x01	; 1
     336:	88 e0       	ldi	r24, 0x08	; 8
     338:	1f c0       	rjmp	.+62     	; 0x378 <_Z11readEncoderi+0xca>
    }

    else if (encoder == 3) {
     33a:	03 97       	sbiw	r24, 0x03	; 3
     33c:	f9 f4       	brne	.+62     	; 0x37c <_Z11readEncoderi+0xce>
        digitalWrite(slaveSelectEnc3, LOW);  // Begin SPI conversation
     33e:	60 e0       	ldi	r22, 0x00	; 0
     340:	87 e0       	ldi	r24, 0x07	; 7
     342:	0e 94 d5 12 	call	0x25aa	; 0x25aa <digitalWrite>
        SPI.transfer(0x60);                  // Request count
     346:	80 e6       	ldi	r24, 0x60	; 96
     348:	0e 94 18 01 	call	0x230	; 0x230 <_ZN8SPIClass8transferEh>
        count_1 = SPI.transfer(0x00);        // Read highest order byte
     34c:	80 e0       	ldi	r24, 0x00	; 0
     34e:	0e 94 18 01 	call	0x230	; 0x230 <_ZN8SPIClass8transferEh>
     352:	c8 2e       	mov	r12, r24
     354:	d1 2c       	mov	r13, r1
        count_2 = SPI.transfer(0x00);
     356:	80 e0       	ldi	r24, 0x00	; 0
     358:	0e 94 18 01 	call	0x230	; 0x230 <_ZN8SPIClass8transferEh>
     35c:	e8 2e       	mov	r14, r24
     35e:	f1 2c       	mov	r15, r1
        count_3 = SPI.transfer(0x00);
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	0e 94 18 01 	call	0x230	; 0x230 <_ZN8SPIClass8transferEh>
     366:	08 2f       	mov	r16, r24
     368:	10 e0       	ldi	r17, 0x00	; 0
        count_4 = SPI.transfer(0x00);  // Read lowest order byte
     36a:	80 e0       	ldi	r24, 0x00	; 0
     36c:	0e 94 18 01 	call	0x230	; 0x230 <_ZN8SPIClass8transferEh>
     370:	c8 2f       	mov	r28, r24
     372:	d0 e0       	ldi	r29, 0x00	; 0
        digitalWrite(slaveSelectEnc3,
                     HIGH);  // Terminate SPI conversation
     374:	61 e0       	ldi	r22, 0x01	; 1
     376:	87 e0       	ldi	r24, 0x07	; 7
     378:	0e 94 d5 12 	call	0x25aa	; 0x25aa <digitalWrite>
    }

    // Calculate encoder count
    count_value = (count_1 << 8) + count_2;
    count_value = (count_value << 8) + count_3;
     37c:	7c 2d       	mov	r23, r12
     37e:	66 27       	eor	r22, r22
     380:	6e 0d       	add	r22, r14
     382:	7f 1d       	adc	r23, r15
     384:	cb 01       	movw	r24, r22
     386:	a0 e0       	ldi	r26, 0x00	; 0
     388:	b0 e0       	ldi	r27, 0x00	; 0
     38a:	ba 2f       	mov	r27, r26
     38c:	a9 2f       	mov	r26, r25
     38e:	98 2f       	mov	r25, r24
     390:	88 27       	eor	r24, r24
    count_value = (count_value << 8) + count_4;
     392:	80 0f       	add	r24, r16
     394:	91 1f       	adc	r25, r17
     396:	a1 1d       	adc	r26, r1
     398:	b1 1d       	adc	r27, r1
     39a:	ba 2f       	mov	r27, r26
     39c:	a9 2f       	mov	r26, r25
     39e:	98 2f       	mov	r25, r24
     3a0:	88 27       	eor	r24, r24

    return count_value;
     3a2:	bc 01       	movw	r22, r24
     3a4:	cd 01       	movw	r24, r26
     3a6:	6c 0f       	add	r22, r28
     3a8:	7d 1f       	adc	r23, r29
     3aa:	81 1d       	adc	r24, r1
     3ac:	91 1d       	adc	r25, r1
}
     3ae:	df 91       	pop	r29
     3b0:	cf 91       	pop	r28
     3b2:	1f 91       	pop	r17
     3b4:	0f 91       	pop	r16
     3b6:	ff 90       	pop	r15
     3b8:	ef 90       	pop	r14
     3ba:	df 90       	pop	r13
     3bc:	cf 90       	pop	r12
     3be:	08 95       	ret

000003c0 <_Z17clearEncoderCountv>:

void clearEncoderCount() {
    // Set encoder1's data register to 0
    // digitalWrite(slaveSelectEnc1,LOW);      // Begin SPI conversation
    PORTE &= 0xFB;  // Clear PE2
     3c0:	72 98       	cbi	0x0e, 2	; 14
    // Write to DTR
    SPI.transfer(0x98);
     3c2:	88 e9       	ldi	r24, 0x98	; 152
     3c4:	0e 94 18 01 	call	0x230	; 0x230 <_ZN8SPIClass8transferEh>
    // Load data
    SPI.transfer(0x00);  // Highest order byte
     3c8:	80 e0       	ldi	r24, 0x00	; 0
     3ca:	0e 94 18 01 	call	0x230	; 0x230 <_ZN8SPIClass8transferEh>
    SPI.transfer(0x00);
     3ce:	80 e0       	ldi	r24, 0x00	; 0
     3d0:	0e 94 18 01 	call	0x230	; 0x230 <_ZN8SPIClass8transferEh>
    SPI.transfer(0x00);
     3d4:	80 e0       	ldi	r24, 0x00	; 0
     3d6:	0e 94 18 01 	call	0x230	; 0x230 <_ZN8SPIClass8transferEh>
    SPI.transfer(0x00);  // lowest order byte
     3da:	80 e0       	ldi	r24, 0x00	; 0
     3dc:	0e 94 18 01 	call	0x230	; 0x230 <_ZN8SPIClass8transferEh>
    // digitalWrite(slaveSelectEnc1,HIGH);     // Terminate SPI conversation
    PORTE |= 0x04;  // Set PE2
     3e0:	72 9a       	sbi	0x0e, 2	; 14

    delayMicroseconds(
        100);  // provides some breathing room between SPI conversations
     3e2:	84 e6       	ldi	r24, 0x64	; 100
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	0e 94 ca 11 	call	0x2394	; 0x2394 <delayMicroseconds>

    // Set encoder1's current data register to center
    // digitalWrite(slaveSelectEnc1,LOW);      // Begin SPI conversation
    PORTE &= 0xFB;  // Clear PE2
     3ea:	72 98       	cbi	0x0e, 2	; 14
    SPI.transfer(0xE0);
     3ec:	80 ee       	ldi	r24, 0xE0	; 224
     3ee:	0e 94 18 01 	call	0x230	; 0x230 <_ZN8SPIClass8transferEh>
    // digitalWrite(slaveSelectEnc1,HIGH);     // Terminate SPI conversation
    PORTE |= 0x04;  // Set PE2
     3f2:	72 9a       	sbi	0x0e, 2	; 14

    // Set encoder2's data register to 0
    digitalWrite(slaveSelectEnc2, LOW);  // Begin SPI conversation
     3f4:	60 e0       	ldi	r22, 0x00	; 0
     3f6:	88 e0       	ldi	r24, 0x08	; 8
     3f8:	0e 94 d5 12 	call	0x25aa	; 0x25aa <digitalWrite>
    // Write to DTR
    SPI.transfer(0x98);
     3fc:	88 e9       	ldi	r24, 0x98	; 152
     3fe:	0e 94 18 01 	call	0x230	; 0x230 <_ZN8SPIClass8transferEh>
    // Load data
    SPI.transfer(0x00);  // Highest order byte
     402:	80 e0       	ldi	r24, 0x00	; 0
     404:	0e 94 18 01 	call	0x230	; 0x230 <_ZN8SPIClass8transferEh>
    SPI.transfer(0x00);
     408:	80 e0       	ldi	r24, 0x00	; 0
     40a:	0e 94 18 01 	call	0x230	; 0x230 <_ZN8SPIClass8transferEh>
    SPI.transfer(0x00);
     40e:	80 e0       	ldi	r24, 0x00	; 0
     410:	0e 94 18 01 	call	0x230	; 0x230 <_ZN8SPIClass8transferEh>
    SPI.transfer(0x00);                   // lowest order byte
     414:	80 e0       	ldi	r24, 0x00	; 0
     416:	0e 94 18 01 	call	0x230	; 0x230 <_ZN8SPIClass8transferEh>
    digitalWrite(slaveSelectEnc2, HIGH);  // Terminate SPI conversation
     41a:	61 e0       	ldi	r22, 0x01	; 1
     41c:	88 e0       	ldi	r24, 0x08	; 8
     41e:	0e 94 d5 12 	call	0x25aa	; 0x25aa <digitalWrite>

    delayMicroseconds(
        100);  // provides some breathing room between SPI conversations
     422:	84 e6       	ldi	r24, 0x64	; 100
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	0e 94 ca 11 	call	0x2394	; 0x2394 <delayMicroseconds>

    // Set encoder2's current data register to center
    digitalWrite(slaveSelectEnc2, LOW);  // Begin SPI conversation
     42a:	60 e0       	ldi	r22, 0x00	; 0
     42c:	88 e0       	ldi	r24, 0x08	; 8
     42e:	0e 94 d5 12 	call	0x25aa	; 0x25aa <digitalWrite>
    SPI.transfer(0xE0);
     432:	80 ee       	ldi	r24, 0xE0	; 224
     434:	0e 94 18 01 	call	0x230	; 0x230 <_ZN8SPIClass8transferEh>
    digitalWrite(slaveSelectEnc2, HIGH);  // Terminate SPI conversation
     438:	61 e0       	ldi	r22, 0x01	; 1
     43a:	88 e0       	ldi	r24, 0x08	; 8
     43c:	0e 94 d5 12 	call	0x25aa	; 0x25aa <digitalWrite>

    // Set encoder2's data register to 0
    digitalWrite(slaveSelectEnc3, LOW);  // Begin SPI conversation
     440:	60 e0       	ldi	r22, 0x00	; 0
     442:	87 e0       	ldi	r24, 0x07	; 7
     444:	0e 94 d5 12 	call	0x25aa	; 0x25aa <digitalWrite>
    // Write to DTR
    SPI.transfer(0x98);
     448:	88 e9       	ldi	r24, 0x98	; 152
     44a:	0e 94 18 01 	call	0x230	; 0x230 <_ZN8SPIClass8transferEh>
    // Load data
    SPI.transfer(0x00);  // Highest order byte
     44e:	80 e0       	ldi	r24, 0x00	; 0
     450:	0e 94 18 01 	call	0x230	; 0x230 <_ZN8SPIClass8transferEh>
    SPI.transfer(0x00);
     454:	80 e0       	ldi	r24, 0x00	; 0
     456:	0e 94 18 01 	call	0x230	; 0x230 <_ZN8SPIClass8transferEh>
    SPI.transfer(0x00);
     45a:	80 e0       	ldi	r24, 0x00	; 0
     45c:	0e 94 18 01 	call	0x230	; 0x230 <_ZN8SPIClass8transferEh>
    SPI.transfer(0x00);                   // lowest order byte
     460:	80 e0       	ldi	r24, 0x00	; 0
     462:	0e 94 18 01 	call	0x230	; 0x230 <_ZN8SPIClass8transferEh>
    digitalWrite(slaveSelectEnc3, HIGH);  // Terminate SPI conversation
     466:	61 e0       	ldi	r22, 0x01	; 1
     468:	87 e0       	ldi	r24, 0x07	; 7
     46a:	0e 94 d5 12 	call	0x25aa	; 0x25aa <digitalWrite>

    delayMicroseconds(
        100);  // provides some breathing room between SPI conversations
     46e:	84 e6       	ldi	r24, 0x64	; 100
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	0e 94 ca 11 	call	0x2394	; 0x2394 <delayMicroseconds>

    // Set encoder2's current data register to center
    digitalWrite(slaveSelectEnc3, LOW);  // Begin SPI conversation
     476:	60 e0       	ldi	r22, 0x00	; 0
     478:	87 e0       	ldi	r24, 0x07	; 7
     47a:	0e 94 d5 12 	call	0x25aa	; 0x25aa <digitalWrite>
    SPI.transfer(0xE0);
     47e:	80 ee       	ldi	r24, 0xE0	; 224
     480:	0e 94 18 01 	call	0x230	; 0x230 <_ZN8SPIClass8transferEh>
    digitalWrite(slaveSelectEnc3, HIGH);  // Terminate SPI conversation
     484:	61 e0       	ldi	r22, 0x01	; 1
     486:	87 e0       	ldi	r24, 0x07	; 7
     488:	0c 94 d5 12 	jmp	0x25aa	; 0x25aa <digitalWrite>

0000048c <setup>:
    TCCR3B |= (1 << WGM12);  /* Fast PWM mode, pt.2 */
    TCCR3B |= (1 << CS30);   /* PWM Freq = F_CPU/1/256 */
    TCCR3A |= (1 << COM3A1); /* PWM output on OCR3A */
}

void setup() {
     48c:	0f 93       	push	r16
     48e:	1f 93       	push	r17
    Wire.begin(I2C_SLAVE_NUM);
     490:	68 e0       	ldi	r22, 0x08	; 8
     492:	70 e0       	ldi	r23, 0x00	; 0
     494:	85 e9       	ldi	r24, 0x95	; 149
     496:	93 e0       	ldi	r25, 0x03	; 3
     498:	0e 94 e0 17 	call	0x2fc0	; 0x2fc0 <_ZN7TwoWire5beginEi>
    Wire.onReceive(receiveMotorCommand);  // register event
     49c:	63 e0       	ldi	r22, 0x03	; 3
     49e:	78 e0       	ldi	r23, 0x08	; 8
     4a0:	85 e9       	ldi	r24, 0x95	; 149
     4a2:	93 e0       	ldi	r25, 0x03	; 3
     4a4:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <_ZN7TwoWire9onReceiveEPFviE>
    Wire.onRequest(requestEncoderData);
     4a8:	68 e6       	ldi	r22, 0x68	; 104
     4aa:	78 e0       	ldi	r23, 0x08	; 8
     4ac:	85 e9       	ldi	r24, 0x95	; 149
     4ae:	93 e0       	ldi	r25, 0x03	; 3
     4b0:	0e 94 e7 17 	call	0x2fce	; 0x2fce <_ZN7TwoWire9onRequestEPFvvE>
  public:
    inline HardwareSerial(
      volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
      volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
      volatile uint8_t *ucsrc, volatile uint8_t *udr);
    void begin(unsigned long baud) { begin(baud, SERIAL_8N1); }
     4b4:	26 e0       	ldi	r18, 0x06	; 6
     4b6:	40 e8       	ldi	r20, 0x80	; 128
     4b8:	55 e2       	ldi	r21, 0x25	; 37
     4ba:	60 e0       	ldi	r22, 0x00	; 0
     4bc:	70 e0       	ldi	r23, 0x00	; 0
     4be:	83 ee       	ldi	r24, 0xE3	; 227
     4c0:	92 e0       	ldi	r25, 0x02	; 2
     4c2:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <_ZN14HardwareSerial5beginEmh>
    Serial1.begin(9600);
    // cap.begin(0x5A);

    // Configure PORTB pin 0 as an input, equivalent to
    // CLEAR_FLAG(DDRB,bit(0));
    PORTB |= (1 << PORTB0);  // Activate pull-ups in PORTB pin 0, equivalent to
     4c6:	28 9a       	sbi	0x05, 0	; 5
    // SET_FLAG(PORTB,bit(0));

    pinMode(MOTOR_ONE_DIR_PIN, OUTPUT);
     4c8:	61 e0       	ldi	r22, 0x01	; 1
     4ca:	84 e0       	ldi	r24, 0x04	; 4
     4cc:	0e 94 99 12 	call	0x2532	; 0x2532 <pinMode>
    pinMode(MOTOR_ONE_PWM_PIN, OUTPUT);
     4d0:	61 e0       	ldi	r22, 0x01	; 1
     4d2:	85 e0       	ldi	r24, 0x05	; 5
     4d4:	0e 94 99 12 	call	0x2532	; 0x2532 <pinMode>
    pinMode(MOTOR_TWO_DIR_PIN, OUTPUT);
     4d8:	61 e0       	ldi	r22, 0x01	; 1
     4da:	86 e0       	ldi	r24, 0x06	; 6
     4dc:	0e 94 99 12 	call	0x2532	; 0x2532 <pinMode>
    pinMode(MOTOR_TWO_PWM_PIN, OUTPUT);
     4e0:	61 e0       	ldi	r22, 0x01	; 1
     4e2:	89 e0       	ldi	r24, 0x09	; 9
     4e4:	0e 94 99 12 	call	0x2532	; 0x2532 <pinMode>
    pinMode(MOTOR_THREE_DIR_PIN, OUTPUT);
     4e8:	61 e0       	ldi	r22, 0x01	; 1
     4ea:	8c e0       	ldi	r24, 0x0C	; 12
     4ec:	0e 94 99 12 	call	0x2532	; 0x2532 <pinMode>
    pinMode(MOTOR_THREE_PWM_PIN, OUTPUT);
     4f0:	61 e0       	ldi	r22, 0x01	; 1
     4f2:	8a e0       	ldi	r24, 0x0A	; 10
     4f4:	0e 94 99 12 	call	0x2532	; 0x2532 <pinMode>
    m1pid.SetMode(AUTOMATIC);
     4f8:	61 e0       	ldi	r22, 0x01	; 1
     4fa:	70 e0       	ldi	r23, 0x00	; 0
     4fc:	87 e7       	ldi	r24, 0x77	; 119
     4fe:	92 e0       	ldi	r25, 0x02	; 2
     500:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <_ZN3PID7SetModeEi>
    m1pid.SetSampleTime(2);
     504:	62 e0       	ldi	r22, 0x02	; 2
     506:	70 e0       	ldi	r23, 0x00	; 0
     508:	87 e7       	ldi	r24, 0x77	; 119
     50a:	92 e0       	ldi	r25, 0x02	; 2
     50c:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <_ZN3PID13SetSampleTimeEi>
    m1pid.SetOutputLimits(-255, 255);
     510:	00 e0       	ldi	r16, 0x00	; 0
     512:	10 e0       	ldi	r17, 0x00	; 0
     514:	2f e7       	ldi	r18, 0x7F	; 127
     516:	33 e4       	ldi	r19, 0x43	; 67
     518:	40 e0       	ldi	r20, 0x00	; 0
     51a:	50 e0       	ldi	r21, 0x00	; 0
     51c:	6f e7       	ldi	r22, 0x7F	; 127
     51e:	73 ec       	ldi	r23, 0xC3	; 195
     520:	87 e7       	ldi	r24, 0x77	; 119
     522:	92 e0       	ldi	r25, 0x02	; 2
     524:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <_ZN3PID15SetOutputLimitsEdd>
    m2pid.SetMode(AUTOMATIC);
     528:	61 e0       	ldi	r22, 0x01	; 1
     52a:	70 e0       	ldi	r23, 0x00	; 0
     52c:	80 e4       	ldi	r24, 0x40	; 64
     52e:	92 e0       	ldi	r25, 0x02	; 2
     530:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <_ZN3PID7SetModeEi>
    m2pid.SetSampleTime(2);
     534:	62 e0       	ldi	r22, 0x02	; 2
     536:	70 e0       	ldi	r23, 0x00	; 0
     538:	80 e4       	ldi	r24, 0x40	; 64
     53a:	92 e0       	ldi	r25, 0x02	; 2
     53c:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <_ZN3PID13SetSampleTimeEi>
    m2pid.SetOutputLimits(-255, 255);
     540:	00 e0       	ldi	r16, 0x00	; 0
     542:	10 e0       	ldi	r17, 0x00	; 0
     544:	2f e7       	ldi	r18, 0x7F	; 127
     546:	33 e4       	ldi	r19, 0x43	; 67
     548:	40 e0       	ldi	r20, 0x00	; 0
     54a:	50 e0       	ldi	r21, 0x00	; 0
     54c:	6f e7       	ldi	r22, 0x7F	; 127
     54e:	73 ec       	ldi	r23, 0xC3	; 195
     550:	80 e4       	ldi	r24, 0x40	; 64
     552:	92 e0       	ldi	r25, 0x02	; 2
     554:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <_ZN3PID15SetOutputLimitsEdd>
    m3pid.SetMode(AUTOMATIC);
     558:	61 e0       	ldi	r22, 0x01	; 1
     55a:	70 e0       	ldi	r23, 0x00	; 0
     55c:	89 e0       	ldi	r24, 0x09	; 9
     55e:	92 e0       	ldi	r25, 0x02	; 2
     560:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <_ZN3PID7SetModeEi>
    m3pid.SetSampleTime(2);
     564:	62 e0       	ldi	r22, 0x02	; 2
     566:	70 e0       	ldi	r23, 0x00	; 0
     568:	89 e0       	ldi	r24, 0x09	; 9
     56a:	92 e0       	ldi	r25, 0x02	; 2
     56c:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <_ZN3PID13SetSampleTimeEi>
    m3pid.SetOutputLimits(-255, 255);
     570:	00 e0       	ldi	r16, 0x00	; 0
     572:	10 e0       	ldi	r17, 0x00	; 0
     574:	2f e7       	ldi	r18, 0x7F	; 127
     576:	33 e4       	ldi	r19, 0x43	; 67
     578:	40 e0       	ldi	r20, 0x00	; 0
     57a:	50 e0       	ldi	r21, 0x00	; 0
     57c:	6f e7       	ldi	r22, 0x7F	; 127
     57e:	73 ec       	ldi	r23, 0xC3	; 195
     580:	89 e0       	ldi	r24, 0x09	; 9
     582:	92 e0       	ldi	r25, 0x02	; 2
     584:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <_ZN3PID15SetOutputLimitsEdd>
    initEncoders();
     588:	0e 94 1f 01 	call	0x23e	; 0x23e <_Z12initEncodersv>
    Serial1.println("Encoders Initialized...");
     58c:	67 e5       	ldi	r22, 0x57	; 87
     58e:	71 e0       	ldi	r23, 0x01	; 1
     590:	83 ee       	ldi	r24, 0xE3	; 227
     592:	92 e0       	ldi	r25, 0x02	; 2
     594:	0e 94 bf 0c 	call	0x197e	; 0x197e <_ZN5Print7printlnEPKc>
    clearEncoderCount();
     598:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <_Z17clearEncoderCountv>
    Serial1.println("Encoders Cleared...");
     59c:	6f e6       	ldi	r22, 0x6F	; 111
     59e:	71 e0       	ldi	r23, 0x01	; 1
     5a0:	83 ee       	ldi	r24, 0xE3	; 227
     5a2:	92 e0       	ldi	r25, 0x02	; 2
     5a4:	0e 94 bf 0c 	call	0x197e	; 0x197e <_ZN5Print7printlnEPKc>
static inline void initTimers(void) {
    // Init timers for motor PWM using Fast PWM mode, use this instead of
    // analog to get changeable PWM frequency

    // Timer 1 A,B
    TCCR1A |= (1 << WGM10);  /* Fast PWM mode, 8-bit */
     5a8:	e0 e8       	ldi	r30, 0x80	; 128
     5aa:	f0 e0       	ldi	r31, 0x00	; 0
     5ac:	80 81       	ld	r24, Z
     5ae:	81 60       	ori	r24, 0x01	; 1
     5b0:	80 83       	st	Z, r24
    TCCR1B |= (1 << WGM12);  /* Fast PWM mode, pt.2 */
     5b2:	a1 e8       	ldi	r26, 0x81	; 129
     5b4:	b0 e0       	ldi	r27, 0x00	; 0
     5b6:	8c 91       	ld	r24, X
     5b8:	88 60       	ori	r24, 0x08	; 8
     5ba:	8c 93       	st	X, r24
    TCCR1B |= (1 << CS10);   /* PWM Freq = F_CPU//256, F_CPU = 16,000,000 in our
     5bc:	8c 91       	ld	r24, X
     5be:	81 60       	ori	r24, 0x01	; 1
     5c0:	8c 93       	st	X, r24
                                case, this setup gives 7.8 kHz*/
    TCCR1A |= (1 << COM1A1); /* PWM output on OCR1A */
     5c2:	80 81       	ld	r24, Z
     5c4:	80 68       	ori	r24, 0x80	; 128
     5c6:	80 83       	st	Z, r24
    TCCR1A |= (1 << COM1B1); /* PWM output on OCR1B */
     5c8:	80 81       	ld	r24, Z
     5ca:	80 62       	ori	r24, 0x20	; 32
     5cc:	80 83       	st	Z, r24

    // Timer 3 A
    TCCR3A |= (1 << WGM10);  /* Fast PWM mode, 8-bit */
     5ce:	e0 e9       	ldi	r30, 0x90	; 144
     5d0:	f0 e0       	ldi	r31, 0x00	; 0
     5d2:	80 81       	ld	r24, Z
     5d4:	81 60       	ori	r24, 0x01	; 1
     5d6:	80 83       	st	Z, r24
    TCCR3B |= (1 << WGM12);  /* Fast PWM mode, pt.2 */
     5d8:	a1 e9       	ldi	r26, 0x91	; 145
     5da:	b0 e0       	ldi	r27, 0x00	; 0
     5dc:	8c 91       	ld	r24, X
     5de:	88 60       	ori	r24, 0x08	; 8
     5e0:	8c 93       	st	X, r24
    TCCR3B |= (1 << CS30);   /* PWM Freq = F_CPU/1/256 */
     5e2:	8c 91       	ld	r24, X
     5e4:	81 60       	ori	r24, 0x01	; 1
     5e6:	8c 93       	st	X, r24
    TCCR3A |= (1 << COM3A1); /* PWM output on OCR3A */
     5e8:	80 81       	ld	r24, Z
     5ea:	80 68       	ori	r24, 0x80	; 128
     5ec:	80 83       	st	Z, r24
    clearEncoderCount();
    Serial1.println("Encoders Cleared...");
    initTimers();
    // Serial1.println("Initiliazing module length");
    // initializeModule();
}
     5ee:	1f 91       	pop	r17
     5f0:	0f 91       	pop	r16
     5f2:	08 95       	ret

000005f4 <_Z16initializeModulev>:

void requestEncoderData() { Wire.write(encoderData, 6); }

void requestTouchState() { Wire.write(touch_state, 1); }

void initializeModule() {
     5f4:	2f 92       	push	r2
     5f6:	3f 92       	push	r3
     5f8:	4f 92       	push	r4
     5fa:	5f 92       	push	r5
     5fc:	6f 92       	push	r6
     5fe:	7f 92       	push	r7
     600:	8f 92       	push	r8
     602:	9f 92       	push	r9
     604:	af 92       	push	r10
     606:	bf 92       	push	r11
     608:	cf 92       	push	r12
     60a:	df 92       	push	r13
     60c:	ef 92       	push	r14
     60e:	ff 92       	push	r15
     610:	0f 93       	push	r16
     612:	1f 93       	push	r17
     614:	cf 93       	push	r28
     616:	df 93       	push	r29
    motor1_stall = false;
     618:	10 92 f6 01 	sts	0x01F6, r1	; 0x8001f6 <motor1_stall>
    motor2_stall = false;
     61c:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <motor2_stall>
    motor3_stall = false;
     620:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <motor3_stall>
    int threshold_value = 700;  // out of 1023
    int timeout_count = 0;
    digitalWrite(
        MOTOR_ONE_DIR_PIN,
        HIGH);  // for new motors LOW corresponds to clockwise rotation or
     624:	61 e0       	ldi	r22, 0x01	; 1
     626:	84 e0       	ldi	r24, 0x04	; 4
     628:	0e 94 d5 12 	call	0x25aa	; 0x25aa <digitalWrite>
    // negative values of encoder, we want to start with
    // positive value so set to HIGH for new motors
    digitalWrite(MOTOR_TWO_DIR_PIN, HIGH);
     62c:	61 e0       	ldi	r22, 0x01	; 1
     62e:	86 e0       	ldi	r24, 0x06	; 6
     630:	0e 94 d5 12 	call	0x25aa	; 0x25aa <digitalWrite>
    digitalWrite(MOTOR_THREE_DIR_PIN, HIGH);
     634:	61 e0       	ldi	r22, 0x01	; 1
     636:	8c e0       	ldi	r24, 0x0C	; 12
     638:	0e 94 d5 12 	call	0x25aa	; 0x25aa <digitalWrite>
     63c:	20 e1       	ldi	r18, 0x10	; 16
     63e:	22 2e       	mov	r2, r18
     640:	27 e2       	ldi	r18, 0x27	; 39
     642:	32 2e       	mov	r3, r18
        } else {
            motor3_stall = false;
        }

        if (motor1_stall == false) {
            OCR3A = 255;  // Send PWM duty cycle to register
     644:	0f ef       	ldi	r16, 0xFF	; 255
     646:	10 e0       	ldi	r17, 0x00	; 0
    // negative values of encoder, we want to start with
    // positive value so set to HIGH for new motors
    digitalWrite(MOTOR_TWO_DIR_PIN, HIGH);
    digitalWrite(MOTOR_THREE_DIR_PIN, HIGH);

    while (timeout_count < 10000 &&
     648:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <motor1_stall>
     64c:	88 23       	and	r24, r24
     64e:	09 f4       	brne	.+2      	; 0x652 <_Z16initializeModulev+0x5e>
     650:	59 c0       	rjmp	.+178    	; 0x704 <_Z16initializeModulev+0x110>
           (motor1_stall == false || motor2_stall == false ||
     652:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <motor2_stall>
     656:	88 23       	and	r24, r24
     658:	09 f4       	brne	.+2      	; 0x65c <_Z16initializeModulev+0x68>
     65a:	54 c0       	rjmp	.+168    	; 0x704 <_Z16initializeModulev+0x110>
     65c:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <motor3_stall>
     660:	88 23       	and	r24, r24
     662:	09 f4       	brne	.+2      	; 0x666 <_Z16initializeModulev+0x72>
     664:	4f c0       	rjmp	.+158    	; 0x704 <_Z16initializeModulev+0x110>
          Serial1.println(encoder[2]);
          Serial1.println(timeout_count);
        */
    }

    clearEncoderCount();
     666:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <_Z17clearEncoderCountv>
    Serial1.println("Encoders Cleared...");
     66a:	6f e6       	ldi	r22, 0x6F	; 111
     66c:	71 e0       	ldi	r23, 0x01	; 1
     66e:	83 ee       	ldi	r24, 0xE3	; 227
     670:	92 e0       	ldi	r25, 0x02	; 2
     672:	0e 94 bf 0c 	call	0x197e	; 0x197e <_ZN5Print7printlnEPKc>
    int loop_count = 0;
    des_length1 = -0.01 * encoder_ticks_per_rev * gear_ratio *
     676:	60 91 3d 01 	lds	r22, 0x013D	; 0x80013d <encoder_ticks_per_rev>
     67a:	70 91 3e 01 	lds	r23, 0x013E	; 0x80013e <encoder_ticks_per_rev+0x1>
     67e:	07 2e       	mov	r0, r23
     680:	00 0c       	add	r0, r0
     682:	88 0b       	sbc	r24, r24
     684:	99 0b       	sbc	r25, r25
     686:	0e 94 8c 09 	call	0x1318	; 0x1318 <__floatsisf>
     68a:	2a e0       	ldi	r18, 0x0A	; 10
     68c:	37 ed       	ldi	r19, 0xD7	; 215
     68e:	43 e2       	ldi	r20, 0x23	; 35
     690:	5c eb       	ldi	r21, 0xBC	; 188
     692:	0e 94 41 0a 	call	0x1482	; 0x1482 <__mulsf3>
     696:	20 91 3f 01 	lds	r18, 0x013F	; 0x80013f <gear_ratio>
     69a:	30 91 40 01 	lds	r19, 0x0140	; 0x800140 <gear_ratio+0x1>
     69e:	40 91 41 01 	lds	r20, 0x0141	; 0x800141 <gear_ratio+0x2>
     6a2:	50 91 42 01 	lds	r21, 0x0142	; 0x800142 <gear_ratio+0x3>
     6a6:	0e 94 41 0a 	call	0x1482	; 0x1482 <__mulsf3>
     6aa:	6b 01       	movw	r12, r22
     6ac:	7c 01       	movw	r14, r24
     6ae:	60 91 3b 01 	lds	r22, 0x013B	; 0x80013b <quad_count_mode_multiplier>
     6b2:	70 91 3c 01 	lds	r23, 0x013C	; 0x80013c <quad_count_mode_multiplier+0x1>
     6b6:	07 2e       	mov	r0, r23
     6b8:	00 0c       	add	r0, r0
     6ba:	88 0b       	sbc	r24, r24
     6bc:	99 0b       	sbc	r25, r25
     6be:	0e 94 8c 09 	call	0x1318	; 0x1318 <__floatsisf>
     6c2:	9b 01       	movw	r18, r22
     6c4:	ac 01       	movw	r20, r24
     6c6:	c7 01       	movw	r24, r14
     6c8:	b6 01       	movw	r22, r12
     6ca:	0e 94 41 0a 	call	0x1482	; 0x1482 <__mulsf3>
                  quad_count_mode_multiplier;  // plus for old motor,  -3.32
     6ce:	60 93 cf 02 	sts	0x02CF, r22	; 0x8002cf <des_length1>
     6d2:	70 93 d0 02 	sts	0x02D0, r23	; 0x8002d0 <des_length1+0x1>
     6d6:	80 93 d1 02 	sts	0x02D1, r24	; 0x8002d1 <des_length1+0x2>
     6da:	90 93 d2 02 	sts	0x02D2, r25	; 0x8002d2 <des_length1+0x3>
    // dividing the cable length (110 - 7 - 30) mm
    // by circumference of spool (pi*d) where d =
    // 7mm, 30 mm is the collapsed length of the
    // origami module, for longer module
    // (260-7-(pi*3.5))/(pi*7) = 10.5
    des_length2 = des_length1;
     6de:	60 93 cb 02 	sts	0x02CB, r22	; 0x8002cb <des_length2>
     6e2:	70 93 cc 02 	sts	0x02CC, r23	; 0x8002cc <des_length2+0x1>
     6e6:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <des_length2+0x2>
     6ea:	90 93 ce 02 	sts	0x02CE, r25	; 0x8002ce <des_length2+0x3>
    des_length3 = des_length1;
     6ee:	60 93 c7 02 	sts	0x02C7, r22	; 0x8002c7 <des_length3>
     6f2:	70 93 c8 02 	sts	0x02C8, r23	; 0x8002c8 <des_length3+0x1>
     6f6:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <des_length3+0x2>
     6fa:	90 93 ca 02 	sts	0x02CA, r25	; 0x8002ca <des_length3+0x3>
     6fe:	00 ed       	ldi	r16, 0xD0	; 208
     700:	17 e0       	ldi	r17, 0x07	; 7
     702:	26 c1       	rjmp	.+588    	; 0x950 <_Z16initializeModulev+0x35c>
    while (timeout_count < 10000 &&
           (motor1_stall == false || motor2_stall == false ||
            motor3_stall == false)) {
        ////// MOTOR CURRENT READING
        // for motor1 (A0), motor2 (A1), motor3 (A2)
        motor1_cur_val = analogRead(A0);
     704:	82 e1       	ldi	r24, 0x12	; 18
     706:	0e 94 2b 12 	call	0x2456	; 0x2456 <analogRead>
     70a:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <motor1_cur_val+0x1>
     70e:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <motor1_cur_val>
        motor2_cur_val = analogRead(A1);
     712:	83 e1       	ldi	r24, 0x13	; 19
     714:	0e 94 2b 12 	call	0x2456	; 0x2456 <analogRead>
     718:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <motor2_cur_val+0x1>
     71c:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <motor2_cur_val>
        motor3_cur_val = analogRead(A2);
     720:	84 e1       	ldi	r24, 0x14	; 20
     722:	0e 94 2b 12 	call	0x2456	; 0x2456 <analogRead>
     726:	ec 01       	movw	r28, r24
     728:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <motor3_cur_val+0x1>
     72c:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <motor3_cur_val>

        m1_cur_val = alpha * motor1_cur_val + (1 - alpha) * m1_cur_val;
     730:	c0 90 02 01 	lds	r12, 0x0102	; 0x800102 <alpha>
     734:	d0 90 03 01 	lds	r13, 0x0103	; 0x800103 <alpha+0x1>
     738:	e0 90 04 01 	lds	r14, 0x0104	; 0x800104 <alpha+0x2>
     73c:	f0 90 05 01 	lds	r15, 0x0105	; 0x800105 <alpha+0x3>
     740:	a7 01       	movw	r20, r14
     742:	96 01       	movw	r18, r12
     744:	60 e0       	ldi	r22, 0x00	; 0
     746:	70 e0       	ldi	r23, 0x00	; 0
     748:	80 e8       	ldi	r24, 0x80	; 128
     74a:	9f e3       	ldi	r25, 0x3F	; 63
     74c:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__subsf3>
     750:	4b 01       	movw	r8, r22
     752:	5c 01       	movw	r10, r24
     754:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <motor1_cur_val>
     758:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <motor1_cur_val+0x1>
     75c:	07 2e       	mov	r0, r23
     75e:	00 0c       	add	r0, r0
     760:	88 0b       	sbc	r24, r24
     762:	99 0b       	sbc	r25, r25
     764:	0e 94 8c 09 	call	0x1318	; 0x1318 <__floatsisf>
     768:	a7 01       	movw	r20, r14
     76a:	96 01       	movw	r18, r12
     76c:	0e 94 41 0a 	call	0x1482	; 0x1482 <__mulsf3>
     770:	2b 01       	movw	r4, r22
     772:	3c 01       	movw	r6, r24
     774:	20 91 ff 01 	lds	r18, 0x01FF	; 0x8001ff <m1_cur_val>
     778:	30 91 00 02 	lds	r19, 0x0200	; 0x800200 <m1_cur_val+0x1>
     77c:	40 91 01 02 	lds	r20, 0x0201	; 0x800201 <m1_cur_val+0x2>
     780:	50 91 02 02 	lds	r21, 0x0202	; 0x800202 <m1_cur_val+0x3>
     784:	c5 01       	movw	r24, r10
     786:	b4 01       	movw	r22, r8
     788:	0e 94 41 0a 	call	0x1482	; 0x1482 <__mulsf3>
     78c:	9b 01       	movw	r18, r22
     78e:	ac 01       	movw	r20, r24
     790:	c3 01       	movw	r24, r6
     792:	b2 01       	movw	r22, r4
     794:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__addsf3>
     798:	60 93 ff 01 	sts	0x01FF, r22	; 0x8001ff <m1_cur_val>
     79c:	70 93 00 02 	sts	0x0200, r23	; 0x800200 <m1_cur_val+0x1>
     7a0:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <m1_cur_val+0x2>
     7a4:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <m1_cur_val+0x3>
        m2_cur_val = alpha * motor2_cur_val + (1 - alpha) * m2_cur_val;
     7a8:	60 91 05 02 	lds	r22, 0x0205	; 0x800205 <motor2_cur_val>
     7ac:	70 91 06 02 	lds	r23, 0x0206	; 0x800206 <motor2_cur_val+0x1>
     7b0:	07 2e       	mov	r0, r23
     7b2:	00 0c       	add	r0, r0
     7b4:	88 0b       	sbc	r24, r24
     7b6:	99 0b       	sbc	r25, r25
     7b8:	0e 94 8c 09 	call	0x1318	; 0x1318 <__floatsisf>
     7bc:	a7 01       	movw	r20, r14
     7be:	96 01       	movw	r18, r12
     7c0:	0e 94 41 0a 	call	0x1482	; 0x1482 <__mulsf3>
     7c4:	2b 01       	movw	r4, r22
     7c6:	3c 01       	movw	r6, r24
     7c8:	20 91 fb 01 	lds	r18, 0x01FB	; 0x8001fb <m2_cur_val>
     7cc:	30 91 fc 01 	lds	r19, 0x01FC	; 0x8001fc <m2_cur_val+0x1>
     7d0:	40 91 fd 01 	lds	r20, 0x01FD	; 0x8001fd <m2_cur_val+0x2>
     7d4:	50 91 fe 01 	lds	r21, 0x01FE	; 0x8001fe <m2_cur_val+0x3>
     7d8:	c5 01       	movw	r24, r10
     7da:	b4 01       	movw	r22, r8
     7dc:	0e 94 41 0a 	call	0x1482	; 0x1482 <__mulsf3>
     7e0:	9b 01       	movw	r18, r22
     7e2:	ac 01       	movw	r20, r24
     7e4:	c3 01       	movw	r24, r6
     7e6:	b2 01       	movw	r22, r4
     7e8:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__addsf3>
     7ec:	60 93 fb 01 	sts	0x01FB, r22	; 0x8001fb <m2_cur_val>
     7f0:	70 93 fc 01 	sts	0x01FC, r23	; 0x8001fc <m2_cur_val+0x1>
     7f4:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <m2_cur_val+0x2>
     7f8:	90 93 fe 01 	sts	0x01FE, r25	; 0x8001fe <m2_cur_val+0x3>
        m3_cur_val = alpha * motor3_cur_val + (1 - alpha) * m3_cur_val;
     7fc:	20 91 f7 01 	lds	r18, 0x01F7	; 0x8001f7 <m3_cur_val>
     800:	30 91 f8 01 	lds	r19, 0x01F8	; 0x8001f8 <m3_cur_val+0x1>
     804:	40 91 f9 01 	lds	r20, 0x01F9	; 0x8001f9 <m3_cur_val+0x2>
     808:	50 91 fa 01 	lds	r21, 0x01FA	; 0x8001fa <m3_cur_val+0x3>
     80c:	c5 01       	movw	r24, r10
     80e:	b4 01       	movw	r22, r8
     810:	0e 94 41 0a 	call	0x1482	; 0x1482 <__mulsf3>
     814:	4b 01       	movw	r8, r22
     816:	5c 01       	movw	r10, r24
     818:	be 01       	movw	r22, r28
     81a:	dd 0f       	add	r29, r29
     81c:	88 0b       	sbc	r24, r24
     81e:	99 0b       	sbc	r25, r25
     820:	0e 94 8c 09 	call	0x1318	; 0x1318 <__floatsisf>
     824:	a7 01       	movw	r20, r14
     826:	96 01       	movw	r18, r12
     828:	0e 94 41 0a 	call	0x1482	; 0x1482 <__mulsf3>
     82c:	9b 01       	movw	r18, r22
     82e:	ac 01       	movw	r20, r24
     830:	c5 01       	movw	r24, r10
     832:	b4 01       	movw	r22, r8
     834:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__addsf3>
     838:	60 93 f7 01 	sts	0x01F7, r22	; 0x8001f7 <m3_cur_val>
     83c:	70 93 f8 01 	sts	0x01F8, r23	; 0x8001f8 <m3_cur_val+0x1>
     840:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <m3_cur_val+0x2>
     844:	90 93 fa 01 	sts	0x01FA, r25	; 0x8001fa <m3_cur_val+0x3>
     848:	9f ea       	ldi	r25, 0xAF	; 175
     84a:	e9 2e       	mov	r14, r25
     84c:	92 e0       	ldi	r25, 0x02	; 2
     84e:	f9 2e       	mov	r15, r25

        for (int i = 0; i < 3; i++) {
     850:	c0 e0       	ldi	r28, 0x00	; 0
     852:	d0 e0       	ldi	r29, 0x00	; 0
            encoder[i] = (double)readEncoder(i + 1);
     854:	21 96       	adiw	r28, 0x01	; 1
     856:	ce 01       	movw	r24, r28
     858:	0e 94 57 01 	call	0x2ae	; 0x2ae <_Z11readEncoderi>
     85c:	0e 94 8c 09 	call	0x1318	; 0x1318 <__floatsisf>
     860:	f7 01       	movw	r30, r14
     862:	61 93       	st	Z+, r22
     864:	71 93       	st	Z+, r23
     866:	81 93       	st	Z+, r24
     868:	91 93       	st	Z+, r25
     86a:	7f 01       	movw	r14, r30

        m1_cur_val = alpha * motor1_cur_val + (1 - alpha) * m1_cur_val;
        m2_cur_val = alpha * motor2_cur_val + (1 - alpha) * m2_cur_val;
        m3_cur_val = alpha * motor3_cur_val + (1 - alpha) * m3_cur_val;

        for (int i = 0; i < 3; i++) {
     86c:	c3 30       	cpi	r28, 0x03	; 3
     86e:	d1 05       	cpc	r29, r1
     870:	89 f7       	brne	.-30     	; 0x854 <_Z16initializeModulev+0x260>
            encoder[i] = (double)readEncoder(i + 1);
        }

        if (m1_cur_val > threshold_value) {
     872:	20 e0       	ldi	r18, 0x00	; 0
     874:	30 e0       	ldi	r19, 0x00	; 0
     876:	4f e2       	ldi	r20, 0x2F	; 47
     878:	54 e4       	ldi	r21, 0x44	; 68
     87a:	60 91 ff 01 	lds	r22, 0x01FF	; 0x8001ff <m1_cur_val>
     87e:	70 91 00 02 	lds	r23, 0x0200	; 0x800200 <m1_cur_val+0x1>
     882:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <m1_cur_val+0x2>
     886:	90 91 02 02 	lds	r25, 0x0202	; 0x800202 <m1_cur_val+0x3>
     88a:	0e 94 3c 0a 	call	0x1478	; 0x1478 <__gesf2>
     88e:	18 16       	cp	r1, r24
     890:	24 f4       	brge	.+8      	; 0x89a <_Z16initializeModulev+0x2a6>
            motor1_stall = true;
     892:	f1 e0       	ldi	r31, 0x01	; 1
     894:	f0 93 f6 01 	sts	0x01F6, r31	; 0x8001f6 <motor1_stall>
     898:	02 c0       	rjmp	.+4      	; 0x89e <_Z16initializeModulev+0x2aa>
        } else {
            motor1_stall = false;
     89a:	10 92 f6 01 	sts	0x01F6, r1	; 0x8001f6 <motor1_stall>
        }

        if (m2_cur_val > threshold_value) {
     89e:	20 e0       	ldi	r18, 0x00	; 0
     8a0:	30 e0       	ldi	r19, 0x00	; 0
     8a2:	4f e2       	ldi	r20, 0x2F	; 47
     8a4:	54 e4       	ldi	r21, 0x44	; 68
     8a6:	60 91 fb 01 	lds	r22, 0x01FB	; 0x8001fb <m2_cur_val>
     8aa:	70 91 fc 01 	lds	r23, 0x01FC	; 0x8001fc <m2_cur_val+0x1>
     8ae:	80 91 fd 01 	lds	r24, 0x01FD	; 0x8001fd <m2_cur_val+0x2>
     8b2:	90 91 fe 01 	lds	r25, 0x01FE	; 0x8001fe <m2_cur_val+0x3>
     8b6:	0e 94 3c 0a 	call	0x1478	; 0x1478 <__gesf2>
     8ba:	18 16       	cp	r1, r24
     8bc:	24 f4       	brge	.+8      	; 0x8c6 <_Z16initializeModulev+0x2d2>
            motor2_stall = true;
     8be:	81 e0       	ldi	r24, 0x01	; 1
     8c0:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <motor2_stall>
     8c4:	02 c0       	rjmp	.+4      	; 0x8ca <_Z16initializeModulev+0x2d6>
        } else {
            motor2_stall = false;
     8c6:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <motor2_stall>
        }

        if (m3_cur_val > threshold_value) {
     8ca:	20 e0       	ldi	r18, 0x00	; 0
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	4f e2       	ldi	r20, 0x2F	; 47
     8d0:	54 e4       	ldi	r21, 0x44	; 68
     8d2:	60 91 f7 01 	lds	r22, 0x01F7	; 0x8001f7 <m3_cur_val>
     8d6:	70 91 f8 01 	lds	r23, 0x01F8	; 0x8001f8 <m3_cur_val+0x1>
     8da:	80 91 f9 01 	lds	r24, 0x01F9	; 0x8001f9 <m3_cur_val+0x2>
     8de:	90 91 fa 01 	lds	r25, 0x01FA	; 0x8001fa <m3_cur_val+0x3>
     8e2:	0e 94 3c 0a 	call	0x1478	; 0x1478 <__gesf2>
     8e6:	18 16       	cp	r1, r24
     8e8:	24 f4       	brge	.+8      	; 0x8f2 <_Z16initializeModulev+0x2fe>
            motor3_stall = true;
     8ea:	e1 e0       	ldi	r30, 0x01	; 1
     8ec:	e0 93 f4 01 	sts	0x01F4, r30	; 0x8001f4 <motor3_stall>
     8f0:	02 c0       	rjmp	.+4      	; 0x8f6 <_Z16initializeModulev+0x302>
        } else {
            motor3_stall = false;
     8f2:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <motor3_stall>
        }

        if (motor1_stall == false) {
     8f6:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <motor1_stall>
     8fa:	81 11       	cpse	r24, r1
     8fc:	05 c0       	rjmp	.+10     	; 0x908 <_Z16initializeModulev+0x314>
            OCR3A = 255;  // Send PWM duty cycle to register
     8fe:	10 93 99 00 	sts	0x0099, r17	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     902:	00 93 98 00 	sts	0x0098, r16	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
     906:	04 c0       	rjmp	.+8      	; 0x910 <_Z16initializeModulev+0x31c>
                          // associate with pin connected to motor 1
        } else if (motor1_stall = true) {
            OCR3A = 0;  // Send PWM duty cycle to register associate
     908:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     90c:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
                        // with pin connected to motor 1
        }

        if (motor2_stall == false) {
     910:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <motor2_stall>
     914:	81 11       	cpse	r24, r1
     916:	05 c0       	rjmp	.+10     	; 0x922 <_Z16initializeModulev+0x32e>
            OCR1A = 255;  // Send PWM duty cycle to register
     918:	10 93 89 00 	sts	0x0089, r17	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     91c:	00 93 88 00 	sts	0x0088, r16	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     920:	04 c0       	rjmp	.+8      	; 0x92a <_Z16initializeModulev+0x336>
                          // associate with pin connected to motor 2
        } else if (motor2_stall = true) {
            OCR1A = 0;  // Send PWM duty cycle to register associate
     922:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     926:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
                        // with pin connected to motor 2
        }

        if (motor3_stall == false) {
     92a:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <motor3_stall>
     92e:	81 11       	cpse	r24, r1
     930:	05 c0       	rjmp	.+10     	; 0x93c <_Z16initializeModulev+0x348>
            OCR1B = 255;  // Send PWM duty cycle to register
     932:	10 93 8b 00 	sts	0x008B, r17	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     936:	00 93 8a 00 	sts	0x008A, r16	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     93a:	04 c0       	rjmp	.+8      	; 0x944 <_Z16initializeModulev+0x350>
                          // associate with pin connected to motor 3
        } else if (motor3_stall = true) {
            OCR1B = 0;  // Send PWM duty cycle to register associate
     93c:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     940:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
     944:	f1 e0       	ldi	r31, 0x01	; 1
     946:	2f 1a       	sub	r2, r31
     948:	31 08       	sbc	r3, r1
    // negative values of encoder, we want to start with
    // positive value so set to HIGH for new motors
    digitalWrite(MOTOR_TWO_DIR_PIN, HIGH);
    digitalWrite(MOTOR_THREE_DIR_PIN, HIGH);

    while (timeout_count < 10000 &&
     94a:	09 f0       	breq	.+2      	; 0x94e <_Z16initializeModulev+0x35a>
     94c:	7d ce       	rjmp	.-774    	; 0x648 <_Z16initializeModulev+0x54>
     94e:	8b ce       	rjmp	.-746    	; 0x666 <_Z16initializeModulev+0x72>
     950:	8f ea       	ldi	r24, 0xAF	; 175
     952:	e8 2e       	mov	r14, r24
     954:	82 e0       	ldi	r24, 0x02	; 2
     956:	f8 2e       	mov	r15, r24
    // by circumference of spool (pi*d) where d =
    // 7mm, 30 mm is the collapsed length of the
    // origami module, for longer module
    // (260-7-(pi*3.5))/(pi*7) = 10.5
    des_length2 = des_length1;
    des_length3 = des_length1;
     958:	c0 e0       	ldi	r28, 0x00	; 0
     95a:	d0 e0       	ldi	r29, 0x00	; 0

    while (loop_count < 2000) {
        for (int i = 0; i < 3; i++) {
            encoder[i] = (double)readEncoder(i + 1);
     95c:	21 96       	adiw	r28, 0x01	; 1
     95e:	ce 01       	movw	r24, r28
     960:	0e 94 57 01 	call	0x2ae	; 0x2ae <_Z11readEncoderi>
     964:	0e 94 8c 09 	call	0x1318	; 0x1318 <__floatsisf>
     968:	f7 01       	movw	r30, r14
     96a:	61 93       	st	Z+, r22
     96c:	71 93       	st	Z+, r23
     96e:	81 93       	st	Z+, r24
     970:	91 93       	st	Z+, r25
     972:	7f 01       	movw	r14, r30
    // (260-7-(pi*3.5))/(pi*7) = 10.5
    des_length2 = des_length1;
    des_length3 = des_length1;

    while (loop_count < 2000) {
        for (int i = 0; i < 3; i++) {
     974:	c3 30       	cpi	r28, 0x03	; 3
     976:	d1 05       	cpc	r29, r1
     978:	89 f7       	brne	.-30     	; 0x95c <_Z16initializeModulev+0x368>
            encoder[i] = (double)readEncoder(i + 1);
        }

        m1pid.Compute();
     97a:	87 e7       	ldi	r24, 0x77	; 119
     97c:	92 e0       	ldi	r25, 0x02	; 2
     97e:	0e 94 04 13 	call	0x2608	; 0x2608 <_ZN3PID7ComputeEv>
        m2pid.Compute();
     982:	80 e4       	ldi	r24, 0x40	; 64
     984:	92 e0       	ldi	r25, 0x02	; 2
     986:	0e 94 04 13 	call	0x2608	; 0x2608 <_ZN3PID7ComputeEv>
        m3pid.Compute();
     98a:	89 e0       	ldi	r24, 0x09	; 9
     98c:	92 e0       	ldi	r25, 0x02	; 2
     98e:	0e 94 04 13 	call	0x2608	; 0x2608 <_ZN3PID7ComputeEv>

        if (mo < 0) {
     992:	20 e0       	ldi	r18, 0x00	; 0
     994:	30 e0       	ldi	r19, 0x00	; 0
     996:	a9 01       	movw	r20, r18
     998:	60 91 db 02 	lds	r22, 0x02DB	; 0x8002db <mo>
     99c:	70 91 dc 02 	lds	r23, 0x02DC	; 0x8002dc <mo+0x1>
     9a0:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <mo+0x2>
     9a4:	90 91 de 02 	lds	r25, 0x02DE	; 0x8002de <mo+0x3>
     9a8:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__cmpsf2>
     9ac:	87 ff       	sbrs	r24, 7
     9ae:	02 c0       	rjmp	.+4      	; 0x9b4 <_Z16initializeModulev+0x3c0>
            digitalWrite(MOTOR_ONE_DIR_PIN,
                         LOW);  // for new motors this should be LOW
     9b0:	60 e0       	ldi	r22, 0x00	; 0
     9b2:	01 c0       	rjmp	.+2      	; 0x9b6 <_Z16initializeModulev+0x3c2>
        } else {
            digitalWrite(MOTOR_ONE_DIR_PIN, HIGH);
     9b4:	61 e0       	ldi	r22, 0x01	; 1
     9b6:	84 e0       	ldi	r24, 0x04	; 4
     9b8:	0e 94 d5 12 	call	0x25aa	; 0x25aa <digitalWrite>
        }

        if (mo2 < 0) {
     9bc:	20 e0       	ldi	r18, 0x00	; 0
     9be:	30 e0       	ldi	r19, 0x00	; 0
     9c0:	a9 01       	movw	r20, r18
     9c2:	60 91 d7 02 	lds	r22, 0x02D7	; 0x8002d7 <mo2>
     9c6:	70 91 d8 02 	lds	r23, 0x02D8	; 0x8002d8 <mo2+0x1>
     9ca:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <mo2+0x2>
     9ce:	90 91 da 02 	lds	r25, 0x02DA	; 0x8002da <mo2+0x3>
     9d2:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__cmpsf2>
     9d6:	87 ff       	sbrs	r24, 7
     9d8:	02 c0       	rjmp	.+4      	; 0x9de <_Z16initializeModulev+0x3ea>
            digitalWrite(MOTOR_TWO_DIR_PIN, LOW);
     9da:	60 e0       	ldi	r22, 0x00	; 0
     9dc:	01 c0       	rjmp	.+2      	; 0x9e0 <_Z16initializeModulev+0x3ec>
        } else {
            digitalWrite(MOTOR_TWO_DIR_PIN, HIGH);
     9de:	61 e0       	ldi	r22, 0x01	; 1
     9e0:	86 e0       	ldi	r24, 0x06	; 6
     9e2:	0e 94 d5 12 	call	0x25aa	; 0x25aa <digitalWrite>
        }

        if (mo3 < 0) {
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	a9 01       	movw	r20, r18
     9ec:	60 91 d3 02 	lds	r22, 0x02D3	; 0x8002d3 <mo3>
     9f0:	70 91 d4 02 	lds	r23, 0x02D4	; 0x8002d4 <mo3+0x1>
     9f4:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <mo3+0x2>
     9f8:	90 91 d6 02 	lds	r25, 0x02D6	; 0x8002d6 <mo3+0x3>
     9fc:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__cmpsf2>
     a00:	87 ff       	sbrs	r24, 7
     a02:	02 c0       	rjmp	.+4      	; 0xa08 <_Z16initializeModulev+0x414>
            digitalWrite(MOTOR_THREE_DIR_PIN, LOW);
     a04:	60 e0       	ldi	r22, 0x00	; 0
     a06:	01 c0       	rjmp	.+2      	; 0xa0a <_Z16initializeModulev+0x416>
        } else {
            digitalWrite(MOTOR_THREE_DIR_PIN, HIGH);
     a08:	61 e0       	ldi	r22, 0x01	; 1
     a0a:	8c e0       	ldi	r24, 0x0C	; 12
     a0c:	0e 94 d5 12 	call	0x25aa	; 0x25aa <digitalWrite>
     a10:	01 50       	subi	r16, 0x01	; 1
     a12:	11 09       	sbc	r17, r1
    // origami module, for longer module
    // (260-7-(pi*3.5))/(pi*7) = 10.5
    des_length2 = des_length1;
    des_length3 = des_length1;

    while (loop_count < 2000) {
     a14:	09 f0       	breq	.+2      	; 0xa18 <_Z16initializeModulev+0x424>
     a16:	9c cf       	rjmp	.-200    	; 0x950 <_Z16initializeModulev+0x35c>
        // Serial1.print("\t");
        // Serial1.print(encoder[1]);
        // Serial1.print("\t");
        // Serial1.println(encoder[2]);
    }
    clearEncoderCount();
     a18:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <_Z17clearEncoderCountv>
    Serial1.println("Module initialized");
     a1c:	63 e8       	ldi	r22, 0x83	; 131
     a1e:	71 e0       	ldi	r23, 0x01	; 1
     a20:	83 ee       	ldi	r24, 0xE3	; 227
     a22:	92 e0       	ldi	r25, 0x02	; 2
     a24:	0e 94 bf 0c 	call	0x197e	; 0x197e <_ZN5Print7printlnEPKc>
    */

    // FIND ENCODER OFFSET VALUE TO COMPENSATE FOR INTIAL STATE OF MODULE
    // BEING FULLY COMPRESSED
    encoder_offset = (max_module_length - min_module_length) /
                     (shaft_diameter * pi) *
     a28:	20 91 2f 01 	lds	r18, 0x012F	; 0x80012f <min_module_length>
     a2c:	30 91 30 01 	lds	r19, 0x0130	; 0x800130 <min_module_length+0x1>
     a30:	40 91 31 01 	lds	r20, 0x0131	; 0x800131 <min_module_length+0x2>
     a34:	50 91 32 01 	lds	r21, 0x0132	; 0x800132 <min_module_length+0x3>
     a38:	60 91 33 01 	lds	r22, 0x0133	; 0x800133 <max_module_length>
     a3c:	70 91 34 01 	lds	r23, 0x0134	; 0x800134 <max_module_length+0x1>
     a40:	80 91 35 01 	lds	r24, 0x0135	; 0x800135 <max_module_length+0x2>
     a44:	90 91 36 01 	lds	r25, 0x0136	; 0x800136 <max_module_length+0x3>
     a48:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__subsf3>
     a4c:	6b 01       	movw	r12, r22
     a4e:	7c 01       	movw	r14, r24
     a50:	20 91 2b 01 	lds	r18, 0x012B	; 0x80012b <pi>
     a54:	30 91 2c 01 	lds	r19, 0x012C	; 0x80012c <pi+0x1>
     a58:	40 91 2d 01 	lds	r20, 0x012D	; 0x80012d <pi+0x2>
     a5c:	50 91 2e 01 	lds	r21, 0x012E	; 0x80012e <pi+0x3>
     a60:	60 91 37 01 	lds	r22, 0x0137	; 0x800137 <shaft_diameter>
     a64:	70 91 38 01 	lds	r23, 0x0138	; 0x800138 <shaft_diameter+0x1>
     a68:	80 91 39 01 	lds	r24, 0x0139	; 0x800139 <shaft_diameter+0x2>
     a6c:	90 91 3a 01 	lds	r25, 0x013A	; 0x80013a <shaft_diameter+0x3>
     a70:	0e 94 41 0a 	call	0x1482	; 0x1482 <__mulsf3>
     a74:	9b 01       	movw	r18, r22
     a76:	ac 01       	movw	r20, r24
     a78:	c7 01       	movw	r24, r14
     a7a:	b6 01       	movw	r22, r12
     a7c:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__divsf3>
     a80:	6b 01       	movw	r12, r22
     a82:	7c 01       	movw	r14, r24
     a84:	60 91 3d 01 	lds	r22, 0x013D	; 0x80013d <encoder_ticks_per_rev>
     a88:	70 91 3e 01 	lds	r23, 0x013E	; 0x80013e <encoder_ticks_per_rev+0x1>
     a8c:	07 2e       	mov	r0, r23
     a8e:	00 0c       	add	r0, r0
     a90:	88 0b       	sbc	r24, r24
     a92:	99 0b       	sbc	r25, r25
     a94:	0e 94 8c 09 	call	0x1318	; 0x1318 <__floatsisf>
     a98:	20 91 3f 01 	lds	r18, 0x013F	; 0x80013f <gear_ratio>
     a9c:	30 91 40 01 	lds	r19, 0x0140	; 0x800140 <gear_ratio+0x1>
     aa0:	40 91 41 01 	lds	r20, 0x0141	; 0x800141 <gear_ratio+0x2>
     aa4:	50 91 42 01 	lds	r21, 0x0142	; 0x800142 <gear_ratio+0x3>
     aa8:	0e 94 41 0a 	call	0x1482	; 0x1482 <__mulsf3>
     aac:	4b 01       	movw	r8, r22
     aae:	5c 01       	movw	r10, r24
     ab0:	60 91 3b 01 	lds	r22, 0x013B	; 0x80013b <quad_count_mode_multiplier>
     ab4:	70 91 3c 01 	lds	r23, 0x013C	; 0x80013c <quad_count_mode_multiplier+0x1>
     ab8:	07 2e       	mov	r0, r23
     aba:	00 0c       	add	r0, r0
     abc:	88 0b       	sbc	r24, r24
     abe:	99 0b       	sbc	r25, r25
     ac0:	0e 94 8c 09 	call	0x1318	; 0x1318 <__floatsisf>
     ac4:	9b 01       	movw	r18, r22
     ac6:	ac 01       	movw	r20, r24
     ac8:	c5 01       	movw	r24, r10
     aca:	b4 01       	movw	r22, r8
     acc:	0e 94 41 0a 	call	0x1482	; 0x1482 <__mulsf3>
     ad0:	9b 01       	movw	r18, r22
     ad2:	ac 01       	movw	r20, r24
     ad4:	c7 01       	movw	r24, r14
     ad6:	b6 01       	movw	r22, r12
     ad8:	0e 94 41 0a 	call	0x1482	; 0x1482 <__mulsf3>
                     (encoder_ticks_per_rev * gear_ratio *
                      quad_count_mode_multiplier);  // multiplier of two at
     adc:	60 93 f0 01 	sts	0x01F0, r22	; 0x8001f0 <__data_end>
     ae0:	70 93 f1 01 	sts	0x01F1, r23	; 0x8001f1 <__data_end+0x1>
     ae4:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <__data_end+0x2>
     ae8:	90 93 f3 01 	sts	0x01F3, r25	; 0x8001f3 <__data_end+0x3>
                                                    // the denominator is
    // because we are using X4 quadrature mode
    des_length1 =
        encoder_offset;  // set desired lengths to be the encoder offset
     aec:	60 93 cf 02 	sts	0x02CF, r22	; 0x8002cf <des_length1>
     af0:	70 93 d0 02 	sts	0x02D0, r23	; 0x8002d0 <des_length1+0x1>
     af4:	80 93 d1 02 	sts	0x02D1, r24	; 0x8002d1 <des_length1+0x2>
     af8:	90 93 d2 02 	sts	0x02D2, r25	; 0x8002d2 <des_length1+0x3>
    des_length2 = des_length1;
     afc:	60 93 cb 02 	sts	0x02CB, r22	; 0x8002cb <des_length2>
     b00:	70 93 cc 02 	sts	0x02CC, r23	; 0x8002cc <des_length2+0x1>
     b04:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <des_length2+0x2>
     b08:	90 93 ce 02 	sts	0x02CE, r25	; 0x8002ce <des_length2+0x3>
    des_length3 = des_length1;
     b0c:	60 93 c7 02 	sts	0x02C7, r22	; 0x8002c7 <des_length3>
     b10:	70 93 c8 02 	sts	0x02C8, r23	; 0x8002c8 <des_length3+0x1>
     b14:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <des_length3+0x2>
     b18:	90 93 ca 02 	sts	0x02CA, r25	; 0x8002ca <des_length3+0x3>
      Serial1.print(encoder[1]);
      Serial1.print("\t");
      Serial1.println(encoder[2]);
    */

    command_type = 1;
     b1c:	81 e0       	ldi	r24, 0x01	; 1
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
     b24:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     b28:	df 91       	pop	r29
     b2a:	cf 91       	pop	r28
     b2c:	1f 91       	pop	r17
     b2e:	0f 91       	pop	r16
     b30:	ff 90       	pop	r15
     b32:	ef 90       	pop	r14
     b34:	df 90       	pop	r13
     b36:	cf 90       	pop	r12
     b38:	bf 90       	pop	r11
     b3a:	af 90       	pop	r10
     b3c:	9f 90       	pop	r9
     b3e:	8f 90       	pop	r8
     b40:	7f 90       	pop	r7
     b42:	6f 90       	pop	r6
     b44:	5f 90       	pop	r5
     b46:	4f 90       	pop	r4
     b48:	3f 90       	pop	r3
     b4a:	2f 90       	pop	r2
     b4c:	08 95       	ret

00000b4e <loop>:
    initTimers();
    // Serial1.println("Initiliazing module length");
    // initializeModule();
}

void loop() {
     b4e:	4f 92       	push	r4
     b50:	5f 92       	push	r5
     b52:	6f 92       	push	r6
     b54:	7f 92       	push	r7
     b56:	8f 92       	push	r8
     b58:	9f 92       	push	r9
     b5a:	af 92       	push	r10
     b5c:	bf 92       	push	r11
     b5e:	cf 92       	push	r12
     b60:	df 92       	push	r13
     b62:	ef 92       	push	r14
     b64:	ff 92       	push	r15
     b66:	0f 93       	push	r16
     b68:	1f 93       	push	r17
     b6a:	cf 93       	push	r28
     b6c:	df 93       	push	r29
    //  encoder2count = readEncoder(2);
    //  encodercount2 = (double) encoder2count;
    //  encoder3count = readEncoder(3);
    //  encodercount3 = (double) encoder3count;

    if (command_type == 0) {
     b6e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     b72:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     b76:	89 2b       	or	r24, r25
     b78:	41 f4       	brne	.+16     	; 0xb8a <loop+0x3c>
        Serial1.println("Initiliazing module length");
     b7a:	66 e9       	ldi	r22, 0x96	; 150
     b7c:	71 e0       	ldi	r23, 0x01	; 1
     b7e:	83 ee       	ldi	r24, 0xE3	; 227
     b80:	92 e0       	ldi	r25, 0x02	; 2
     b82:	0e 94 bf 0c 	call	0x197e	; 0x197e <_ZN5Print7printlnEPKc>
        initializeModule();
     b86:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <_Z16initializeModulev>
     b8a:	8f ea       	ldi	r24, 0xAF	; 175
     b8c:	e8 2e       	mov	r14, r24
     b8e:	82 e0       	ldi	r24, 0x02	; 2
     b90:	f8 2e       	mov	r15, r24
     b92:	0b eb       	ldi	r16, 0xBB	; 187
     b94:	12 e0       	ldi	r17, 0x02	; 2
    initTimers();
    // Serial1.println("Initiliazing module length");
    // initializeModule();
}

void loop() {
     b96:	c0 e0       	ldi	r28, 0x00	; 0
     b98:	d0 e0       	ldi	r29, 0x00	; 0
        Serial1.println("Initiliazing module length");
        initializeModule();
    }

    for (int i = 0; i < 3; i++) {
        encoder[i] = (double)readEncoder(i + 1) +
     b9a:	21 96       	adiw	r28, 0x01	; 1
     b9c:	ce 01       	movw	r24, r28
     b9e:	0e 94 57 01 	call	0x2ae	; 0x2ae <_Z11readEncoderi>
     ba2:	0e 94 8c 09 	call	0x1318	; 0x1318 <__floatsisf>
     ba6:	20 91 f0 01 	lds	r18, 0x01F0	; 0x8001f0 <__data_end>
     baa:	30 91 f1 01 	lds	r19, 0x01F1	; 0x8001f1 <__data_end+0x1>
     bae:	40 91 f2 01 	lds	r20, 0x01F2	; 0x8001f2 <__data_end+0x2>
     bb2:	50 91 f3 01 	lds	r21, 0x01F3	; 0x8001f3 <__data_end+0x3>
     bb6:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__addsf3>
                     encoder_offset;  // motor position read by encoder
     bba:	f7 01       	movw	r30, r14
     bbc:	61 93       	st	Z+, r22
     bbe:	71 93       	st	Z+, r23
     bc0:	81 93       	st	Z+, r24
     bc2:	91 93       	st	Z+, r25
     bc4:	7f 01       	movw	r14, r30
                                      // in double type

        // need to make encoderData to be 4 byte eventually
        encoderData[i * 2] = long(encoder[i]) >> 8;
     bc6:	0e 94 54 09 	call	0x12a8	; 0x12a8 <__fixsfsi>
     bca:	f8 01       	movw	r30, r16
     bcc:	70 83       	st	Z, r23
        encoderData[i * 2 + 1] = long(encoder[i]) & 255;
     bce:	61 83       	std	Z+1, r22	; 0x01
     bd0:	0e 5f       	subi	r16, 0xFE	; 254
     bd2:	1f 4f       	sbci	r17, 0xFF	; 255
    if (command_type == 0) {
        Serial1.println("Initiliazing module length");
        initializeModule();
    }

    for (int i = 0; i < 3; i++) {
     bd4:	c3 30       	cpi	r28, 0x03	; 3
     bd6:	d1 05       	cpc	r29, r1
     bd8:	01 f7       	brne	.-64     	; 0xb9a <loop+0x4c>
    //  encoderData[2] = encodercount3;
    //  encoderData[3] = encodercount3;
    //  encoderData[4] = encodercount3;
    //  encoderData[5] = encodercount3;

    m1pid.Compute();
     bda:	87 e7       	ldi	r24, 0x77	; 119
     bdc:	92 e0       	ldi	r25, 0x02	; 2
     bde:	0e 94 04 13 	call	0x2608	; 0x2608 <_ZN3PID7ComputeEv>
    m2pid.Compute();
     be2:	80 e4       	ldi	r24, 0x40	; 64
     be4:	92 e0       	ldi	r25, 0x02	; 2
     be6:	0e 94 04 13 	call	0x2608	; 0x2608 <_ZN3PID7ComputeEv>
    m3pid.Compute();
     bea:	89 e0       	ldi	r24, 0x09	; 9
     bec:	92 e0       	ldi	r25, 0x02	; 2
     bee:	0e 94 04 13 	call	0x2608	; 0x2608 <_ZN3PID7ComputeEv>

    if (mo < 0) {
     bf2:	20 e0       	ldi	r18, 0x00	; 0
     bf4:	30 e0       	ldi	r19, 0x00	; 0
     bf6:	a9 01       	movw	r20, r18
     bf8:	60 91 db 02 	lds	r22, 0x02DB	; 0x8002db <mo>
     bfc:	70 91 dc 02 	lds	r23, 0x02DC	; 0x8002dc <mo+0x1>
     c00:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <mo+0x2>
     c04:	90 91 de 02 	lds	r25, 0x02DE	; 0x8002de <mo+0x3>
     c08:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__cmpsf2>
     c0c:	87 ff       	sbrs	r24, 7
     c0e:	02 c0       	rjmp	.+4      	; 0xc14 <loop+0xc6>
        digitalWrite(MOTOR_ONE_DIR_PIN,
                     LOW);  // for new motors this should be LOW
     c10:	60 e0       	ldi	r22, 0x00	; 0
     c12:	01 c0       	rjmp	.+2      	; 0xc16 <loop+0xc8>
    } else {
        digitalWrite(MOTOR_ONE_DIR_PIN, HIGH);
     c14:	61 e0       	ldi	r22, 0x01	; 1
     c16:	84 e0       	ldi	r24, 0x04	; 4
     c18:	0e 94 d5 12 	call	0x25aa	; 0x25aa <digitalWrite>
    }

    if (mo2 < 0) {
     c1c:	20 e0       	ldi	r18, 0x00	; 0
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	a9 01       	movw	r20, r18
     c22:	60 91 d7 02 	lds	r22, 0x02D7	; 0x8002d7 <mo2>
     c26:	70 91 d8 02 	lds	r23, 0x02D8	; 0x8002d8 <mo2+0x1>
     c2a:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <mo2+0x2>
     c2e:	90 91 da 02 	lds	r25, 0x02DA	; 0x8002da <mo2+0x3>
     c32:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__cmpsf2>
     c36:	87 ff       	sbrs	r24, 7
     c38:	02 c0       	rjmp	.+4      	; 0xc3e <loop+0xf0>
        digitalWrite(MOTOR_TWO_DIR_PIN, LOW);
     c3a:	60 e0       	ldi	r22, 0x00	; 0
     c3c:	01 c0       	rjmp	.+2      	; 0xc40 <loop+0xf2>
    } else {
        digitalWrite(MOTOR_TWO_DIR_PIN, HIGH);
     c3e:	61 e0       	ldi	r22, 0x01	; 1
     c40:	86 e0       	ldi	r24, 0x06	; 6
     c42:	0e 94 d5 12 	call	0x25aa	; 0x25aa <digitalWrite>
    }

    if (mo3 < 0) {
     c46:	20 e0       	ldi	r18, 0x00	; 0
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	a9 01       	movw	r20, r18
     c4c:	60 91 d3 02 	lds	r22, 0x02D3	; 0x8002d3 <mo3>
     c50:	70 91 d4 02 	lds	r23, 0x02D4	; 0x8002d4 <mo3+0x1>
     c54:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <mo3+0x2>
     c58:	90 91 d6 02 	lds	r25, 0x02D6	; 0x8002d6 <mo3+0x3>
     c5c:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__cmpsf2>
     c60:	87 ff       	sbrs	r24, 7
     c62:	02 c0       	rjmp	.+4      	; 0xc68 <loop+0x11a>
        digitalWrite(MOTOR_THREE_DIR_PIN, LOW);
     c64:	60 e0       	ldi	r22, 0x00	; 0
     c66:	01 c0       	rjmp	.+2      	; 0xc6a <loop+0x11c>
    } else {
        digitalWrite(MOTOR_THREE_DIR_PIN, HIGH);
     c68:	61 e0       	ldi	r22, 0x01	; 1
     c6a:	8c e0       	ldi	r24, 0x0C	; 12
     c6c:	0e 94 d5 12 	call	0x25aa	; 0x25aa <digitalWrite>
    }

    touch_switch_read =
        PINB & (1 << PINB0);  // read pin, equivalent to PINB&bit(0);
     c70:	83 b1       	in	r24, 0x03	; 3
     c72:	81 70       	andi	r24, 0x01	; 1
     c74:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <touch_switch_read>
    if (touch_switch_read == 0) {
     c78:	81 11       	cpse	r24, r1
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <loop+0x136>
        touch_state[0] = 1;
     c7c:	81 e0       	ldi	r24, 0x01	; 1
     c7e:	80 93 ae 02 	sts	0x02AE, r24	; 0x8002ae <touch_state>
     c82:	02 c0       	rjmp	.+4      	; 0xc88 <loop+0x13a>
    } else if (touch_switch_read == 1) {
        touch_state[0] = 0;
     c84:	10 92 ae 02 	sts	0x02AE, r1	; 0x8002ae <touch_state>
    //  analogWrite(MOTOR_ONE_PWM_PIN, abs(mo));
    //  analogWrite(MOTOR_TWO_PWM_PIN, abs(mo2));
    //  analogWrite(MOTOR_THREE_PWM_PIN, abs(mo3));

    ////// MOTOR CONTROL USING PWM WITHOUT ANALOG WRITE
    OCR3A = abs(mo);  // Send PWM duty cycle to register associate with pin
     c88:	c0 90 db 02 	lds	r12, 0x02DB	; 0x8002db <mo>
     c8c:	d0 90 dc 02 	lds	r13, 0x02DC	; 0x8002dc <mo+0x1>
     c90:	e0 90 dd 02 	lds	r14, 0x02DD	; 0x8002dd <mo+0x2>
     c94:	f0 90 de 02 	lds	r15, 0x02DE	; 0x8002de <mo+0x3>
     c98:	20 e0       	ldi	r18, 0x00	; 0
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	a9 01       	movw	r20, r18
     c9e:	c7 01       	movw	r24, r14
     ca0:	b6 01       	movw	r22, r12
     ca2:	0e 94 3c 0a 	call	0x1478	; 0x1478 <__gesf2>
     ca6:	18 16       	cp	r1, r24
     ca8:	1c f4       	brge	.+6      	; 0xcb0 <loop+0x162>
     caa:	c7 01       	movw	r24, r14
     cac:	b6 01       	movw	r22, r12
     cae:	03 c0       	rjmp	.+6      	; 0xcb6 <loop+0x168>
     cb0:	c7 01       	movw	r24, r14
     cb2:	b6 01       	movw	r22, r12
     cb4:	90 58       	subi	r25, 0x80	; 128
     cb6:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <__fixunssfsi>
     cba:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     cbe:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
    // connected to motor 1
    OCR1A = abs(mo2);  // Send PWM duty cycle to register associate with pin
     cc2:	c0 90 d7 02 	lds	r12, 0x02D7	; 0x8002d7 <mo2>
     cc6:	d0 90 d8 02 	lds	r13, 0x02D8	; 0x8002d8 <mo2+0x1>
     cca:	e0 90 d9 02 	lds	r14, 0x02D9	; 0x8002d9 <mo2+0x2>
     cce:	f0 90 da 02 	lds	r15, 0x02DA	; 0x8002da <mo2+0x3>
     cd2:	20 e0       	ldi	r18, 0x00	; 0
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	a9 01       	movw	r20, r18
     cd8:	c7 01       	movw	r24, r14
     cda:	b6 01       	movw	r22, r12
     cdc:	0e 94 3c 0a 	call	0x1478	; 0x1478 <__gesf2>
     ce0:	18 16       	cp	r1, r24
     ce2:	1c f4       	brge	.+6      	; 0xcea <loop+0x19c>
     ce4:	c7 01       	movw	r24, r14
     ce6:	b6 01       	movw	r22, r12
     ce8:	03 c0       	rjmp	.+6      	; 0xcf0 <loop+0x1a2>
     cea:	c7 01       	movw	r24, r14
     cec:	b6 01       	movw	r22, r12
     cee:	90 58       	subi	r25, 0x80	; 128
     cf0:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <__fixunssfsi>
     cf4:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     cf8:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    // connected to motor 2
    OCR1B = abs(mo3);  // Send PWM duty cycle to register associate with pin
     cfc:	c0 90 d3 02 	lds	r12, 0x02D3	; 0x8002d3 <mo3>
     d00:	d0 90 d4 02 	lds	r13, 0x02D4	; 0x8002d4 <mo3+0x1>
     d04:	e0 90 d5 02 	lds	r14, 0x02D5	; 0x8002d5 <mo3+0x2>
     d08:	f0 90 d6 02 	lds	r15, 0x02D6	; 0x8002d6 <mo3+0x3>
     d0c:	20 e0       	ldi	r18, 0x00	; 0
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	a9 01       	movw	r20, r18
     d12:	c7 01       	movw	r24, r14
     d14:	b6 01       	movw	r22, r12
     d16:	0e 94 3c 0a 	call	0x1478	; 0x1478 <__gesf2>
     d1a:	18 16       	cp	r1, r24
     d1c:	1c f4       	brge	.+6      	; 0xd24 <loop+0x1d6>
     d1e:	c7 01       	movw	r24, r14
     d20:	b6 01       	movw	r22, r12
     d22:	03 c0       	rjmp	.+6      	; 0xd2a <loop+0x1dc>
     d24:	c7 01       	movw	r24, r14
     d26:	b6 01       	movw	r22, r12
     d28:	90 58       	subi	r25, 0x80	; 128
     d2a:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <__fixunssfsi>
     d2e:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7e008b>
     d32:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7e008a>
    // connected to motor 3

    ////// MOTOR CURRENT READING
    // for motor1 (A0), motor2 (A1), motor3 (A2)
    motor1_cur_val = analogRead(A0);
     d36:	82 e1       	ldi	r24, 0x12	; 18
     d38:	0e 94 2b 12 	call	0x2456	; 0x2456 <analogRead>
     d3c:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <motor1_cur_val+0x1>
     d40:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <motor1_cur_val>
    motor2_cur_val = analogRead(A1);
     d44:	83 e1       	ldi	r24, 0x13	; 19
     d46:	0e 94 2b 12 	call	0x2456	; 0x2456 <analogRead>
     d4a:	90 93 06 02 	sts	0x0206, r25	; 0x800206 <motor2_cur_val+0x1>
     d4e:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <motor2_cur_val>
    motor3_cur_val = analogRead(A2);
     d52:	84 e1       	ldi	r24, 0x14	; 20
     d54:	0e 94 2b 12 	call	0x2456	; 0x2456 <analogRead>
     d58:	ec 01       	movw	r28, r24
     d5a:	90 93 04 02 	sts	0x0204, r25	; 0x800204 <motor3_cur_val+0x1>
     d5e:	80 93 03 02 	sts	0x0203, r24	; 0x800203 <motor3_cur_val>

    m1_cur_val = alpha * motor1_cur_val + (1 - alpha) * m1_cur_val;
     d62:	c0 90 02 01 	lds	r12, 0x0102	; 0x800102 <alpha>
     d66:	d0 90 03 01 	lds	r13, 0x0103	; 0x800103 <alpha+0x1>
     d6a:	e0 90 04 01 	lds	r14, 0x0104	; 0x800104 <alpha+0x2>
     d6e:	f0 90 05 01 	lds	r15, 0x0105	; 0x800105 <alpha+0x3>
     d72:	a7 01       	movw	r20, r14
     d74:	96 01       	movw	r18, r12
     d76:	60 e0       	ldi	r22, 0x00	; 0
     d78:	70 e0       	ldi	r23, 0x00	; 0
     d7a:	80 e8       	ldi	r24, 0x80	; 128
     d7c:	9f e3       	ldi	r25, 0x3F	; 63
     d7e:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__subsf3>
     d82:	4b 01       	movw	r8, r22
     d84:	5c 01       	movw	r10, r24
     d86:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <motor1_cur_val>
     d8a:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <motor1_cur_val+0x1>
     d8e:	07 2e       	mov	r0, r23
     d90:	00 0c       	add	r0, r0
     d92:	88 0b       	sbc	r24, r24
     d94:	99 0b       	sbc	r25, r25
     d96:	0e 94 8c 09 	call	0x1318	; 0x1318 <__floatsisf>
     d9a:	a7 01       	movw	r20, r14
     d9c:	96 01       	movw	r18, r12
     d9e:	0e 94 41 0a 	call	0x1482	; 0x1482 <__mulsf3>
     da2:	2b 01       	movw	r4, r22
     da4:	3c 01       	movw	r6, r24
     da6:	20 91 ff 01 	lds	r18, 0x01FF	; 0x8001ff <m1_cur_val>
     daa:	30 91 00 02 	lds	r19, 0x0200	; 0x800200 <m1_cur_val+0x1>
     dae:	40 91 01 02 	lds	r20, 0x0201	; 0x800201 <m1_cur_val+0x2>
     db2:	50 91 02 02 	lds	r21, 0x0202	; 0x800202 <m1_cur_val+0x3>
     db6:	c5 01       	movw	r24, r10
     db8:	b4 01       	movw	r22, r8
     dba:	0e 94 41 0a 	call	0x1482	; 0x1482 <__mulsf3>
     dbe:	9b 01       	movw	r18, r22
     dc0:	ac 01       	movw	r20, r24
     dc2:	c3 01       	movw	r24, r6
     dc4:	b2 01       	movw	r22, r4
     dc6:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__addsf3>
     dca:	60 93 ff 01 	sts	0x01FF, r22	; 0x8001ff <m1_cur_val>
     dce:	70 93 00 02 	sts	0x0200, r23	; 0x800200 <m1_cur_val+0x1>
     dd2:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <m1_cur_val+0x2>
     dd6:	90 93 02 02 	sts	0x0202, r25	; 0x800202 <m1_cur_val+0x3>
    m2_cur_val = alpha * motor2_cur_val + (1 - alpha) * m2_cur_val;
     dda:	60 91 05 02 	lds	r22, 0x0205	; 0x800205 <motor2_cur_val>
     dde:	70 91 06 02 	lds	r23, 0x0206	; 0x800206 <motor2_cur_val+0x1>
     de2:	07 2e       	mov	r0, r23
     de4:	00 0c       	add	r0, r0
     de6:	88 0b       	sbc	r24, r24
     de8:	99 0b       	sbc	r25, r25
     dea:	0e 94 8c 09 	call	0x1318	; 0x1318 <__floatsisf>
     dee:	a7 01       	movw	r20, r14
     df0:	96 01       	movw	r18, r12
     df2:	0e 94 41 0a 	call	0x1482	; 0x1482 <__mulsf3>
     df6:	2b 01       	movw	r4, r22
     df8:	3c 01       	movw	r6, r24
     dfa:	20 91 fb 01 	lds	r18, 0x01FB	; 0x8001fb <m2_cur_val>
     dfe:	30 91 fc 01 	lds	r19, 0x01FC	; 0x8001fc <m2_cur_val+0x1>
     e02:	40 91 fd 01 	lds	r20, 0x01FD	; 0x8001fd <m2_cur_val+0x2>
     e06:	50 91 fe 01 	lds	r21, 0x01FE	; 0x8001fe <m2_cur_val+0x3>
     e0a:	c5 01       	movw	r24, r10
     e0c:	b4 01       	movw	r22, r8
     e0e:	0e 94 41 0a 	call	0x1482	; 0x1482 <__mulsf3>
     e12:	9b 01       	movw	r18, r22
     e14:	ac 01       	movw	r20, r24
     e16:	c3 01       	movw	r24, r6
     e18:	b2 01       	movw	r22, r4
     e1a:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__addsf3>
     e1e:	60 93 fb 01 	sts	0x01FB, r22	; 0x8001fb <m2_cur_val>
     e22:	70 93 fc 01 	sts	0x01FC, r23	; 0x8001fc <m2_cur_val+0x1>
     e26:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <m2_cur_val+0x2>
     e2a:	90 93 fe 01 	sts	0x01FE, r25	; 0x8001fe <m2_cur_val+0x3>
    m3_cur_val = alpha * motor3_cur_val + (1 - alpha) * m3_cur_val;
     e2e:	20 91 f7 01 	lds	r18, 0x01F7	; 0x8001f7 <m3_cur_val>
     e32:	30 91 f8 01 	lds	r19, 0x01F8	; 0x8001f8 <m3_cur_val+0x1>
     e36:	40 91 f9 01 	lds	r20, 0x01F9	; 0x8001f9 <m3_cur_val+0x2>
     e3a:	50 91 fa 01 	lds	r21, 0x01FA	; 0x8001fa <m3_cur_val+0x3>
     e3e:	c5 01       	movw	r24, r10
     e40:	b4 01       	movw	r22, r8
     e42:	0e 94 41 0a 	call	0x1482	; 0x1482 <__mulsf3>
     e46:	4b 01       	movw	r8, r22
     e48:	5c 01       	movw	r10, r24
     e4a:	be 01       	movw	r22, r28
     e4c:	dd 0f       	add	r29, r29
     e4e:	88 0b       	sbc	r24, r24
     e50:	99 0b       	sbc	r25, r25
     e52:	0e 94 8c 09 	call	0x1318	; 0x1318 <__floatsisf>
     e56:	a7 01       	movw	r20, r14
     e58:	96 01       	movw	r18, r12
     e5a:	0e 94 41 0a 	call	0x1482	; 0x1482 <__mulsf3>
     e5e:	9b 01       	movw	r18, r22
     e60:	ac 01       	movw	r20, r24
     e62:	c5 01       	movw	r24, r10
     e64:	b4 01       	movw	r22, r8
     e66:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__addsf3>
     e6a:	60 93 f7 01 	sts	0x01F7, r22	; 0x8001f7 <m3_cur_val>
     e6e:	70 93 f8 01 	sts	0x01F8, r23	; 0x8001f8 <m3_cur_val+0x1>
     e72:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <m3_cur_val+0x2>
     e76:	90 93 fa 01 	sts	0x01FA, r25	; 0x8001fa <m3_cur_val+0x3>
      Serial1.print("\t");
      Serial1.println(encoder[2]);
    */

    // Serial1.println(touch_sense_cap_val);
}
     e7a:	df 91       	pop	r29
     e7c:	cf 91       	pop	r28
     e7e:	1f 91       	pop	r17
     e80:	0f 91       	pop	r16
     e82:	ff 90       	pop	r15
     e84:	ef 90       	pop	r14
     e86:	df 90       	pop	r13
     e88:	cf 90       	pop	r12
     e8a:	bf 90       	pop	r11
     e8c:	af 90       	pop	r10
     e8e:	9f 90       	pop	r9
     e90:	8f 90       	pop	r8
     e92:	7f 90       	pop	r7
     e94:	6f 90       	pop	r6
     e96:	5f 90       	pop	r5
     e98:	4f 90       	pop	r4
     e9a:	08 95       	ret

00000e9c <_GLOBAL__sub_I_gear_ratio>:
      Serial1.print("\t");
      Serial1.println(encoder[2]);
    */

    command_type = 1;
     e9c:	af 92       	push	r10
     e9e:	bf 92       	push	r11
     ea0:	cf 92       	push	r12
     ea2:	df 92       	push	r13
     ea4:	ef 92       	push	r14
     ea6:	ff 92       	push	r15
     ea8:	0f 93       	push	r16
     eaa:	1f 93       	push	r17
// NO OF HIGH PULSE PER ROTATION, THERE ARE 7 pairs of magnet poles on
// the encoder magnet, for module 8 (the one with double origami modules)
// somehow 12 PPR works much better.
int quad_count_mode_multiplier = 4;
// 4X COUNT MODE QUADRATURE ENCODER set to the LS7366R encoder chip
float encoder_ticks_to_angle =
     eac:	60 91 3d 01 	lds	r22, 0x013D	; 0x80013d <encoder_ticks_per_rev>
     eb0:	70 91 3e 01 	lds	r23, 0x013E	; 0x80013e <encoder_ticks_per_rev+0x1>
     eb4:	07 2e       	mov	r0, r23
     eb6:	00 0c       	add	r0, r0
     eb8:	88 0b       	sbc	r24, r24
     eba:	99 0b       	sbc	r25, r25
     ebc:	0e 94 8c 09 	call	0x1318	; 0x1318 <__floatsisf>
     ec0:	20 91 3f 01 	lds	r18, 0x013F	; 0x80013f <gear_ratio>
     ec4:	30 91 40 01 	lds	r19, 0x0140	; 0x800140 <gear_ratio+0x1>
     ec8:	40 91 41 01 	lds	r20, 0x0141	; 0x800141 <gear_ratio+0x2>
     ecc:	50 91 42 01 	lds	r21, 0x0142	; 0x800142 <gear_ratio+0x3>
     ed0:	0e 94 41 0a 	call	0x1482	; 0x1482 <__mulsf3>
     ed4:	9b 01       	movw	r18, r22
     ed6:	ac 01       	movw	r20, r24
     ed8:	60 e0       	ldi	r22, 0x00	; 0
     eda:	70 e0       	ldi	r23, 0x00	; 0
     edc:	84 eb       	ldi	r24, 0xB4	; 180
     ede:	93 e4       	ldi	r25, 0x43	; 67
     ee0:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__divsf3>
     ee4:	60 93 df 02 	sts	0x02DF, r22	; 0x8002df <encoder_ticks_to_angle>
     ee8:	70 93 e0 02 	sts	0x02E0, r23	; 0x8002e0 <encoder_ticks_to_angle+0x1>
     eec:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <encoder_ticks_to_angle+0x2>
     ef0:	90 93 e2 02 	sts	0x02E2, r25	; 0x8002e2 <encoder_ticks_to_angle+0x3>
int touch_sense_cap_val = 0;
int touch_sense_cap_val2 = 0;
bool touch_switch_read = HIGH;
byte touch_state[1];

PID m1pid(&encoder[0], &mo, &des_length1, Kp1, Ki1, Kd1, DIRECT);
     ef4:	a0 90 23 01 	lds	r10, 0x0123	; 0x800123 <Ki1>
     ef8:	b0 90 24 01 	lds	r11, 0x0124	; 0x800124 <Ki1+0x1>
     efc:	c0 90 25 01 	lds	r12, 0x0125	; 0x800125 <Ki1+0x2>
     f00:	d0 90 26 01 	lds	r13, 0x0126	; 0x800126 <Ki1+0x3>
     f04:	e0 90 27 01 	lds	r14, 0x0127	; 0x800127 <Kp1>
     f08:	f0 90 28 01 	lds	r15, 0x0128	; 0x800128 <Kp1+0x1>
     f0c:	00 91 29 01 	lds	r16, 0x0129	; 0x800129 <Kp1+0x2>
     f10:	10 91 2a 01 	lds	r17, 0x012A	; 0x80012a <Kp1+0x3>
     f14:	1f 92       	push	r1
     f16:	1f 92       	push	r1
     f18:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <Kd1+0x3>
     f1c:	8f 93       	push	r24
     f1e:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <Kd1+0x2>
     f22:	8f 93       	push	r24
     f24:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <Kd1+0x1>
     f28:	8f 93       	push	r24
     f2a:	80 91 1f 01 	lds	r24, 0x011F	; 0x80011f <Kd1>
     f2e:	8f 93       	push	r24
     f30:	2f ec       	ldi	r18, 0xCF	; 207
     f32:	32 e0       	ldi	r19, 0x02	; 2
     f34:	4b ed       	ldi	r20, 0xDB	; 219
     f36:	52 e0       	ldi	r21, 0x02	; 2
     f38:	6f ea       	ldi	r22, 0xAF	; 175
     f3a:	72 e0       	ldi	r23, 0x02	; 2
     f3c:	87 e7       	ldi	r24, 0x77	; 119
     f3e:	92 e0       	ldi	r25, 0x02	; 2
     f40:	0e 94 42 16 	call	0x2c84	; 0x2c84 <_ZN3PIDC1EPdS0_S0_dddi>
PID m2pid(&encoder[1], &mo2, &des_length2, Kp2, Ki2, Kd2, DIRECT);
     f44:	a0 90 17 01 	lds	r10, 0x0117	; 0x800117 <Ki2>
     f48:	b0 90 18 01 	lds	r11, 0x0118	; 0x800118 <Ki2+0x1>
     f4c:	c0 90 19 01 	lds	r12, 0x0119	; 0x800119 <Ki2+0x2>
     f50:	d0 90 1a 01 	lds	r13, 0x011A	; 0x80011a <Ki2+0x3>
     f54:	e0 90 1b 01 	lds	r14, 0x011B	; 0x80011b <Kp2>
     f58:	f0 90 1c 01 	lds	r15, 0x011C	; 0x80011c <Kp2+0x1>
     f5c:	00 91 1d 01 	lds	r16, 0x011D	; 0x80011d <Kp2+0x2>
     f60:	10 91 1e 01 	lds	r17, 0x011E	; 0x80011e <Kp2+0x3>
     f64:	1f 92       	push	r1
     f66:	1f 92       	push	r1
     f68:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <Kd2+0x3>
     f6c:	8f 93       	push	r24
     f6e:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <Kd2+0x2>
     f72:	8f 93       	push	r24
     f74:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <Kd2+0x1>
     f78:	8f 93       	push	r24
     f7a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <Kd2>
     f7e:	8f 93       	push	r24
     f80:	2b ec       	ldi	r18, 0xCB	; 203
     f82:	32 e0       	ldi	r19, 0x02	; 2
     f84:	47 ed       	ldi	r20, 0xD7	; 215
     f86:	52 e0       	ldi	r21, 0x02	; 2
     f88:	63 eb       	ldi	r22, 0xB3	; 179
     f8a:	72 e0       	ldi	r23, 0x02	; 2
     f8c:	80 e4       	ldi	r24, 0x40	; 64
     f8e:	92 e0       	ldi	r25, 0x02	; 2
     f90:	0e 94 42 16 	call	0x2c84	; 0x2c84 <_ZN3PIDC1EPdS0_S0_dddi>
PID m3pid(&encoder[2], &mo3, &des_length3, Kp3, Ki3, Kd3, DIRECT);
     f94:	a0 90 0b 01 	lds	r10, 0x010B	; 0x80010b <Ki3>
     f98:	b0 90 0c 01 	lds	r11, 0x010C	; 0x80010c <Ki3+0x1>
     f9c:	c0 90 0d 01 	lds	r12, 0x010D	; 0x80010d <Ki3+0x2>
     fa0:	d0 90 0e 01 	lds	r13, 0x010E	; 0x80010e <Ki3+0x3>
     fa4:	e0 90 0f 01 	lds	r14, 0x010F	; 0x80010f <Kp3>
     fa8:	f0 90 10 01 	lds	r15, 0x0110	; 0x800110 <Kp3+0x1>
     fac:	00 91 11 01 	lds	r16, 0x0111	; 0x800111 <Kp3+0x2>
     fb0:	10 91 12 01 	lds	r17, 0x0112	; 0x800112 <Kp3+0x3>
     fb4:	1f 92       	push	r1
     fb6:	1f 92       	push	r1
     fb8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <Kd3+0x3>
     fbc:	8f 93       	push	r24
     fbe:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <Kd3+0x2>
     fc2:	8f 93       	push	r24
     fc4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <Kd3+0x1>
     fc8:	8f 93       	push	r24
     fca:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <Kd3>
     fce:	8f 93       	push	r24
     fd0:	27 ec       	ldi	r18, 0xC7	; 199
     fd2:	32 e0       	ldi	r19, 0x02	; 2
     fd4:	43 ed       	ldi	r20, 0xD3	; 211
     fd6:	52 e0       	ldi	r21, 0x02	; 2
     fd8:	67 eb       	ldi	r22, 0xB7	; 183
     fda:	72 e0       	ldi	r23, 0x02	; 2
     fdc:	89 e0       	ldi	r24, 0x09	; 9
     fde:	92 e0       	ldi	r25, 0x02	; 2
     fe0:	0e 94 42 16 	call	0x2c84	; 0x2c84 <_ZN3PIDC1EPdS0_S0_dddi>
      Serial1.print("\t");
      Serial1.println(encoder[2]);
    */

    command_type = 1;
     fe4:	8d b7       	in	r24, 0x3d	; 61
     fe6:	9e b7       	in	r25, 0x3e	; 62
     fe8:	42 96       	adiw	r24, 0x12	; 18
     fea:	0f b6       	in	r0, 0x3f	; 63
     fec:	f8 94       	cli
     fee:	9e bf       	out	0x3e, r25	; 62
     ff0:	0f be       	out	0x3f, r0	; 63
     ff2:	8d bf       	out	0x3d, r24	; 61
     ff4:	1f 91       	pop	r17
     ff6:	0f 91       	pop	r16
     ff8:	ff 90       	pop	r15
     ffa:	ef 90       	pop	r14
     ffc:	df 90       	pop	r13
     ffe:	cf 90       	pop	r12
    1000:	bf 90       	pop	r11
    1002:	af 90       	pop	r10
    1004:	08 95       	ret

00001006 <_Z19receiveMotorCommandi>:
    digitalWrite(slaveSelectEnc3, LOW);  // Begin SPI conversation
    SPI.transfer(0xE0);
    digitalWrite(slaveSelectEnc3, HIGH);  // Terminate SPI conversation
}

void receiveMotorCommand(int howMany) {
    1006:	cf 93       	push	r28
    1008:	df 93       	push	r29
    100a:	c1 ec       	ldi	r28, 0xC1	; 193
    100c:	d2 e0       	ldi	r29, 0x02	; 2
      des_length2 = (motorCommand[2]<<8)+motorCommand[3];
      des_length3 = (motorCommand[4]<<8)+motorCommand[5];
    */

    int index = 0;
    while (Wire.available()) {
    100e:	85 e9       	ldi	r24, 0x95	; 149
    1010:	93 e0       	ldi	r25, 0x03	; 3
    1012:	0e 94 f5 16 	call	0x2dea	; 0x2dea <_ZN7TwoWire9availableEv>
    1016:	89 2b       	or	r24, r25
    1018:	99 f0       	breq	.+38     	; 0x1040 <_Z19receiveMotorCommandi+0x3a>
        byte d = Wire.read();
    101a:	85 e9       	ldi	r24, 0x95	; 149
    101c:	93 e0       	ldi	r25, 0x03	; 3
    101e:	0e 94 fd 16 	call	0x2dfa	; 0x2dfa <_ZN7TwoWire4readEv>
        if (index < 6) {
    1022:	9e 01       	movw	r18, r28
    1024:	21 5c       	subi	r18, 0xC1	; 193
    1026:	32 40       	sbci	r19, 0x02	; 2
    1028:	26 30       	cpi	r18, 0x06	; 6
    102a:	31 05       	cpc	r19, r1
    102c:	14 f4       	brge	.+4      	; 0x1032 <_Z19receiveMotorCommandi+0x2c>
            motorCommand[index] = d;
    102e:	88 83       	st	Y, r24
    1030:	05 c0       	rjmp	.+10     	; 0x103c <_Z19receiveMotorCommandi+0x36>
        } else {
            command_type = d;
    1032:	99 27       	eor	r25, r25
    1034:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    1038:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    103c:	21 96       	adiw	r28, 0x01	; 1
      des_length2 = (motorCommand[2]<<8)+motorCommand[3];
      des_length3 = (motorCommand[4]<<8)+motorCommand[5];
    */

    int index = 0;
    while (Wire.available()) {
    103e:	e7 cf       	rjmp	.-50     	; 0x100e <_Z19receiveMotorCommandi+0x8>
        }
        index = index + 1;
    }

    // Need to make this 4 byte eventually
    des_length1 = (motorCommand[0] << 8) + motorCommand[1];
    1040:	60 91 c1 02 	lds	r22, 0x02C1	; 0x8002c1 <motorCommand>
    1044:	70 e0       	ldi	r23, 0x00	; 0
    1046:	76 2f       	mov	r23, r22
    1048:	66 27       	eor	r22, r22
    104a:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <motorCommand+0x1>
    104e:	68 0f       	add	r22, r24
    1050:	71 1d       	adc	r23, r1
    1052:	07 2e       	mov	r0, r23
    1054:	00 0c       	add	r0, r0
    1056:	88 0b       	sbc	r24, r24
    1058:	99 0b       	sbc	r25, r25
    105a:	0e 94 8c 09 	call	0x1318	; 0x1318 <__floatsisf>
    105e:	60 93 cf 02 	sts	0x02CF, r22	; 0x8002cf <des_length1>
    1062:	70 93 d0 02 	sts	0x02D0, r23	; 0x8002d0 <des_length1+0x1>
    1066:	80 93 d1 02 	sts	0x02D1, r24	; 0x8002d1 <des_length1+0x2>
    106a:	90 93 d2 02 	sts	0x02D2, r25	; 0x8002d2 <des_length1+0x3>
    des_length2 = (motorCommand[2] << 8) + motorCommand[3];
    106e:	60 91 c3 02 	lds	r22, 0x02C3	; 0x8002c3 <motorCommand+0x2>
    1072:	70 e0       	ldi	r23, 0x00	; 0
    1074:	76 2f       	mov	r23, r22
    1076:	66 27       	eor	r22, r22
    1078:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <motorCommand+0x3>
    107c:	68 0f       	add	r22, r24
    107e:	71 1d       	adc	r23, r1
    1080:	07 2e       	mov	r0, r23
    1082:	00 0c       	add	r0, r0
    1084:	88 0b       	sbc	r24, r24
    1086:	99 0b       	sbc	r25, r25
    1088:	0e 94 8c 09 	call	0x1318	; 0x1318 <__floatsisf>
    108c:	60 93 cb 02 	sts	0x02CB, r22	; 0x8002cb <des_length2>
    1090:	70 93 cc 02 	sts	0x02CC, r23	; 0x8002cc <des_length2+0x1>
    1094:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <des_length2+0x2>
    1098:	90 93 ce 02 	sts	0x02CE, r25	; 0x8002ce <des_length2+0x3>
    des_length3 = (motorCommand[4] << 8) + motorCommand[5];
    109c:	60 91 c5 02 	lds	r22, 0x02C5	; 0x8002c5 <motorCommand+0x4>
    10a0:	70 e0       	ldi	r23, 0x00	; 0
    10a2:	76 2f       	mov	r23, r22
    10a4:	66 27       	eor	r22, r22
    10a6:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <motorCommand+0x5>
    10aa:	68 0f       	add	r22, r24
    10ac:	71 1d       	adc	r23, r1
    10ae:	07 2e       	mov	r0, r23
    10b0:	00 0c       	add	r0, r0
    10b2:	88 0b       	sbc	r24, r24
    10b4:	99 0b       	sbc	r25, r25
    10b6:	0e 94 8c 09 	call	0x1318	; 0x1318 <__floatsisf>
    10ba:	60 93 c7 02 	sts	0x02C7, r22	; 0x8002c7 <des_length3>
    10be:	70 93 c8 02 	sts	0x02C8, r23	; 0x8002c8 <des_length3+0x1>
    10c2:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <des_length3+0x2>
    10c6:	90 93 ca 02 	sts	0x02CA, r25	; 0x8002ca <des_length3+0x3>
    // Example how to make 4 byte variable
    // des_length1 = ((long)(motorCommand[0])<<24) +
    // ((long)(motorCommand[1])<<16)
    // + ((long)(motorCommand[2])<<8) + ((long)(motorCommand[3])) ;  //
    // motor command in 4 bytes
}
    10ca:	df 91       	pop	r29
    10cc:	cf 91       	pop	r28
    10ce:	08 95       	ret

000010d0 <_Z18requestEncoderDatav>:

void requestEncoderData() { Wire.write(encoderData, 6); }
    10d0:	46 e0       	ldi	r20, 0x06	; 6
    10d2:	50 e0       	ldi	r21, 0x00	; 0
    10d4:	6b eb       	ldi	r22, 0xBB	; 187
    10d6:	72 e0       	ldi	r23, 0x02	; 2
    10d8:	85 e9       	ldi	r24, 0x95	; 149
    10da:	93 e0       	ldi	r25, 0x03	; 3
    10dc:	0c 94 57 17 	jmp	0x2eae	; 0x2eae <_ZN7TwoWire5writeEPKhj>

000010e0 <__subsf3>:
    10e0:	50 58       	subi	r21, 0x80	; 128

000010e2 <__addsf3>:
    10e2:	bb 27       	eor	r27, r27
    10e4:	aa 27       	eor	r26, r26
    10e6:	0e 94 88 08 	call	0x1110	; 0x1110 <__addsf3x>
    10ea:	0c 94 02 0a 	jmp	0x1404	; 0x1404 <__fp_round>
    10ee:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <__fp_pscA>
    10f2:	38 f0       	brcs	.+14     	; 0x1102 <__addsf3+0x20>
    10f4:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <__fp_pscB>
    10f8:	20 f0       	brcs	.+8      	; 0x1102 <__addsf3+0x20>
    10fa:	39 f4       	brne	.+14     	; 0x110a <__addsf3+0x28>
    10fc:	9f 3f       	cpi	r25, 0xFF	; 255
    10fe:	19 f4       	brne	.+6      	; 0x1106 <__addsf3+0x24>
    1100:	26 f4       	brtc	.+8      	; 0x110a <__addsf3+0x28>
    1102:	0c 94 f1 09 	jmp	0x13e2	; 0x13e2 <__fp_nan>
    1106:	0e f4       	brtc	.+2      	; 0x110a <__addsf3+0x28>
    1108:	e0 95       	com	r30
    110a:	e7 fb       	bst	r30, 7
    110c:	0c 94 eb 09 	jmp	0x13d6	; 0x13d6 <__fp_inf>

00001110 <__addsf3x>:
    1110:	e9 2f       	mov	r30, r25
    1112:	0e 94 13 0a 	call	0x1426	; 0x1426 <__fp_split3>
    1116:	58 f3       	brcs	.-42     	; 0x10ee <__addsf3+0xc>
    1118:	ba 17       	cp	r27, r26
    111a:	62 07       	cpc	r22, r18
    111c:	73 07       	cpc	r23, r19
    111e:	84 07       	cpc	r24, r20
    1120:	95 07       	cpc	r25, r21
    1122:	20 f0       	brcs	.+8      	; 0x112c <__addsf3x+0x1c>
    1124:	79 f4       	brne	.+30     	; 0x1144 <__addsf3x+0x34>
    1126:	a6 f5       	brtc	.+104    	; 0x1190 <__addsf3x+0x80>
    1128:	0c 94 35 0a 	jmp	0x146a	; 0x146a <__fp_zero>
    112c:	0e f4       	brtc	.+2      	; 0x1130 <__addsf3x+0x20>
    112e:	e0 95       	com	r30
    1130:	0b 2e       	mov	r0, r27
    1132:	ba 2f       	mov	r27, r26
    1134:	a0 2d       	mov	r26, r0
    1136:	0b 01       	movw	r0, r22
    1138:	b9 01       	movw	r22, r18
    113a:	90 01       	movw	r18, r0
    113c:	0c 01       	movw	r0, r24
    113e:	ca 01       	movw	r24, r20
    1140:	a0 01       	movw	r20, r0
    1142:	11 24       	eor	r1, r1
    1144:	ff 27       	eor	r31, r31
    1146:	59 1b       	sub	r21, r25
    1148:	99 f0       	breq	.+38     	; 0x1170 <__addsf3x+0x60>
    114a:	59 3f       	cpi	r21, 0xF9	; 249
    114c:	50 f4       	brcc	.+20     	; 0x1162 <__addsf3x+0x52>
    114e:	50 3e       	cpi	r21, 0xE0	; 224
    1150:	68 f1       	brcs	.+90     	; 0x11ac <__addsf3x+0x9c>
    1152:	1a 16       	cp	r1, r26
    1154:	f0 40       	sbci	r31, 0x00	; 0
    1156:	a2 2f       	mov	r26, r18
    1158:	23 2f       	mov	r18, r19
    115a:	34 2f       	mov	r19, r20
    115c:	44 27       	eor	r20, r20
    115e:	58 5f       	subi	r21, 0xF8	; 248
    1160:	f3 cf       	rjmp	.-26     	; 0x1148 <__addsf3x+0x38>
    1162:	46 95       	lsr	r20
    1164:	37 95       	ror	r19
    1166:	27 95       	ror	r18
    1168:	a7 95       	ror	r26
    116a:	f0 40       	sbci	r31, 0x00	; 0
    116c:	53 95       	inc	r21
    116e:	c9 f7       	brne	.-14     	; 0x1162 <__addsf3x+0x52>
    1170:	7e f4       	brtc	.+30     	; 0x1190 <__addsf3x+0x80>
    1172:	1f 16       	cp	r1, r31
    1174:	ba 0b       	sbc	r27, r26
    1176:	62 0b       	sbc	r22, r18
    1178:	73 0b       	sbc	r23, r19
    117a:	84 0b       	sbc	r24, r20
    117c:	ba f0       	brmi	.+46     	; 0x11ac <__addsf3x+0x9c>
    117e:	91 50       	subi	r25, 0x01	; 1
    1180:	a1 f0       	breq	.+40     	; 0x11aa <__addsf3x+0x9a>
    1182:	ff 0f       	add	r31, r31
    1184:	bb 1f       	adc	r27, r27
    1186:	66 1f       	adc	r22, r22
    1188:	77 1f       	adc	r23, r23
    118a:	88 1f       	adc	r24, r24
    118c:	c2 f7       	brpl	.-16     	; 0x117e <__addsf3x+0x6e>
    118e:	0e c0       	rjmp	.+28     	; 0x11ac <__addsf3x+0x9c>
    1190:	ba 0f       	add	r27, r26
    1192:	62 1f       	adc	r22, r18
    1194:	73 1f       	adc	r23, r19
    1196:	84 1f       	adc	r24, r20
    1198:	48 f4       	brcc	.+18     	; 0x11ac <__addsf3x+0x9c>
    119a:	87 95       	ror	r24
    119c:	77 95       	ror	r23
    119e:	67 95       	ror	r22
    11a0:	b7 95       	ror	r27
    11a2:	f7 95       	ror	r31
    11a4:	9e 3f       	cpi	r25, 0xFE	; 254
    11a6:	08 f0       	brcs	.+2      	; 0x11aa <__addsf3x+0x9a>
    11a8:	b0 cf       	rjmp	.-160    	; 0x110a <__addsf3+0x28>
    11aa:	93 95       	inc	r25
    11ac:	88 0f       	add	r24, r24
    11ae:	08 f0       	brcs	.+2      	; 0x11b2 <__addsf3x+0xa2>
    11b0:	99 27       	eor	r25, r25
    11b2:	ee 0f       	add	r30, r30
    11b4:	97 95       	ror	r25
    11b6:	87 95       	ror	r24
    11b8:	08 95       	ret

000011ba <__cmpsf2>:
    11ba:	0e 94 c7 09 	call	0x138e	; 0x138e <__fp_cmp>
    11be:	08 f4       	brcc	.+2      	; 0x11c2 <__cmpsf2+0x8>
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	08 95       	ret

000011c4 <__divsf3>:
    11c4:	0e 94 f6 08 	call	0x11ec	; 0x11ec <__divsf3x>
    11c8:	0c 94 02 0a 	jmp	0x1404	; 0x1404 <__fp_round>
    11cc:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <__fp_pscB>
    11d0:	58 f0       	brcs	.+22     	; 0x11e8 <__divsf3+0x24>
    11d2:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <__fp_pscA>
    11d6:	40 f0       	brcs	.+16     	; 0x11e8 <__divsf3+0x24>
    11d8:	29 f4       	brne	.+10     	; 0x11e4 <__divsf3+0x20>
    11da:	5f 3f       	cpi	r21, 0xFF	; 255
    11dc:	29 f0       	breq	.+10     	; 0x11e8 <__divsf3+0x24>
    11de:	0c 94 eb 09 	jmp	0x13d6	; 0x13d6 <__fp_inf>
    11e2:	51 11       	cpse	r21, r1
    11e4:	0c 94 36 0a 	jmp	0x146c	; 0x146c <__fp_szero>
    11e8:	0c 94 f1 09 	jmp	0x13e2	; 0x13e2 <__fp_nan>

000011ec <__divsf3x>:
    11ec:	0e 94 13 0a 	call	0x1426	; 0x1426 <__fp_split3>
    11f0:	68 f3       	brcs	.-38     	; 0x11cc <__divsf3+0x8>

000011f2 <__divsf3_pse>:
    11f2:	99 23       	and	r25, r25
    11f4:	b1 f3       	breq	.-20     	; 0x11e2 <__divsf3+0x1e>
    11f6:	55 23       	and	r21, r21
    11f8:	91 f3       	breq	.-28     	; 0x11de <__divsf3+0x1a>
    11fa:	95 1b       	sub	r25, r21
    11fc:	55 0b       	sbc	r21, r21
    11fe:	bb 27       	eor	r27, r27
    1200:	aa 27       	eor	r26, r26
    1202:	62 17       	cp	r22, r18
    1204:	73 07       	cpc	r23, r19
    1206:	84 07       	cpc	r24, r20
    1208:	38 f0       	brcs	.+14     	; 0x1218 <__divsf3_pse+0x26>
    120a:	9f 5f       	subi	r25, 0xFF	; 255
    120c:	5f 4f       	sbci	r21, 0xFF	; 255
    120e:	22 0f       	add	r18, r18
    1210:	33 1f       	adc	r19, r19
    1212:	44 1f       	adc	r20, r20
    1214:	aa 1f       	adc	r26, r26
    1216:	a9 f3       	breq	.-22     	; 0x1202 <__divsf3_pse+0x10>
    1218:	35 d0       	rcall	.+106    	; 0x1284 <__divsf3_pse+0x92>
    121a:	0e 2e       	mov	r0, r30
    121c:	3a f0       	brmi	.+14     	; 0x122c <__divsf3_pse+0x3a>
    121e:	e0 e8       	ldi	r30, 0x80	; 128
    1220:	32 d0       	rcall	.+100    	; 0x1286 <__divsf3_pse+0x94>
    1222:	91 50       	subi	r25, 0x01	; 1
    1224:	50 40       	sbci	r21, 0x00	; 0
    1226:	e6 95       	lsr	r30
    1228:	00 1c       	adc	r0, r0
    122a:	ca f7       	brpl	.-14     	; 0x121e <__divsf3_pse+0x2c>
    122c:	2b d0       	rcall	.+86     	; 0x1284 <__divsf3_pse+0x92>
    122e:	fe 2f       	mov	r31, r30
    1230:	29 d0       	rcall	.+82     	; 0x1284 <__divsf3_pse+0x92>
    1232:	66 0f       	add	r22, r22
    1234:	77 1f       	adc	r23, r23
    1236:	88 1f       	adc	r24, r24
    1238:	bb 1f       	adc	r27, r27
    123a:	26 17       	cp	r18, r22
    123c:	37 07       	cpc	r19, r23
    123e:	48 07       	cpc	r20, r24
    1240:	ab 07       	cpc	r26, r27
    1242:	b0 e8       	ldi	r27, 0x80	; 128
    1244:	09 f0       	breq	.+2      	; 0x1248 <__divsf3_pse+0x56>
    1246:	bb 0b       	sbc	r27, r27
    1248:	80 2d       	mov	r24, r0
    124a:	bf 01       	movw	r22, r30
    124c:	ff 27       	eor	r31, r31
    124e:	93 58       	subi	r25, 0x83	; 131
    1250:	5f 4f       	sbci	r21, 0xFF	; 255
    1252:	3a f0       	brmi	.+14     	; 0x1262 <__divsf3_pse+0x70>
    1254:	9e 3f       	cpi	r25, 0xFE	; 254
    1256:	51 05       	cpc	r21, r1
    1258:	78 f0       	brcs	.+30     	; 0x1278 <__divsf3_pse+0x86>
    125a:	0c 94 eb 09 	jmp	0x13d6	; 0x13d6 <__fp_inf>
    125e:	0c 94 36 0a 	jmp	0x146c	; 0x146c <__fp_szero>
    1262:	5f 3f       	cpi	r21, 0xFF	; 255
    1264:	e4 f3       	brlt	.-8      	; 0x125e <__divsf3_pse+0x6c>
    1266:	98 3e       	cpi	r25, 0xE8	; 232
    1268:	d4 f3       	brlt	.-12     	; 0x125e <__divsf3_pse+0x6c>
    126a:	86 95       	lsr	r24
    126c:	77 95       	ror	r23
    126e:	67 95       	ror	r22
    1270:	b7 95       	ror	r27
    1272:	f7 95       	ror	r31
    1274:	9f 5f       	subi	r25, 0xFF	; 255
    1276:	c9 f7       	brne	.-14     	; 0x126a <__divsf3_pse+0x78>
    1278:	88 0f       	add	r24, r24
    127a:	91 1d       	adc	r25, r1
    127c:	96 95       	lsr	r25
    127e:	87 95       	ror	r24
    1280:	97 f9       	bld	r25, 7
    1282:	08 95       	ret
    1284:	e1 e0       	ldi	r30, 0x01	; 1
    1286:	66 0f       	add	r22, r22
    1288:	77 1f       	adc	r23, r23
    128a:	88 1f       	adc	r24, r24
    128c:	bb 1f       	adc	r27, r27
    128e:	62 17       	cp	r22, r18
    1290:	73 07       	cpc	r23, r19
    1292:	84 07       	cpc	r24, r20
    1294:	ba 07       	cpc	r27, r26
    1296:	20 f0       	brcs	.+8      	; 0x12a0 <__divsf3_pse+0xae>
    1298:	62 1b       	sub	r22, r18
    129a:	73 0b       	sbc	r23, r19
    129c:	84 0b       	sbc	r24, r20
    129e:	ba 0b       	sbc	r27, r26
    12a0:	ee 1f       	adc	r30, r30
    12a2:	88 f7       	brcc	.-30     	; 0x1286 <__divsf3_pse+0x94>
    12a4:	e0 95       	com	r30
    12a6:	08 95       	ret

000012a8 <__fixsfsi>:
    12a8:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <__fixunssfsi>
    12ac:	68 94       	set
    12ae:	b1 11       	cpse	r27, r1
    12b0:	0c 94 36 0a 	jmp	0x146c	; 0x146c <__fp_szero>
    12b4:	08 95       	ret

000012b6 <__fixunssfsi>:
    12b6:	0e 94 1b 0a 	call	0x1436	; 0x1436 <__fp_splitA>
    12ba:	88 f0       	brcs	.+34     	; 0x12de <__fixunssfsi+0x28>
    12bc:	9f 57       	subi	r25, 0x7F	; 127
    12be:	98 f0       	brcs	.+38     	; 0x12e6 <__fixunssfsi+0x30>
    12c0:	b9 2f       	mov	r27, r25
    12c2:	99 27       	eor	r25, r25
    12c4:	b7 51       	subi	r27, 0x17	; 23
    12c6:	b0 f0       	brcs	.+44     	; 0x12f4 <__fixunssfsi+0x3e>
    12c8:	e1 f0       	breq	.+56     	; 0x1302 <__fixunssfsi+0x4c>
    12ca:	66 0f       	add	r22, r22
    12cc:	77 1f       	adc	r23, r23
    12ce:	88 1f       	adc	r24, r24
    12d0:	99 1f       	adc	r25, r25
    12d2:	1a f0       	brmi	.+6      	; 0x12da <__fixunssfsi+0x24>
    12d4:	ba 95       	dec	r27
    12d6:	c9 f7       	brne	.-14     	; 0x12ca <__fixunssfsi+0x14>
    12d8:	14 c0       	rjmp	.+40     	; 0x1302 <__fixunssfsi+0x4c>
    12da:	b1 30       	cpi	r27, 0x01	; 1
    12dc:	91 f0       	breq	.+36     	; 0x1302 <__fixunssfsi+0x4c>
    12de:	0e 94 35 0a 	call	0x146a	; 0x146a <__fp_zero>
    12e2:	b1 e0       	ldi	r27, 0x01	; 1
    12e4:	08 95       	ret
    12e6:	0c 94 35 0a 	jmp	0x146a	; 0x146a <__fp_zero>
    12ea:	67 2f       	mov	r22, r23
    12ec:	78 2f       	mov	r23, r24
    12ee:	88 27       	eor	r24, r24
    12f0:	b8 5f       	subi	r27, 0xF8	; 248
    12f2:	39 f0       	breq	.+14     	; 0x1302 <__fixunssfsi+0x4c>
    12f4:	b9 3f       	cpi	r27, 0xF9	; 249
    12f6:	cc f3       	brlt	.-14     	; 0x12ea <__fixunssfsi+0x34>
    12f8:	86 95       	lsr	r24
    12fa:	77 95       	ror	r23
    12fc:	67 95       	ror	r22
    12fe:	b3 95       	inc	r27
    1300:	d9 f7       	brne	.-10     	; 0x12f8 <__fixunssfsi+0x42>
    1302:	3e f4       	brtc	.+14     	; 0x1312 <__fixunssfsi+0x5c>
    1304:	90 95       	com	r25
    1306:	80 95       	com	r24
    1308:	70 95       	com	r23
    130a:	61 95       	neg	r22
    130c:	7f 4f       	sbci	r23, 0xFF	; 255
    130e:	8f 4f       	sbci	r24, 0xFF	; 255
    1310:	9f 4f       	sbci	r25, 0xFF	; 255
    1312:	08 95       	ret

00001314 <__floatunsisf>:
    1314:	e8 94       	clt
    1316:	09 c0       	rjmp	.+18     	; 0x132a <__floatsisf+0x12>

00001318 <__floatsisf>:
    1318:	97 fb       	bst	r25, 7
    131a:	3e f4       	brtc	.+14     	; 0x132a <__floatsisf+0x12>
    131c:	90 95       	com	r25
    131e:	80 95       	com	r24
    1320:	70 95       	com	r23
    1322:	61 95       	neg	r22
    1324:	7f 4f       	sbci	r23, 0xFF	; 255
    1326:	8f 4f       	sbci	r24, 0xFF	; 255
    1328:	9f 4f       	sbci	r25, 0xFF	; 255
    132a:	99 23       	and	r25, r25
    132c:	a9 f0       	breq	.+42     	; 0x1358 <__floatsisf+0x40>
    132e:	f9 2f       	mov	r31, r25
    1330:	96 e9       	ldi	r25, 0x96	; 150
    1332:	bb 27       	eor	r27, r27
    1334:	93 95       	inc	r25
    1336:	f6 95       	lsr	r31
    1338:	87 95       	ror	r24
    133a:	77 95       	ror	r23
    133c:	67 95       	ror	r22
    133e:	b7 95       	ror	r27
    1340:	f1 11       	cpse	r31, r1
    1342:	f8 cf       	rjmp	.-16     	; 0x1334 <__floatsisf+0x1c>
    1344:	fa f4       	brpl	.+62     	; 0x1384 <__floatsisf+0x6c>
    1346:	bb 0f       	add	r27, r27
    1348:	11 f4       	brne	.+4      	; 0x134e <__floatsisf+0x36>
    134a:	60 ff       	sbrs	r22, 0
    134c:	1b c0       	rjmp	.+54     	; 0x1384 <__floatsisf+0x6c>
    134e:	6f 5f       	subi	r22, 0xFF	; 255
    1350:	7f 4f       	sbci	r23, 0xFF	; 255
    1352:	8f 4f       	sbci	r24, 0xFF	; 255
    1354:	9f 4f       	sbci	r25, 0xFF	; 255
    1356:	16 c0       	rjmp	.+44     	; 0x1384 <__floatsisf+0x6c>
    1358:	88 23       	and	r24, r24
    135a:	11 f0       	breq	.+4      	; 0x1360 <__floatsisf+0x48>
    135c:	96 e9       	ldi	r25, 0x96	; 150
    135e:	11 c0       	rjmp	.+34     	; 0x1382 <__floatsisf+0x6a>
    1360:	77 23       	and	r23, r23
    1362:	21 f0       	breq	.+8      	; 0x136c <__floatsisf+0x54>
    1364:	9e e8       	ldi	r25, 0x8E	; 142
    1366:	87 2f       	mov	r24, r23
    1368:	76 2f       	mov	r23, r22
    136a:	05 c0       	rjmp	.+10     	; 0x1376 <__floatsisf+0x5e>
    136c:	66 23       	and	r22, r22
    136e:	71 f0       	breq	.+28     	; 0x138c <__floatsisf+0x74>
    1370:	96 e8       	ldi	r25, 0x86	; 134
    1372:	86 2f       	mov	r24, r22
    1374:	70 e0       	ldi	r23, 0x00	; 0
    1376:	60 e0       	ldi	r22, 0x00	; 0
    1378:	2a f0       	brmi	.+10     	; 0x1384 <__floatsisf+0x6c>
    137a:	9a 95       	dec	r25
    137c:	66 0f       	add	r22, r22
    137e:	77 1f       	adc	r23, r23
    1380:	88 1f       	adc	r24, r24
    1382:	da f7       	brpl	.-10     	; 0x137a <__floatsisf+0x62>
    1384:	88 0f       	add	r24, r24
    1386:	96 95       	lsr	r25
    1388:	87 95       	ror	r24
    138a:	97 f9       	bld	r25, 7
    138c:	08 95       	ret

0000138e <__fp_cmp>:
    138e:	99 0f       	add	r25, r25
    1390:	00 08       	sbc	r0, r0
    1392:	55 0f       	add	r21, r21
    1394:	aa 0b       	sbc	r26, r26
    1396:	e0 e8       	ldi	r30, 0x80	; 128
    1398:	fe ef       	ldi	r31, 0xFE	; 254
    139a:	16 16       	cp	r1, r22
    139c:	17 06       	cpc	r1, r23
    139e:	e8 07       	cpc	r30, r24
    13a0:	f9 07       	cpc	r31, r25
    13a2:	c0 f0       	brcs	.+48     	; 0x13d4 <__fp_cmp+0x46>
    13a4:	12 16       	cp	r1, r18
    13a6:	13 06       	cpc	r1, r19
    13a8:	e4 07       	cpc	r30, r20
    13aa:	f5 07       	cpc	r31, r21
    13ac:	98 f0       	brcs	.+38     	; 0x13d4 <__fp_cmp+0x46>
    13ae:	62 1b       	sub	r22, r18
    13b0:	73 0b       	sbc	r23, r19
    13b2:	84 0b       	sbc	r24, r20
    13b4:	95 0b       	sbc	r25, r21
    13b6:	39 f4       	brne	.+14     	; 0x13c6 <__fp_cmp+0x38>
    13b8:	0a 26       	eor	r0, r26
    13ba:	61 f0       	breq	.+24     	; 0x13d4 <__fp_cmp+0x46>
    13bc:	23 2b       	or	r18, r19
    13be:	24 2b       	or	r18, r20
    13c0:	25 2b       	or	r18, r21
    13c2:	21 f4       	brne	.+8      	; 0x13cc <__fp_cmp+0x3e>
    13c4:	08 95       	ret
    13c6:	0a 26       	eor	r0, r26
    13c8:	09 f4       	brne	.+2      	; 0x13cc <__fp_cmp+0x3e>
    13ca:	a1 40       	sbci	r26, 0x01	; 1
    13cc:	a6 95       	lsr	r26
    13ce:	8f ef       	ldi	r24, 0xFF	; 255
    13d0:	81 1d       	adc	r24, r1
    13d2:	81 1d       	adc	r24, r1
    13d4:	08 95       	ret

000013d6 <__fp_inf>:
    13d6:	97 f9       	bld	r25, 7
    13d8:	9f 67       	ori	r25, 0x7F	; 127
    13da:	80 e8       	ldi	r24, 0x80	; 128
    13dc:	70 e0       	ldi	r23, 0x00	; 0
    13de:	60 e0       	ldi	r22, 0x00	; 0
    13e0:	08 95       	ret

000013e2 <__fp_nan>:
    13e2:	9f ef       	ldi	r25, 0xFF	; 255
    13e4:	80 ec       	ldi	r24, 0xC0	; 192
    13e6:	08 95       	ret

000013e8 <__fp_pscA>:
    13e8:	00 24       	eor	r0, r0
    13ea:	0a 94       	dec	r0
    13ec:	16 16       	cp	r1, r22
    13ee:	17 06       	cpc	r1, r23
    13f0:	18 06       	cpc	r1, r24
    13f2:	09 06       	cpc	r0, r25
    13f4:	08 95       	ret

000013f6 <__fp_pscB>:
    13f6:	00 24       	eor	r0, r0
    13f8:	0a 94       	dec	r0
    13fa:	12 16       	cp	r1, r18
    13fc:	13 06       	cpc	r1, r19
    13fe:	14 06       	cpc	r1, r20
    1400:	05 06       	cpc	r0, r21
    1402:	08 95       	ret

00001404 <__fp_round>:
    1404:	09 2e       	mov	r0, r25
    1406:	03 94       	inc	r0
    1408:	00 0c       	add	r0, r0
    140a:	11 f4       	brne	.+4      	; 0x1410 <__fp_round+0xc>
    140c:	88 23       	and	r24, r24
    140e:	52 f0       	brmi	.+20     	; 0x1424 <__fp_round+0x20>
    1410:	bb 0f       	add	r27, r27
    1412:	40 f4       	brcc	.+16     	; 0x1424 <__fp_round+0x20>
    1414:	bf 2b       	or	r27, r31
    1416:	11 f4       	brne	.+4      	; 0x141c <__fp_round+0x18>
    1418:	60 ff       	sbrs	r22, 0
    141a:	04 c0       	rjmp	.+8      	; 0x1424 <__fp_round+0x20>
    141c:	6f 5f       	subi	r22, 0xFF	; 255
    141e:	7f 4f       	sbci	r23, 0xFF	; 255
    1420:	8f 4f       	sbci	r24, 0xFF	; 255
    1422:	9f 4f       	sbci	r25, 0xFF	; 255
    1424:	08 95       	ret

00001426 <__fp_split3>:
    1426:	57 fd       	sbrc	r21, 7
    1428:	90 58       	subi	r25, 0x80	; 128
    142a:	44 0f       	add	r20, r20
    142c:	55 1f       	adc	r21, r21
    142e:	59 f0       	breq	.+22     	; 0x1446 <__fp_splitA+0x10>
    1430:	5f 3f       	cpi	r21, 0xFF	; 255
    1432:	71 f0       	breq	.+28     	; 0x1450 <__fp_splitA+0x1a>
    1434:	47 95       	ror	r20

00001436 <__fp_splitA>:
    1436:	88 0f       	add	r24, r24
    1438:	97 fb       	bst	r25, 7
    143a:	99 1f       	adc	r25, r25
    143c:	61 f0       	breq	.+24     	; 0x1456 <__fp_splitA+0x20>
    143e:	9f 3f       	cpi	r25, 0xFF	; 255
    1440:	79 f0       	breq	.+30     	; 0x1460 <__fp_splitA+0x2a>
    1442:	87 95       	ror	r24
    1444:	08 95       	ret
    1446:	12 16       	cp	r1, r18
    1448:	13 06       	cpc	r1, r19
    144a:	14 06       	cpc	r1, r20
    144c:	55 1f       	adc	r21, r21
    144e:	f2 cf       	rjmp	.-28     	; 0x1434 <__fp_split3+0xe>
    1450:	46 95       	lsr	r20
    1452:	f1 df       	rcall	.-30     	; 0x1436 <__fp_splitA>
    1454:	08 c0       	rjmp	.+16     	; 0x1466 <__fp_splitA+0x30>
    1456:	16 16       	cp	r1, r22
    1458:	17 06       	cpc	r1, r23
    145a:	18 06       	cpc	r1, r24
    145c:	99 1f       	adc	r25, r25
    145e:	f1 cf       	rjmp	.-30     	; 0x1442 <__fp_splitA+0xc>
    1460:	86 95       	lsr	r24
    1462:	71 05       	cpc	r23, r1
    1464:	61 05       	cpc	r22, r1
    1466:	08 94       	sec
    1468:	08 95       	ret

0000146a <__fp_zero>:
    146a:	e8 94       	clt

0000146c <__fp_szero>:
    146c:	bb 27       	eor	r27, r27
    146e:	66 27       	eor	r22, r22
    1470:	77 27       	eor	r23, r23
    1472:	cb 01       	movw	r24, r22
    1474:	97 f9       	bld	r25, 7
    1476:	08 95       	ret

00001478 <__gesf2>:
    1478:	0e 94 c7 09 	call	0x138e	; 0x138e <__fp_cmp>
    147c:	08 f4       	brcc	.+2      	; 0x1480 <__gesf2+0x8>
    147e:	8f ef       	ldi	r24, 0xFF	; 255
    1480:	08 95       	ret

00001482 <__mulsf3>:
    1482:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <__mulsf3x>
    1486:	0c 94 02 0a 	jmp	0x1404	; 0x1404 <__fp_round>
    148a:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <__fp_pscA>
    148e:	38 f0       	brcs	.+14     	; 0x149e <__mulsf3+0x1c>
    1490:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <__fp_pscB>
    1494:	20 f0       	brcs	.+8      	; 0x149e <__mulsf3+0x1c>
    1496:	95 23       	and	r25, r21
    1498:	11 f0       	breq	.+4      	; 0x149e <__mulsf3+0x1c>
    149a:	0c 94 eb 09 	jmp	0x13d6	; 0x13d6 <__fp_inf>
    149e:	0c 94 f1 09 	jmp	0x13e2	; 0x13e2 <__fp_nan>
    14a2:	11 24       	eor	r1, r1
    14a4:	0c 94 36 0a 	jmp	0x146c	; 0x146c <__fp_szero>

000014a8 <__mulsf3x>:
    14a8:	0e 94 13 0a 	call	0x1426	; 0x1426 <__fp_split3>
    14ac:	70 f3       	brcs	.-36     	; 0x148a <__mulsf3+0x8>

000014ae <__mulsf3_pse>:
    14ae:	95 9f       	mul	r25, r21
    14b0:	c1 f3       	breq	.-16     	; 0x14a2 <__mulsf3+0x20>
    14b2:	95 0f       	add	r25, r21
    14b4:	50 e0       	ldi	r21, 0x00	; 0
    14b6:	55 1f       	adc	r21, r21
    14b8:	62 9f       	mul	r22, r18
    14ba:	f0 01       	movw	r30, r0
    14bc:	72 9f       	mul	r23, r18
    14be:	bb 27       	eor	r27, r27
    14c0:	f0 0d       	add	r31, r0
    14c2:	b1 1d       	adc	r27, r1
    14c4:	63 9f       	mul	r22, r19
    14c6:	aa 27       	eor	r26, r26
    14c8:	f0 0d       	add	r31, r0
    14ca:	b1 1d       	adc	r27, r1
    14cc:	aa 1f       	adc	r26, r26
    14ce:	64 9f       	mul	r22, r20
    14d0:	66 27       	eor	r22, r22
    14d2:	b0 0d       	add	r27, r0
    14d4:	a1 1d       	adc	r26, r1
    14d6:	66 1f       	adc	r22, r22
    14d8:	82 9f       	mul	r24, r18
    14da:	22 27       	eor	r18, r18
    14dc:	b0 0d       	add	r27, r0
    14de:	a1 1d       	adc	r26, r1
    14e0:	62 1f       	adc	r22, r18
    14e2:	73 9f       	mul	r23, r19
    14e4:	b0 0d       	add	r27, r0
    14e6:	a1 1d       	adc	r26, r1
    14e8:	62 1f       	adc	r22, r18
    14ea:	83 9f       	mul	r24, r19
    14ec:	a0 0d       	add	r26, r0
    14ee:	61 1d       	adc	r22, r1
    14f0:	22 1f       	adc	r18, r18
    14f2:	74 9f       	mul	r23, r20
    14f4:	33 27       	eor	r19, r19
    14f6:	a0 0d       	add	r26, r0
    14f8:	61 1d       	adc	r22, r1
    14fa:	23 1f       	adc	r18, r19
    14fc:	84 9f       	mul	r24, r20
    14fe:	60 0d       	add	r22, r0
    1500:	21 1d       	adc	r18, r1
    1502:	82 2f       	mov	r24, r18
    1504:	76 2f       	mov	r23, r22
    1506:	6a 2f       	mov	r22, r26
    1508:	11 24       	eor	r1, r1
    150a:	9f 57       	subi	r25, 0x7F	; 127
    150c:	50 40       	sbci	r21, 0x00	; 0
    150e:	9a f0       	brmi	.+38     	; 0x1536 <__mulsf3_pse+0x88>
    1510:	f1 f0       	breq	.+60     	; 0x154e <__mulsf3_pse+0xa0>
    1512:	88 23       	and	r24, r24
    1514:	4a f0       	brmi	.+18     	; 0x1528 <__mulsf3_pse+0x7a>
    1516:	ee 0f       	add	r30, r30
    1518:	ff 1f       	adc	r31, r31
    151a:	bb 1f       	adc	r27, r27
    151c:	66 1f       	adc	r22, r22
    151e:	77 1f       	adc	r23, r23
    1520:	88 1f       	adc	r24, r24
    1522:	91 50       	subi	r25, 0x01	; 1
    1524:	50 40       	sbci	r21, 0x00	; 0
    1526:	a9 f7       	brne	.-22     	; 0x1512 <__mulsf3_pse+0x64>
    1528:	9e 3f       	cpi	r25, 0xFE	; 254
    152a:	51 05       	cpc	r21, r1
    152c:	80 f0       	brcs	.+32     	; 0x154e <__mulsf3_pse+0xa0>
    152e:	0c 94 eb 09 	jmp	0x13d6	; 0x13d6 <__fp_inf>
    1532:	0c 94 36 0a 	jmp	0x146c	; 0x146c <__fp_szero>
    1536:	5f 3f       	cpi	r21, 0xFF	; 255
    1538:	e4 f3       	brlt	.-8      	; 0x1532 <__mulsf3_pse+0x84>
    153a:	98 3e       	cpi	r25, 0xE8	; 232
    153c:	d4 f3       	brlt	.-12     	; 0x1532 <__mulsf3_pse+0x84>
    153e:	86 95       	lsr	r24
    1540:	77 95       	ror	r23
    1542:	67 95       	ror	r22
    1544:	b7 95       	ror	r27
    1546:	f7 95       	ror	r31
    1548:	e7 95       	ror	r30
    154a:	9f 5f       	subi	r25, 0xFF	; 255
    154c:	c1 f7       	brne	.-16     	; 0x153e <__mulsf3_pse+0x90>
    154e:	fe 2b       	or	r31, r30
    1550:	88 0f       	add	r24, r24
    1552:	91 1d       	adc	r25, r1
    1554:	96 95       	lsr	r25
    1556:	87 95       	ror	r24
    1558:	97 f9       	bld	r25, 7
    155a:	08 95       	ret

0000155c <_ZN14HardwareSerial9availableEv>:
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    155c:	fc 01       	movw	r30, r24
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    155e:	91 8d       	ldd	r25, Z+25	; 0x19
    1560:	22 8d       	ldd	r18, Z+26	; 0x1a
    1562:	89 2f       	mov	r24, r25
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	80 5c       	subi	r24, 0xC0	; 192
    1568:	9f 4f       	sbci	r25, 0xFF	; 255
    156a:	82 1b       	sub	r24, r18
    156c:	91 09       	sbc	r25, r1
}
    156e:	8f 73       	andi	r24, 0x3F	; 63
    1570:	99 27       	eor	r25, r25
    1572:	08 95       	ret

00001574 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
    1574:	fc 01       	movw	r30, r24
  if (_rx_buffer_head == _rx_buffer_tail) {
    1576:	91 8d       	ldd	r25, Z+25	; 0x19
    1578:	82 8d       	ldd	r24, Z+26	; 0x1a
    157a:	98 17       	cp	r25, r24
    157c:	31 f0       	breq	.+12     	; 0x158a <_ZN14HardwareSerial4peekEv+0x16>
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    157e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1580:	e8 0f       	add	r30, r24
    1582:	f1 1d       	adc	r31, r1
    1584:	85 8d       	ldd	r24, Z+29	; 0x1d
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	08 95       	ret
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    158a:	8f ef       	ldi	r24, 0xFF	; 255
    158c:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    158e:	08 95       	ret

00001590 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
    1590:	fc 01       	movw	r30, r24
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1592:	91 8d       	ldd	r25, Z+25	; 0x19
    1594:	82 8d       	ldd	r24, Z+26	; 0x1a
    1596:	98 17       	cp	r25, r24
    1598:	61 f0       	breq	.+24     	; 0x15b2 <_ZN14HardwareSerial4readEv+0x22>
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    159a:	82 8d       	ldd	r24, Z+26	; 0x1a
    159c:	df 01       	movw	r26, r30
    159e:	a8 0f       	add	r26, r24
    15a0:	b1 1d       	adc	r27, r1
    15a2:	5d 96       	adiw	r26, 0x1d	; 29
    15a4:	8c 91       	ld	r24, X
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    15a6:	92 8d       	ldd	r25, Z+26	; 0x1a
    15a8:	9f 5f       	subi	r25, 0xFF	; 255
    15aa:	9f 73       	andi	r25, 0x3F	; 63
    15ac:	92 8f       	std	Z+26, r25	; 0x1a
    return c;
    15ae:	90 e0       	ldi	r25, 0x00	; 0
    15b0:	08 95       	ret

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    15b2:	8f ef       	ldi	r24, 0xFF	; 255
    15b4:	9f ef       	ldi	r25, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    15b6:	08 95       	ret

000015b8 <_Z14serialEventRunv>:
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    15b8:	81 e3       	ldi	r24, 0x31	; 49
    15ba:	9c e0       	ldi	r25, 0x0C	; 12
    15bc:	89 2b       	or	r24, r25
    15be:	49 f0       	breq	.+18     	; 0x15d2 <_Z14serialEventRunv+0x1a>
    15c0:	80 e0       	ldi	r24, 0x00	; 0
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	89 2b       	or	r24, r25
    15c6:	29 f0       	breq	.+10     	; 0x15d2 <_Z14serialEventRunv+0x1a>
    15c8:	0e 94 31 0c 	call	0x1862	; 0x1862 <_Z17Serial1_availablev>
    15cc:	81 11       	cpse	r24, r1
    15ce:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    15d2:	08 95       	ret

000015d4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>:
}

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    15d4:	fc 01       	movw	r30, r24
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    15d6:	84 8d       	ldd	r24, Z+28	; 0x1c
    15d8:	df 01       	movw	r26, r30
    15da:	a8 0f       	add	r26, r24
    15dc:	b1 1d       	adc	r27, r1
    15de:	a3 5a       	subi	r26, 0xA3	; 163
    15e0:	bf 4f       	sbci	r27, 0xFF	; 255
    15e2:	2c 91       	ld	r18, X
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    15e4:	84 8d       	ldd	r24, Z+28	; 0x1c
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	01 96       	adiw	r24, 0x01	; 1
    15ea:	8f 73       	andi	r24, 0x3F	; 63
    15ec:	99 27       	eor	r25, r25
    15ee:	84 8f       	std	Z+28, r24	; 0x1c

  *_udr = c;
    15f0:	a6 89       	ldd	r26, Z+22	; 0x16
    15f2:	b7 89       	ldd	r27, Z+23	; 0x17
    15f4:	2c 93       	st	X, r18

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  sbi(*_ucsra, TXC0);
    15f6:	a0 89       	ldd	r26, Z+16	; 0x10
    15f8:	b1 89       	ldd	r27, Z+17	; 0x11
    15fa:	8c 91       	ld	r24, X
    15fc:	80 64       	ori	r24, 0x40	; 64
    15fe:	8c 93       	st	X, r24

  if (_tx_buffer_head == _tx_buffer_tail) {
    1600:	93 8d       	ldd	r25, Z+27	; 0x1b
    1602:	84 8d       	ldd	r24, Z+28	; 0x1c
    1604:	98 13       	cpse	r25, r24
    1606:	06 c0       	rjmp	.+12     	; 0x1614 <_ZN14HardwareSerial17_tx_udr_empty_irqEv+0x40>
    // Buffer empty, so disable interrupts
    cbi(*_ucsrb, UDRIE0);
    1608:	02 88       	ldd	r0, Z+18	; 0x12
    160a:	f3 89       	ldd	r31, Z+19	; 0x13
    160c:	e0 2d       	mov	r30, r0
    160e:	80 81       	ld	r24, Z
    1610:	8f 7d       	andi	r24, 0xDF	; 223
    1612:	80 83       	st	Z, r24
    1614:	08 95       	ret

00001616 <_ZN14HardwareSerial5writeEh>:
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}

size_t HardwareSerial::write(uint8_t c)
{
    1616:	ef 92       	push	r14
    1618:	ff 92       	push	r15
    161a:	0f 93       	push	r16
    161c:	1f 93       	push	r17
    161e:	cf 93       	push	r28
    1620:	df 93       	push	r29
    1622:	ec 01       	movw	r28, r24
  _written = true;
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	88 8f       	std	Y+24, r24	; 0x18
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1628:	9b 8d       	ldd	r25, Y+27	; 0x1b
    162a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    162c:	98 13       	cpse	r25, r24
    162e:	05 c0       	rjmp	.+10     	; 0x163a <_ZN14HardwareSerial5writeEh+0x24>
    1630:	e8 89       	ldd	r30, Y+16	; 0x10
    1632:	f9 89       	ldd	r31, Y+17	; 0x11
    1634:	80 81       	ld	r24, Z
    1636:	85 fd       	sbrc	r24, 5
    1638:	24 c0       	rjmp	.+72     	; 0x1682 <_ZN14HardwareSerial5writeEh+0x6c>
    163a:	f6 2e       	mov	r15, r22
    *_udr = c;
    sbi(*_ucsra, TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    163c:	0b 8d       	ldd	r16, Y+27	; 0x1b
    163e:	10 e0       	ldi	r17, 0x00	; 0
    1640:	0f 5f       	subi	r16, 0xFF	; 255
    1642:	1f 4f       	sbci	r17, 0xFF	; 255
    1644:	0f 73       	andi	r16, 0x3F	; 63
    1646:	11 27       	eor	r17, r17
    1648:	e0 2e       	mov	r14, r16
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    164a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    164c:	e8 12       	cpse	r14, r24
    164e:	0c c0       	rjmp	.+24     	; 0x1668 <_ZN14HardwareSerial5writeEh+0x52>
    if (bit_is_clear(SREG, SREG_I)) {
    1650:	0f b6       	in	r0, 0x3f	; 63
    1652:	07 fc       	sbrc	r0, 7
    1654:	fa cf       	rjmp	.-12     	; 0x164a <_ZN14HardwareSerial5writeEh+0x34>
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1656:	e8 89       	ldd	r30, Y+16	; 0x10
    1658:	f9 89       	ldd	r31, Y+17	; 0x11
    165a:	80 81       	ld	r24, Z
    165c:	85 ff       	sbrs	r24, 5
    165e:	f5 cf       	rjmp	.-22     	; 0x164a <_ZN14HardwareSerial5writeEh+0x34>
	_tx_udr_empty_irq();
    1660:	ce 01       	movw	r24, r28
    1662:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    1666:	f1 cf       	rjmp	.-30     	; 0x164a <_ZN14HardwareSerial5writeEh+0x34>
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1668:	8b 8d       	ldd	r24, Y+27	; 0x1b
    166a:	fe 01       	movw	r30, r28
    166c:	e8 0f       	add	r30, r24
    166e:	f1 1d       	adc	r31, r1
    1670:	e3 5a       	subi	r30, 0xA3	; 163
    1672:	ff 4f       	sbci	r31, 0xFF	; 255
    1674:	f0 82       	st	Z, r15
  _tx_buffer_head = i;
    1676:	0b 8f       	std	Y+27, r16	; 0x1b
	
  sbi(*_ucsrb, UDRIE0);
    1678:	ea 89       	ldd	r30, Y+18	; 0x12
    167a:	fb 89       	ldd	r31, Y+19	; 0x13
    167c:	80 81       	ld	r24, Z
    167e:	80 62       	ori	r24, 0x20	; 32
    1680:	07 c0       	rjmp	.+14     	; 0x1690 <_ZN14HardwareSerial5writeEh+0x7a>
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    1682:	ee 89       	ldd	r30, Y+22	; 0x16
    1684:	ff 89       	ldd	r31, Y+23	; 0x17
    1686:	60 83       	st	Z, r22
    sbi(*_ucsra, TXC0);
    1688:	e8 89       	ldd	r30, Y+16	; 0x10
    168a:	f9 89       	ldd	r31, Y+17	; 0x11
    168c:	80 81       	ld	r24, Z
    168e:	80 64       	ori	r24, 0x40	; 64
    1690:	80 83       	st	Z, r24
  _tx_buffer_head = i;
	
  sbi(*_ucsrb, UDRIE0);
  
  return 1;
}
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	90 e0       	ldi	r25, 0x00	; 0
    1696:	df 91       	pop	r29
    1698:	cf 91       	pop	r28
    169a:	1f 91       	pop	r17
    169c:	0f 91       	pop	r16
    169e:	ff 90       	pop	r15
    16a0:	ef 90       	pop	r14
    16a2:	08 95       	ret

000016a4 <_ZN14HardwareSerial5flushEv>:
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    16a4:	cf 93       	push	r28
    16a6:	df 93       	push	r29
    16a8:	ec 01       	movw	r28, r24
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    16aa:	88 8d       	ldd	r24, Y+24	; 0x18
    16ac:	88 23       	and	r24, r24
    16ae:	c9 f0       	breq	.+50     	; 0x16e2 <_ZN14HardwareSerial5flushEv+0x3e>
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    16b0:	ea 89       	ldd	r30, Y+18	; 0x12
    16b2:	fb 89       	ldd	r31, Y+19	; 0x13
    16b4:	80 81       	ld	r24, Z
    16b6:	85 fd       	sbrc	r24, 5
    16b8:	05 c0       	rjmp	.+10     	; 0x16c4 <_ZN14HardwareSerial5flushEv+0x20>
    16ba:	a8 89       	ldd	r26, Y+16	; 0x10
    16bc:	b9 89       	ldd	r27, Y+17	; 0x11
    16be:	8c 91       	ld	r24, X
    16c0:	86 fd       	sbrc	r24, 6
    16c2:	0f c0       	rjmp	.+30     	; 0x16e2 <_ZN14HardwareSerial5flushEv+0x3e>
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    16c4:	0f b6       	in	r0, 0x3f	; 63
    16c6:	07 fc       	sbrc	r0, 7
    16c8:	f5 cf       	rjmp	.-22     	; 0x16b4 <_ZN14HardwareSerial5flushEv+0x10>
    16ca:	80 81       	ld	r24, Z
    16cc:	85 ff       	sbrs	r24, 5
    16ce:	f2 cf       	rjmp	.-28     	; 0x16b4 <_ZN14HardwareSerial5flushEv+0x10>
	// Interrupts are globally disabled, but the DR empty
	// interrupt should be enabled, so poll the DR empty flag to
	// prevent deadlock
	if (bit_is_set(*_ucsra, UDRE0))
    16d0:	a8 89       	ldd	r26, Y+16	; 0x10
    16d2:	b9 89       	ldd	r27, Y+17	; 0x11
    16d4:	8c 91       	ld	r24, X
    16d6:	85 ff       	sbrs	r24, 5
    16d8:	ed cf       	rjmp	.-38     	; 0x16b4 <_ZN14HardwareSerial5flushEv+0x10>
	  _tx_udr_empty_irq();
    16da:	ce 01       	movw	r24, r28
    16dc:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
    16e0:	e7 cf       	rjmp	.-50     	; 0x16b0 <_ZN14HardwareSerial5flushEv+0xc>
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    16e2:	df 91       	pop	r29
    16e4:	cf 91       	pop	r28
    16e6:	08 95       	ret

000016e8 <_ZN14HardwareSerial5beginEmh>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    16e8:	cf 92       	push	r12
    16ea:	df 92       	push	r13
    16ec:	ef 92       	push	r14
    16ee:	ff 92       	push	r15
    16f0:	1f 93       	push	r17
    16f2:	cf 93       	push	r28
    16f4:	df 93       	push	r29
    16f6:	ec 01       	movw	r28, r24
    16f8:	6a 01       	movw	r12, r20
    16fa:	7b 01       	movw	r14, r22
    16fc:	12 2f       	mov	r17, r18
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    16fe:	e8 89       	ldd	r30, Y+16	; 0x10
    1700:	f9 89       	ldd	r31, Y+17	; 0x11
    1702:	82 e0       	ldi	r24, 0x02	; 2
    1704:	80 83       	st	Z, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1706:	41 15       	cp	r20, r1
    1708:	51 4e       	sbci	r21, 0xE1	; 225
    170a:	61 05       	cpc	r22, r1
    170c:	71 05       	cpc	r23, r1
    170e:	b1 f0       	breq	.+44     	; 0x173c <_ZN14HardwareSerial5beginEmh+0x54>
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1710:	60 e0       	ldi	r22, 0x00	; 0
    1712:	79 e0       	ldi	r23, 0x09	; 9
    1714:	8d e3       	ldi	r24, 0x3D	; 61
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	a7 01       	movw	r20, r14
    171a:	96 01       	movw	r18, r12
    171c:	0e 94 1a 1b 	call	0x3634	; 0x3634 <__udivmodsi4>
    1720:	da 01       	movw	r26, r20
    1722:	c9 01       	movw	r24, r18
    1724:	01 97       	sbiw	r24, 0x01	; 1
    1726:	a1 09       	sbc	r26, r1
    1728:	b1 09       	sbc	r27, r1
    172a:	b6 95       	lsr	r27
    172c:	a7 95       	ror	r26
    172e:	97 95       	ror	r25
    1730:	87 95       	ror	r24
    1732:	9c 01       	movw	r18, r24
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    1734:	21 15       	cp	r18, r1
    1736:	80 e1       	ldi	r24, 0x10	; 16
    1738:	38 07       	cpc	r19, r24
    173a:	a8 f0       	brcs	.+42     	; 0x1766 <_ZN14HardwareSerial5beginEmh+0x7e>
  {
    *_ucsra = 0;
    173c:	e8 89       	ldd	r30, Y+16	; 0x10
    173e:	f9 89       	ldd	r31, Y+17	; 0x11
    1740:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1742:	60 e8       	ldi	r22, 0x80	; 128
    1744:	74 e8       	ldi	r23, 0x84	; 132
    1746:	8e e1       	ldi	r24, 0x1E	; 30
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	a7 01       	movw	r20, r14
    174c:	96 01       	movw	r18, r12
    174e:	0e 94 1a 1b 	call	0x3634	; 0x3634 <__udivmodsi4>
    1752:	da 01       	movw	r26, r20
    1754:	c9 01       	movw	r24, r18
    1756:	01 97       	sbiw	r24, 0x01	; 1
    1758:	a1 09       	sbc	r26, r1
    175a:	b1 09       	sbc	r27, r1
    175c:	b6 95       	lsr	r27
    175e:	a7 95       	ror	r26
    1760:	97 95       	ror	r25
    1762:	87 95       	ror	r24
    1764:	9c 01       	movw	r18, r24
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1766:	ec 85       	ldd	r30, Y+12	; 0x0c
    1768:	fd 85       	ldd	r31, Y+13	; 0x0d
    176a:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    176c:	ee 85       	ldd	r30, Y+14	; 0x0e
    176e:	ff 85       	ldd	r31, Y+15	; 0x0f
    1770:	20 83       	st	Z, r18

  _written = false;
    1772:	18 8e       	std	Y+24, r1	; 0x18

  //set the data bits, parity, and stop bits
#if defined(__AVR_ATmega8__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    1774:	ec 89       	ldd	r30, Y+20	; 0x14
    1776:	fd 89       	ldd	r31, Y+21	; 0x15
    1778:	10 83       	st	Z, r17
  
  sbi(*_ucsrb, RXEN0);
    177a:	ea 89       	ldd	r30, Y+18	; 0x12
    177c:	fb 89       	ldd	r31, Y+19	; 0x13
    177e:	80 81       	ld	r24, Z
    1780:	80 61       	ori	r24, 0x10	; 16
    1782:	80 83       	st	Z, r24
  sbi(*_ucsrb, TXEN0);
    1784:	ea 89       	ldd	r30, Y+18	; 0x12
    1786:	fb 89       	ldd	r31, Y+19	; 0x13
    1788:	80 81       	ld	r24, Z
    178a:	88 60       	ori	r24, 0x08	; 8
    178c:	80 83       	st	Z, r24
  sbi(*_ucsrb, RXCIE0);
    178e:	ea 89       	ldd	r30, Y+18	; 0x12
    1790:	fb 89       	ldd	r31, Y+19	; 0x13
    1792:	80 81       	ld	r24, Z
    1794:	80 68       	ori	r24, 0x80	; 128
    1796:	80 83       	st	Z, r24
  cbi(*_ucsrb, UDRIE0);
    1798:	ea 89       	ldd	r30, Y+18	; 0x12
    179a:	fb 89       	ldd	r31, Y+19	; 0x13
    179c:	80 81       	ld	r24, Z
    179e:	8f 7d       	andi	r24, 0xDF	; 223
    17a0:	80 83       	st	Z, r24
}
    17a2:	df 91       	pop	r29
    17a4:	cf 91       	pop	r28
    17a6:	1f 91       	pop	r17
    17a8:	ff 90       	pop	r15
    17aa:	ef 90       	pop	r14
    17ac:	df 90       	pop	r13
    17ae:	cf 90       	pop	r12
    17b0:	08 95       	ret

000017b2 <__vector_25>:
#elif defined(USART1_RX_vect)
ISR(USART1_RX_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    17b2:	1f 92       	push	r1
    17b4:	0f 92       	push	r0
    17b6:	0f b6       	in	r0, 0x3f	; 63
    17b8:	0f 92       	push	r0
    17ba:	11 24       	eor	r1, r1
    17bc:	2f 93       	push	r18
    17be:	8f 93       	push	r24
    17c0:	9f 93       	push	r25
    17c2:	ef 93       	push	r30
    17c4:	ff 93       	push	r31

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    17c6:	e0 91 f3 02 	lds	r30, 0x02F3	; 0x8002f3 <Serial1+0x10>
    17ca:	f0 91 f4 02 	lds	r31, 0x02F4	; 0x8002f4 <Serial1+0x11>
    17ce:	80 81       	ld	r24, Z
    17d0:	e0 91 f9 02 	lds	r30, 0x02F9	; 0x8002f9 <Serial1+0x16>
    17d4:	f0 91 fa 02 	lds	r31, 0x02FA	; 0x8002fa <Serial1+0x17>
    17d8:	82 fd       	sbrc	r24, 2
    17da:	12 c0       	rjmp	.+36     	; 0x1800 <__vector_25+0x4e>
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    17dc:	90 81       	ld	r25, Z
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    17de:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <Serial1+0x19>
    17e2:	8f 5f       	subi	r24, 0xFF	; 255
    17e4:	8f 73       	andi	r24, 0x3F	; 63

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    17e6:	20 91 fd 02 	lds	r18, 0x02FD	; 0x8002fd <Serial1+0x1a>
    17ea:	82 17       	cp	r24, r18
    17ec:	51 f0       	breq	.+20     	; 0x1802 <__vector_25+0x50>
      _rx_buffer[_rx_buffer_head] = c;
    17ee:	e0 91 fc 02 	lds	r30, 0x02FC	; 0x8002fc <Serial1+0x19>
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	ed 51       	subi	r30, 0x1D	; 29
    17f6:	fd 4f       	sbci	r31, 0xFD	; 253
    17f8:	95 8f       	std	Z+29, r25	; 0x1d
      _rx_buffer_head = i;
    17fa:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <Serial1+0x19>
    17fe:	01 c0       	rjmp	.+2      	; 0x1802 <__vector_25+0x50>
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    1800:	80 81       	ld	r24, Z
  Serial1._rx_complete_irq();
}
    1802:	ff 91       	pop	r31
    1804:	ef 91       	pop	r30
    1806:	9f 91       	pop	r25
    1808:	8f 91       	pop	r24
    180a:	2f 91       	pop	r18
    180c:	0f 90       	pop	r0
    180e:	0f be       	out	0x3f, r0	; 63
    1810:	0f 90       	pop	r0
    1812:	1f 90       	pop	r1
    1814:	18 95       	reti

00001816 <__vector_26>:
#elif defined(USART1_UDRE_vect)
ISR(USART1_UDRE_vect)
#else
#error "Don't know what the Data Register Empty vector is called for Serial1"
#endif
{
    1816:	1f 92       	push	r1
    1818:	0f 92       	push	r0
    181a:	0f b6       	in	r0, 0x3f	; 63
    181c:	0f 92       	push	r0
    181e:	11 24       	eor	r1, r1
    1820:	2f 93       	push	r18
    1822:	3f 93       	push	r19
    1824:	4f 93       	push	r20
    1826:	5f 93       	push	r21
    1828:	6f 93       	push	r22
    182a:	7f 93       	push	r23
    182c:	8f 93       	push	r24
    182e:	9f 93       	push	r25
    1830:	af 93       	push	r26
    1832:	bf 93       	push	r27
    1834:	ef 93       	push	r30
    1836:	ff 93       	push	r31
  Serial1._tx_udr_empty_irq();
    1838:	83 ee       	ldi	r24, 0xE3	; 227
    183a:	92 e0       	ldi	r25, 0x02	; 2
    183c:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <_ZN14HardwareSerial17_tx_udr_empty_irqEv>
}
    1840:	ff 91       	pop	r31
    1842:	ef 91       	pop	r30
    1844:	bf 91       	pop	r27
    1846:	af 91       	pop	r26
    1848:	9f 91       	pop	r25
    184a:	8f 91       	pop	r24
    184c:	7f 91       	pop	r23
    184e:	6f 91       	pop	r22
    1850:	5f 91       	pop	r21
    1852:	4f 91       	pop	r20
    1854:	3f 91       	pop	r19
    1856:	2f 91       	pop	r18
    1858:	0f 90       	pop	r0
    185a:	0f be       	out	0x3f, r0	; 63
    185c:	0f 90       	pop	r0
    185e:	1f 90       	pop	r1
    1860:	18 95       	reti

00001862 <_Z17Serial1_availablev>:
HardwareSerial Serial1(&UBRR1H, &UBRR1L, &UCSR1A, &UCSR1B, &UCSR1C, &UDR1);

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial1_available() {
  return Serial1.available();
    1862:	83 ee       	ldi	r24, 0xE3	; 227
    1864:	92 e0       	ldi	r25, 0x02	; 2
    1866:	0e 94 ae 0a 	call	0x155c	; 0x155c <_ZN14HardwareSerial9availableEv>
    186a:	21 e0       	ldi	r18, 0x01	; 1
    186c:	89 2b       	or	r24, r25
    186e:	09 f4       	brne	.+2      	; 0x1872 <_Z17Serial1_availablev+0x10>
    1870:	20 e0       	ldi	r18, 0x00	; 0
}
    1872:	82 2f       	mov	r24, r18
    1874:	08 95       	ret

00001876 <_GLOBAL__sub_I___vector_25>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1876:	e3 ee       	ldi	r30, 0xE3	; 227
    1878:	f2 e0       	ldi	r31, 0x02	; 2
    187a:	13 82       	std	Z+3, r1	; 0x03
    187c:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    187e:	88 ee       	ldi	r24, 0xE8	; 232
    1880:	93 e0       	ldi	r25, 0x03	; 3
    1882:	a0 e0       	ldi	r26, 0x00	; 0
    1884:	b0 e0       	ldi	r27, 0x00	; 0
    1886:	84 83       	std	Z+4, r24	; 0x04
    1888:	95 83       	std	Z+5, r25	; 0x05
    188a:	a6 83       	std	Z+6, r26	; 0x06
    188c:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    188e:	85 eb       	ldi	r24, 0xB5	; 181
    1890:	91 e0       	ldi	r25, 0x01	; 1
    1892:	91 83       	std	Z+1, r25	; 0x01
    1894:	80 83       	st	Z, r24
    1896:	8d ec       	ldi	r24, 0xCD	; 205
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	95 87       	std	Z+13, r25	; 0x0d
    189c:	84 87       	std	Z+12, r24	; 0x0c
    189e:	8c ec       	ldi	r24, 0xCC	; 204
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	97 87       	std	Z+15, r25	; 0x0f
    18a4:	86 87       	std	Z+14, r24	; 0x0e
    18a6:	88 ec       	ldi	r24, 0xC8	; 200
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	91 8b       	std	Z+17, r25	; 0x11
    18ac:	80 8b       	std	Z+16, r24	; 0x10
    18ae:	89 ec       	ldi	r24, 0xC9	; 201
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	93 8b       	std	Z+19, r25	; 0x13
    18b4:	82 8b       	std	Z+18, r24	; 0x12
    18b6:	8a ec       	ldi	r24, 0xCA	; 202
    18b8:	90 e0       	ldi	r25, 0x00	; 0
    18ba:	95 8b       	std	Z+21, r25	; 0x15
    18bc:	84 8b       	std	Z+20, r24	; 0x14
    18be:	8e ec       	ldi	r24, 0xCE	; 206
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	97 8b       	std	Z+23, r25	; 0x17
    18c4:	86 8b       	std	Z+22, r24	; 0x16
    18c6:	11 8e       	std	Z+25, r1	; 0x19
    18c8:	12 8e       	std	Z+26, r1	; 0x1a
    18ca:	13 8e       	std	Z+27, r1	; 0x1b
    18cc:	14 8e       	std	Z+28, r1	; 0x1c
    18ce:	08 95       	ret

000018d0 <initVariant>:
    18d0:	08 95       	ret

000018d2 <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    18d2:	0e 94 d5 11 	call	0x23aa	; 0x23aa <init>

	initVariant();
    18d6:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
    18da:	80 e8       	ldi	r24, 0x80	; 128
    18dc:	93 e0       	ldi	r25, 0x03	; 3
    18de:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <_ZN10USBDevice_6attachEv>
#endif
	
	setup();
    18e2:	0e 94 46 02 	call	0x48c	; 0x48c <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    18e6:	cc ed       	ldi	r28, 0xDC	; 220
    18e8:	da e0       	ldi	r29, 0x0A	; 10
#endif
	
	setup();
    
	for (;;) {
		loop();
    18ea:	0e 94 a7 05 	call	0xb4e	; 0xb4e <loop>
		if (serialEventRun) serialEventRun();
    18ee:	20 97       	sbiw	r28, 0x00	; 0
    18f0:	e1 f3       	breq	.-8      	; 0x18ea <main+0x18>
    18f2:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <_Z14serialEventRunv>
    18f6:	f9 cf       	rjmp	.-14     	; 0x18ea <main+0x18>

000018f8 <_ZN5Print5writeEPKhj>:
size_t Print::println(const String &s)
{
  size_t n = print(s);
  n += println();
  return n;
}
    18f8:	cf 92       	push	r12
    18fa:	df 92       	push	r13
    18fc:	ef 92       	push	r14
    18fe:	ff 92       	push	r15
    1900:	0f 93       	push	r16
    1902:	1f 93       	push	r17
    1904:	cf 93       	push	r28
    1906:	df 93       	push	r29
    1908:	6c 01       	movw	r12, r24
    190a:	7a 01       	movw	r14, r20
    190c:	8b 01       	movw	r16, r22
    190e:	c0 e0       	ldi	r28, 0x00	; 0
    1910:	d0 e0       	ldi	r29, 0x00	; 0
    1912:	ce 15       	cp	r28, r14
    1914:	df 05       	cpc	r29, r15
    1916:	81 f0       	breq	.+32     	; 0x1938 <_ZN5Print5writeEPKhj+0x40>
    1918:	d8 01       	movw	r26, r16
    191a:	6d 91       	ld	r22, X+
    191c:	8d 01       	movw	r16, r26
    191e:	d6 01       	movw	r26, r12
    1920:	ed 91       	ld	r30, X+
    1922:	fc 91       	ld	r31, X
    1924:	01 90       	ld	r0, Z+
    1926:	f0 81       	ld	r31, Z
    1928:	e0 2d       	mov	r30, r0
    192a:	c6 01       	movw	r24, r12
    192c:	09 95       	icall
    192e:	89 2b       	or	r24, r25
    1930:	11 f0       	breq	.+4      	; 0x1936 <_ZN5Print5writeEPKhj+0x3e>
    1932:	21 96       	adiw	r28, 0x01	; 1
    1934:	ee cf       	rjmp	.-36     	; 0x1912 <_ZN5Print5writeEPKhj+0x1a>
    1936:	7e 01       	movw	r14, r28
    1938:	c7 01       	movw	r24, r14
    193a:	df 91       	pop	r29
    193c:	cf 91       	pop	r28
    193e:	1f 91       	pop	r17
    1940:	0f 91       	pop	r16
    1942:	ff 90       	pop	r15
    1944:	ef 90       	pop	r14
    1946:	df 90       	pop	r13
    1948:	cf 90       	pop	r12
    194a:	08 95       	ret

0000194c <_ZN5Print5writeEPKc>:
    194c:	61 15       	cp	r22, r1
    194e:	71 05       	cpc	r23, r1
    1950:	79 f0       	breq	.+30     	; 0x1970 <_ZN5Print5writeEPKc+0x24>
    1952:	fb 01       	movw	r30, r22
    1954:	01 90       	ld	r0, Z+
    1956:	00 20       	and	r0, r0
    1958:	e9 f7       	brne	.-6      	; 0x1954 <_ZN5Print5writeEPKc+0x8>
    195a:	31 97       	sbiw	r30, 0x01	; 1
    195c:	af 01       	movw	r20, r30
    195e:	46 1b       	sub	r20, r22
    1960:	57 0b       	sbc	r21, r23
    1962:	dc 01       	movw	r26, r24
    1964:	ed 91       	ld	r30, X+
    1966:	fc 91       	ld	r31, X
    1968:	02 80       	ldd	r0, Z+2	; 0x02
    196a:	f3 81       	ldd	r31, Z+3	; 0x03
    196c:	e0 2d       	mov	r30, r0
    196e:	09 94       	ijmp
    1970:	80 e0       	ldi	r24, 0x00	; 0
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	08 95       	ret

00001976 <_ZN5Print7printlnEv>:
    1976:	61 ec       	ldi	r22, 0xC1	; 193
    1978:	71 e0       	ldi	r23, 0x01	; 1
    197a:	0c 94 a6 0c 	jmp	0x194c	; 0x194c <_ZN5Print5writeEPKc>

0000197e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
    197e:	0f 93       	push	r16
    1980:	1f 93       	push	r17
    1982:	cf 93       	push	r28
    1984:	df 93       	push	r29
    1986:	ec 01       	movw	r28, r24
  return write(s.c_str(), s.length());
}

size_t Print::print(const char str[])
{
  return write(str);
    1988:	0e 94 a6 0c 	call	0x194c	; 0x194c <_ZN5Print5writeEPKc>
    198c:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    198e:	ce 01       	movw	r24, r28
    1990:	0e 94 bb 0c 	call	0x1976	; 0x1976 <_ZN5Print7printlnEv>
  return n;
}
    1994:	80 0f       	add	r24, r16
    1996:	91 1f       	adc	r25, r17
    1998:	df 91       	pop	r29
    199a:	cf 91       	pop	r28
    199c:	1f 91       	pop	r17
    199e:	0f 91       	pop	r16
    19a0:	08 95       	ret

000019a2 <_ZL4RecvPVhh>:
//=======================================================================
//=======================================================================

USBDevice_ USBDevice;

USBDevice_::USBDevice_()
    19a2:	61 50       	subi	r22, 0x01	; 1
    19a4:	30 f0       	brcs	.+12     	; 0x19b2 <_ZL4RecvPVhh+0x10>
    19a6:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    19aa:	fc 01       	movw	r30, r24
    19ac:	20 83       	st	Z, r18
    19ae:	01 96       	adiw	r24, 0x01	; 1
    19b0:	f8 cf       	rjmp	.-16     	; 0x19a2 <_ZL4RecvPVhh>
    19b2:	28 9a       	sbi	0x05, 0	; 5
    19b4:	84 e6       	ldi	r24, 0x64	; 100
    19b6:	80 93 89 03 	sts	0x0389, r24	; 0x800389 <RxLEDPulse>
    19ba:	08 95       	ret

000019bc <_ZL11SendControlh>:
    19bc:	40 91 84 03 	lds	r20, 0x0384	; 0x800384 <_ZL6_cmark>
    19c0:	50 91 85 03 	lds	r21, 0x0385	; 0x800385 <_ZL6_cmark+0x1>
    19c4:	20 91 82 03 	lds	r18, 0x0382	; 0x800382 <_ZL5_cend>
    19c8:	30 91 83 03 	lds	r19, 0x0383	; 0x800383 <_ZL5_cend+0x1>
    19cc:	42 17       	cp	r20, r18
    19ce:	53 07       	cpc	r21, r19
    19d0:	b4 f4       	brge	.+44     	; 0x19fe <_ZL11SendControlh+0x42>
    19d2:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    19d6:	95 70       	andi	r25, 0x05	; 5
    19d8:	e1 f3       	breq	.-8      	; 0x19d2 <_ZL11SendControlh+0x16>
    19da:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    19de:	92 fd       	sbrc	r25, 2
    19e0:	19 c0       	rjmp	.+50     	; 0x1a14 <_ZL11SendControlh+0x58>
    19e2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    19e6:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <_ZL6_cmark>
    19ea:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <_ZL6_cmark+0x1>
    19ee:	01 96       	adiw	r24, 0x01	; 1
    19f0:	8f 73       	andi	r24, 0x3F	; 63
    19f2:	99 27       	eor	r25, r25
    19f4:	89 2b       	or	r24, r25
    19f6:	19 f4       	brne	.+6      	; 0x19fe <_ZL11SendControlh+0x42>
    19f8:	8e ef       	ldi	r24, 0xFE	; 254
    19fa:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    19fe:	80 91 84 03 	lds	r24, 0x0384	; 0x800384 <_ZL6_cmark>
    1a02:	90 91 85 03 	lds	r25, 0x0385	; 0x800385 <_ZL6_cmark+0x1>
    1a06:	01 96       	adiw	r24, 0x01	; 1
    1a08:	90 93 85 03 	sts	0x0385, r25	; 0x800385 <_ZL6_cmark+0x1>
    1a0c:	80 93 84 03 	sts	0x0384, r24	; 0x800384 <_ZL6_cmark>
    1a10:	81 e0       	ldi	r24, 0x01	; 1
    1a12:	08 95       	ret
    1a14:	80 e0       	ldi	r24, 0x00	; 0
    1a16:	08 95       	ret

00001a18 <_ZL24USB_SendStringDescriptorPKhhh>:
    1a18:	df 92       	push	r13
    1a1a:	ef 92       	push	r14
    1a1c:	ff 92       	push	r15
    1a1e:	0f 93       	push	r16
    1a20:	1f 93       	push	r17
    1a22:	cf 93       	push	r28
    1a24:	df 93       	push	r29
    1a26:	d8 2e       	mov	r13, r24
    1a28:	f9 2e       	mov	r15, r25
    1a2a:	e4 2e       	mov	r14, r20
    1a2c:	06 2f       	mov	r16, r22
    1a2e:	10 e0       	ldi	r17, 0x00	; 0
    1a30:	c8 01       	movw	r24, r16
    1a32:	01 96       	adiw	r24, 0x01	; 1
    1a34:	88 0f       	add	r24, r24
    1a36:	0e 94 de 0c 	call	0x19bc	; 0x19bc <_ZL11SendControlh>
    1a3a:	83 e0       	ldi	r24, 0x03	; 3
    1a3c:	0e 94 de 0c 	call	0x19bc	; 0x19bc <_ZL11SendControlh>
    1a40:	cd 2d       	mov	r28, r13
    1a42:	df 2d       	mov	r29, r15
    1a44:	0c 0f       	add	r16, r28
    1a46:	1d 1f       	adc	r17, r29
    1a48:	c0 17       	cp	r28, r16
    1a4a:	d1 07       	cpc	r29, r17
    1a4c:	89 f0       	breq	.+34     	; 0x1a70 <_ZL24USB_SendStringDescriptorPKhhh+0x58>
    1a4e:	e7 fe       	sbrs	r14, 7
    1a50:	03 c0       	rjmp	.+6      	; 0x1a58 <_ZL24USB_SendStringDescriptorPKhhh+0x40>
    1a52:	fe 01       	movw	r30, r28
    1a54:	84 91       	lpm	r24, Z
    1a56:	01 c0       	rjmp	.+2      	; 0x1a5a <_ZL24USB_SendStringDescriptorPKhhh+0x42>
    1a58:	88 81       	ld	r24, Y
    1a5a:	0e 94 de 0c 	call	0x19bc	; 0x19bc <_ZL11SendControlh>
    1a5e:	f8 2e       	mov	r15, r24
    1a60:	80 e0       	ldi	r24, 0x00	; 0
    1a62:	0e 94 de 0c 	call	0x19bc	; 0x19bc <_ZL11SendControlh>
    1a66:	8f 21       	and	r24, r15
    1a68:	21 96       	adiw	r28, 0x01	; 1
    1a6a:	81 11       	cpse	r24, r1
    1a6c:	ed cf       	rjmp	.-38     	; 0x1a48 <_ZL24USB_SendStringDescriptorPKhhh+0x30>
    1a6e:	01 c0       	rjmp	.+2      	; 0x1a72 <_ZL24USB_SendStringDescriptorPKhhh+0x5a>
    1a70:	81 e0       	ldi	r24, 0x01	; 1
    1a72:	df 91       	pop	r29
    1a74:	cf 91       	pop	r28
    1a76:	1f 91       	pop	r17
    1a78:	0f 91       	pop	r16
    1a7a:	ff 90       	pop	r15
    1a7c:	ef 90       	pop	r14
    1a7e:	df 90       	pop	r13
    1a80:	08 95       	ret

00001a82 <_ZL15USB_ClockEnablev>:
    1a82:	80 91 d7 00 	lds	r24, 0x00D7	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
    1a86:	81 60       	ori	r24, 0x01	; 1
    1a88:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
    1a8c:	80 ea       	ldi	r24, 0xA0	; 160
    1a8e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1a92:	89 b5       	in	r24, 0x29	; 41
    1a94:	80 61       	ori	r24, 0x10	; 16
    1a96:	89 bd       	out	0x29, r24	; 41
    1a98:	89 b5       	in	r24, 0x29	; 41
    1a9a:	82 60       	ori	r24, 0x02	; 2
    1a9c:	89 bd       	out	0x29, r24	; 41
    1a9e:	09 b4       	in	r0, 0x29	; 41
    1aa0:	00 fe       	sbrs	r0, 0
    1aa2:	fd cf       	rjmp	.-6      	; 0x1a9e <_ZL15USB_ClockEnablev+0x1c>
    1aa4:	61 e0       	ldi	r22, 0x01	; 1
    1aa6:	70 e0       	ldi	r23, 0x00	; 0
    1aa8:	80 e0       	ldi	r24, 0x00	; 0
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	0e 94 8e 11 	call	0x231c	; 0x231c <delay>
    1ab0:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1ab4:	8f 7c       	andi	r24, 0xCF	; 207
    1ab6:	80 61       	ori	r24, 0x10	; 16
    1ab8:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    1abc:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    1ac0:	80 7f       	andi	r24, 0xF0	; 240
    1ac2:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    1ac6:	08 95       	ret

00001ac8 <_ZL14SendInterfacesv>:
    1ac8:	cf 93       	push	r28
    1aca:	df 93       	push	r29
    1acc:	1f 92       	push	r1
    1ace:	cd b7       	in	r28, 0x3d	; 61
    1ad0:	de b7       	in	r29, 0x3e	; 62
    1ad2:	19 82       	std	Y+1, r1	; 0x01
    1ad4:	ce 01       	movw	r24, r28
    1ad6:	01 96       	adiw	r24, 0x01	; 1
    1ad8:	0e 94 4d 18 	call	0x309a	; 0x309a <_Z16CDC_GetInterfacePh>
    1adc:	0e 94 75 19 	call	0x32ea	; 0x32ea <_Z12PluggableUSBv>
    1ae0:	be 01       	movw	r22, r28
    1ae2:	6f 5f       	subi	r22, 0xFF	; 255
    1ae4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ae6:	0e 94 f0 18 	call	0x31e0	; 0x31e0 <_ZN13PluggableUSB_12getInterfaceEPh>
    1aea:	89 81       	ldd	r24, Y+1	; 0x01
    1aec:	0f 90       	pop	r0
    1aee:	df 91       	pop	r29
    1af0:	cf 91       	pop	r28
    1af2:	08 95       	ret

00001af4 <_ZN6LockEPC1Eh>:
    1af4:	2f b7       	in	r18, 0x3f	; 63
    1af6:	fc 01       	movw	r30, r24
    1af8:	20 83       	st	Z, r18
    1afa:	f8 94       	cli
    1afc:	67 70       	andi	r22, 0x07	; 7
    1afe:	60 93 e9 00 	sts	0x00E9, r22	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1b02:	08 95       	ret

00001b04 <_Z13USB_Availableh>:
    1b04:	cf 93       	push	r28
    1b06:	df 93       	push	r29
    1b08:	1f 92       	push	r1
    1b0a:	cd b7       	in	r28, 0x3d	; 61
    1b0c:	de b7       	in	r29, 0x3e	; 62
    1b0e:	68 2f       	mov	r22, r24
    1b10:	ce 01       	movw	r24, r28
    1b12:	01 96       	adiw	r24, 0x01	; 1
    1b14:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <_ZN6LockEPC1Eh>
    1b18:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1b1c:	99 81       	ldd	r25, Y+1	; 0x01
    1b1e:	9f bf       	out	0x3f, r25	; 63
    1b20:	0f 90       	pop	r0
    1b22:	df 91       	pop	r29
    1b24:	cf 91       	pop	r28
    1b26:	08 95       	ret

00001b28 <_Z8USB_RecvhPvi>:
    1b28:	ef 92       	push	r14
    1b2a:	ff 92       	push	r15
    1b2c:	0f 93       	push	r16
    1b2e:	1f 93       	push	r17
    1b30:	cf 93       	push	r28
    1b32:	df 93       	push	r29
    1b34:	1f 92       	push	r1
    1b36:	cd b7       	in	r28, 0x3d	; 61
    1b38:	de b7       	in	r29, 0x3e	; 62
    1b3a:	90 91 88 03 	lds	r25, 0x0388	; 0x800388 <_usbConfiguration>
    1b3e:	99 23       	and	r25, r25
    1b40:	11 f0       	breq	.+4      	; 0x1b46 <_Z8USB_RecvhPvi+0x1e>
    1b42:	57 ff       	sbrs	r21, 7
    1b44:	03 c0       	rjmp	.+6      	; 0x1b4c <_Z8USB_RecvhPvi+0x24>
    1b46:	8f ef       	ldi	r24, 0xFF	; 255
    1b48:	9f ef       	ldi	r25, 0xFF	; 255
    1b4a:	29 c0       	rjmp	.+82     	; 0x1b9e <_Z8USB_RecvhPvi+0x76>
    1b4c:	8a 01       	movw	r16, r20
    1b4e:	7b 01       	movw	r14, r22
    1b50:	68 2f       	mov	r22, r24
    1b52:	ce 01       	movw	r24, r28
    1b54:	01 96       	adiw	r24, 0x01	; 1
    1b56:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <_ZN6LockEPC1Eh>
    1b5a:	20 91 f2 00 	lds	r18, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	02 17       	cp	r16, r18
    1b62:	13 07       	cpc	r17, r19
    1b64:	0c f4       	brge	.+2      	; 0x1b68 <_Z8USB_RecvhPvi+0x40>
    1b66:	98 01       	movw	r18, r16
    1b68:	82 2f       	mov	r24, r18
    1b6a:	f7 01       	movw	r30, r14
    1b6c:	94 e6       	ldi	r25, 0x64	; 100
    1b6e:	81 50       	subi	r24, 0x01	; 1
    1b70:	38 f0       	brcs	.+14     	; 0x1b80 <_Z8USB_RecvhPvi+0x58>
    1b72:	28 9a       	sbi	0x05, 0	; 5
    1b74:	90 93 89 03 	sts	0x0389, r25	; 0x800389 <RxLEDPulse>
    1b78:	40 91 f1 00 	lds	r20, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1b7c:	41 93       	st	Z+, r20
    1b7e:	f7 cf       	rjmp	.-18     	; 0x1b6e <_Z8USB_RecvhPvi+0x46>
    1b80:	21 15       	cp	r18, r1
    1b82:	31 05       	cpc	r19, r1
    1b84:	21 f0       	breq	.+8      	; 0x1b8e <_Z8USB_RecvhPvi+0x66>
    1b86:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1b8a:	88 23       	and	r24, r24
    1b8c:	21 f0       	breq	.+8      	; 0x1b96 <_Z8USB_RecvhPvi+0x6e>
    1b8e:	89 81       	ldd	r24, Y+1	; 0x01
    1b90:	8f bf       	out	0x3f, r24	; 63
    1b92:	c9 01       	movw	r24, r18
    1b94:	04 c0       	rjmp	.+8      	; 0x1b9e <_Z8USB_RecvhPvi+0x76>
    1b96:	8b e6       	ldi	r24, 0x6B	; 107
    1b98:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1b9c:	f8 cf       	rjmp	.-16     	; 0x1b8e <_Z8USB_RecvhPvi+0x66>
    1b9e:	0f 90       	pop	r0
    1ba0:	df 91       	pop	r29
    1ba2:	cf 91       	pop	r28
    1ba4:	1f 91       	pop	r17
    1ba6:	0f 91       	pop	r16
    1ba8:	ff 90       	pop	r15
    1baa:	ef 90       	pop	r14
    1bac:	08 95       	ret

00001bae <_Z8USB_Recvh>:
    1bae:	cf 93       	push	r28
    1bb0:	df 93       	push	r29
    1bb2:	1f 92       	push	r1
    1bb4:	cd b7       	in	r28, 0x3d	; 61
    1bb6:	de b7       	in	r29, 0x3e	; 62
    1bb8:	41 e0       	ldi	r20, 0x01	; 1
    1bba:	50 e0       	ldi	r21, 0x00	; 0
    1bbc:	be 01       	movw	r22, r28
    1bbe:	6f 5f       	subi	r22, 0xFF	; 255
    1bc0:	7f 4f       	sbci	r23, 0xFF	; 255
    1bc2:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <_Z8USB_RecvhPvi>
    1bc6:	01 97       	sbiw	r24, 0x01	; 1
    1bc8:	19 f4       	brne	.+6      	; 0x1bd0 <_Z8USB_Recvh+0x22>
    1bca:	89 81       	ldd	r24, Y+1	; 0x01
    1bcc:	90 e0       	ldi	r25, 0x00	; 0
    1bce:	02 c0       	rjmp	.+4      	; 0x1bd4 <_Z8USB_Recvh+0x26>
    1bd0:	8f ef       	ldi	r24, 0xFF	; 255
    1bd2:	9f ef       	ldi	r25, 0xFF	; 255
    1bd4:	0f 90       	pop	r0
    1bd6:	df 91       	pop	r29
    1bd8:	cf 91       	pop	r28
    1bda:	08 95       	ret

00001bdc <_Z13USB_SendSpaceh>:
    1bdc:	cf 93       	push	r28
    1bde:	df 93       	push	r29
    1be0:	1f 92       	push	r1
    1be2:	cd b7       	in	r28, 0x3d	; 61
    1be4:	de b7       	in	r29, 0x3e	; 62
    1be6:	68 2f       	mov	r22, r24
    1be8:	ce 01       	movw	r24, r28
    1bea:	01 96       	adiw	r24, 0x01	; 1
    1bec:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <_ZN6LockEPC1Eh>
    1bf0:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1bf4:	89 2f       	mov	r24, r25
    1bf6:	80 72       	andi	r24, 0x20	; 32
    1bf8:	95 ff       	sbrs	r25, 5
    1bfa:	04 c0       	rjmp	.+8      	; 0x1c04 <_Z13USB_SendSpaceh+0x28>
    1bfc:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    1c00:	8f e3       	ldi	r24, 0x3F	; 63
    1c02:	89 1b       	sub	r24, r25
    1c04:	99 81       	ldd	r25, Y+1	; 0x01
    1c06:	9f bf       	out	0x3f, r25	; 63
    1c08:	0f 90       	pop	r0
    1c0a:	df 91       	pop	r29
    1c0c:	cf 91       	pop	r28
    1c0e:	08 95       	ret

00001c10 <_Z8USB_SendhPKvi>:
    1c10:	6f 92       	push	r6
    1c12:	7f 92       	push	r7
    1c14:	8f 92       	push	r8
    1c16:	9f 92       	push	r9
    1c18:	af 92       	push	r10
    1c1a:	bf 92       	push	r11
    1c1c:	cf 92       	push	r12
    1c1e:	df 92       	push	r13
    1c20:	ef 92       	push	r14
    1c22:	ff 92       	push	r15
    1c24:	0f 93       	push	r16
    1c26:	1f 93       	push	r17
    1c28:	cf 93       	push	r28
    1c2a:	df 93       	push	r29
    1c2c:	1f 92       	push	r1
    1c2e:	cd b7       	in	r28, 0x3d	; 61
    1c30:	de b7       	in	r29, 0x3e	; 62
    1c32:	a8 2e       	mov	r10, r24
    1c34:	6b 01       	movw	r12, r22
    1c36:	b4 2e       	mov	r11, r20
    1c38:	05 2f       	mov	r16, r21
    1c3a:	80 91 88 03 	lds	r24, 0x0388	; 0x800388 <_usbConfiguration>
    1c3e:	81 11       	cpse	r24, r1
    1c40:	03 c0       	rjmp	.+6      	; 0x1c48 <_Z8USB_SendhPKvi+0x38>
    1c42:	8f ef       	ldi	r24, 0xFF	; 255
    1c44:	9f ef       	ldi	r25, 0xFF	; 255
    1c46:	69 c0       	rjmp	.+210    	; 0x1d1a <_Z8USB_SendhPKvi+0x10a>
    1c48:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <_usbSuspendState>
    1c4c:	80 ff       	sbrs	r24, 0
    1c4e:	05 c0       	rjmp	.+10     	; 0x1c5a <_Z8USB_SendhPKvi+0x4a>
    1c50:	80 91 e0 00 	lds	r24, 0x00E0	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    1c54:	82 60       	ori	r24, 0x02	; 2
    1c56:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    1c5a:	eb 2c       	mov	r14, r11
    1c5c:	f0 2e       	mov	r15, r16
    1c5e:	8a ef       	ldi	r24, 0xFA	; 250
    1c60:	98 2e       	mov	r9, r24
    1c62:	8a 2d       	mov	r24, r10
    1c64:	80 72       	andi	r24, 0x20	; 32
    1c66:	78 2e       	mov	r7, r24
    1c68:	9a e3       	ldi	r25, 0x3A	; 58
    1c6a:	89 2e       	mov	r8, r25
    1c6c:	8a 2d       	mov	r24, r10
    1c6e:	80 74       	andi	r24, 0x40	; 64
    1c70:	68 2e       	mov	r6, r24
    1c72:	e1 14       	cp	r14, r1
    1c74:	f1 04       	cpc	r15, r1
    1c76:	09 f4       	brne	.+2      	; 0x1c7a <_Z8USB_SendhPKvi+0x6a>
    1c78:	46 c0       	rjmp	.+140    	; 0x1d06 <_Z8USB_SendhPKvi+0xf6>
    1c7a:	8a 2d       	mov	r24, r10
    1c7c:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <_Z13USB_SendSpaceh>
    1c80:	18 2f       	mov	r17, r24
    1c82:	81 11       	cpse	r24, r1
    1c84:	0a c0       	rjmp	.+20     	; 0x1c9a <_Z8USB_SendhPKvi+0x8a>
    1c86:	9a 94       	dec	r9
    1c88:	99 20       	and	r9, r9
    1c8a:	d9 f2       	breq	.-74     	; 0x1c42 <_Z8USB_SendhPKvi+0x32>
    1c8c:	61 e0       	ldi	r22, 0x01	; 1
    1c8e:	70 e0       	ldi	r23, 0x00	; 0
    1c90:	80 e0       	ldi	r24, 0x00	; 0
    1c92:	90 e0       	ldi	r25, 0x00	; 0
    1c94:	0e 94 8e 11 	call	0x231c	; 0x231c <delay>
    1c98:	ec cf       	rjmp	.-40     	; 0x1c72 <_Z8USB_SendhPKvi+0x62>
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	e8 16       	cp	r14, r24
    1c9e:	f9 06       	cpc	r15, r25
    1ca0:	0c f4       	brge	.+2      	; 0x1ca4 <_Z8USB_SendhPKvi+0x94>
    1ca2:	1e 2d       	mov	r17, r14
    1ca4:	6a 2d       	mov	r22, r10
    1ca6:	ce 01       	movw	r24, r28
    1ca8:	01 96       	adiw	r24, 0x01	; 1
    1caa:	0e 94 7a 0d 	call	0x1af4	; 0x1af4 <_ZN6LockEPC1Eh>
    1cae:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1cb2:	85 ff       	sbrs	r24, 5
    1cb4:	25 c0       	rjmp	.+74     	; 0x1d00 <_Z8USB_SendhPKvi+0xf0>
    1cb6:	81 2f       	mov	r24, r17
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	e8 1a       	sub	r14, r24
    1cbc:	f9 0a       	sbc	r15, r25
    1cbe:	77 20       	and	r7, r7
    1cc0:	29 f0       	breq	.+10     	; 0x1ccc <_Z8USB_SendhPKvi+0xbc>
    1cc2:	11 50       	subi	r17, 0x01	; 1
    1cc4:	a0 f0       	brcs	.+40     	; 0x1cee <_Z8USB_SendhPKvi+0xde>
    1cc6:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1cca:	fb cf       	rjmp	.-10     	; 0x1cc2 <_Z8USB_SendhPKvi+0xb2>
    1ccc:	f6 01       	movw	r30, r12
    1cce:	a7 fe       	sbrs	r10, 7
    1cd0:	0a c0       	rjmp	.+20     	; 0x1ce6 <_Z8USB_SendhPKvi+0xd6>
    1cd2:	11 50       	subi	r17, 0x01	; 1
    1cd4:	50 f0       	brcs	.+20     	; 0x1cea <_Z8USB_SendhPKvi+0xda>
    1cd6:	24 91       	lpm	r18, Z
    1cd8:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1cdc:	31 96       	adiw	r30, 0x01	; 1
    1cde:	f9 cf       	rjmp	.-14     	; 0x1cd2 <_Z8USB_SendhPKvi+0xc2>
    1ce0:	21 91       	ld	r18, Z+
    1ce2:	20 93 f1 00 	sts	0x00F1, r18	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1ce6:	11 50       	subi	r17, 0x01	; 1
    1ce8:	d8 f7       	brcc	.-10     	; 0x1ce0 <_Z8USB_SendhPKvi+0xd0>
    1cea:	c8 0e       	add	r12, r24
    1cec:	d9 1e       	adc	r13, r25
    1cee:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1cf2:	85 ff       	sbrs	r24, 5
    1cf4:	0f c0       	rjmp	.+30     	; 0x1d14 <_Z8USB_SendhPKvi+0x104>
    1cf6:	e1 14       	cp	r14, r1
    1cf8:	f1 04       	cpc	r15, r1
    1cfa:	11 f4       	brne	.+4      	; 0x1d00 <_Z8USB_SendhPKvi+0xf0>
    1cfc:	61 10       	cpse	r6, r1
    1cfe:	0a c0       	rjmp	.+20     	; 0x1d14 <_Z8USB_SendhPKvi+0x104>
    1d00:	89 81       	ldd	r24, Y+1	; 0x01
    1d02:	8f bf       	out	0x3f, r24	; 63
    1d04:	b6 cf       	rjmp	.-148    	; 0x1c72 <_Z8USB_SendhPKvi+0x62>
    1d06:	5d 9a       	sbi	0x0b, 5	; 11
    1d08:	84 e6       	ldi	r24, 0x64	; 100
    1d0a:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <TxLEDPulse>
    1d0e:	8b 2d       	mov	r24, r11
    1d10:	90 2f       	mov	r25, r16
    1d12:	03 c0       	rjmp	.+6      	; 0x1d1a <_Z8USB_SendhPKvi+0x10a>
    1d14:	80 92 e8 00 	sts	0x00E8, r8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1d18:	f3 cf       	rjmp	.-26     	; 0x1d00 <_Z8USB_SendhPKvi+0xf0>
    1d1a:	0f 90       	pop	r0
    1d1c:	df 91       	pop	r29
    1d1e:	cf 91       	pop	r28
    1d20:	1f 91       	pop	r17
    1d22:	0f 91       	pop	r16
    1d24:	ff 90       	pop	r15
    1d26:	ef 90       	pop	r14
    1d28:	df 90       	pop	r13
    1d2a:	cf 90       	pop	r12
    1d2c:	bf 90       	pop	r11
    1d2e:	af 90       	pop	r10
    1d30:	9f 90       	pop	r9
    1d32:	8f 90       	pop	r8
    1d34:	7f 90       	pop	r7
    1d36:	6f 90       	pop	r6
    1d38:	08 95       	ret

00001d3a <_Z11InitControli>:
    1d3a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1d3e:	10 92 85 03 	sts	0x0385, r1	; 0x800385 <_ZL6_cmark+0x1>
    1d42:	10 92 84 03 	sts	0x0384, r1	; 0x800384 <_ZL6_cmark>
    1d46:	90 93 83 03 	sts	0x0383, r25	; 0x800383 <_ZL5_cend+0x1>
    1d4a:	80 93 82 03 	sts	0x0382, r24	; 0x800382 <_ZL5_cend>
    1d4e:	08 95       	ret

00001d50 <_Z15USB_SendControlhPKvi>:
    1d50:	df 92       	push	r13
    1d52:	ef 92       	push	r14
    1d54:	ff 92       	push	r15
    1d56:	0f 93       	push	r16
    1d58:	1f 93       	push	r17
    1d5a:	cf 93       	push	r28
    1d5c:	df 93       	push	r29
    1d5e:	d8 2e       	mov	r13, r24
    1d60:	8a 01       	movw	r16, r20
    1d62:	7b 01       	movw	r14, r22
    1d64:	e4 0e       	add	r14, r20
    1d66:	f5 1e       	adc	r15, r21
    1d68:	eb 01       	movw	r28, r22
    1d6a:	ce 15       	cp	r28, r14
    1d6c:	df 05       	cpc	r29, r15
    1d6e:	71 f0       	breq	.+28     	; 0x1d8c <_Z15USB_SendControlhPKvi+0x3c>
    1d70:	d7 fe       	sbrs	r13, 7
    1d72:	03 c0       	rjmp	.+6      	; 0x1d7a <_Z15USB_SendControlhPKvi+0x2a>
    1d74:	fe 01       	movw	r30, r28
    1d76:	84 91       	lpm	r24, Z
    1d78:	01 c0       	rjmp	.+2      	; 0x1d7c <_Z15USB_SendControlhPKvi+0x2c>
    1d7a:	88 81       	ld	r24, Y
    1d7c:	0e 94 de 0c 	call	0x19bc	; 0x19bc <_ZL11SendControlh>
    1d80:	21 96       	adiw	r28, 0x01	; 1
    1d82:	81 11       	cpse	r24, r1
    1d84:	f2 cf       	rjmp	.-28     	; 0x1d6a <_Z15USB_SendControlhPKvi+0x1a>
    1d86:	8f ef       	ldi	r24, 0xFF	; 255
    1d88:	9f ef       	ldi	r25, 0xFF	; 255
    1d8a:	01 c0       	rjmp	.+2      	; 0x1d8e <_Z15USB_SendControlhPKvi+0x3e>
    1d8c:	c8 01       	movw	r24, r16
    1d8e:	df 91       	pop	r29
    1d90:	cf 91       	pop	r28
    1d92:	1f 91       	pop	r17
    1d94:	0f 91       	pop	r16
    1d96:	ff 90       	pop	r15
    1d98:	ef 90       	pop	r14
    1d9a:	df 90       	pop	r13
    1d9c:	08 95       	ret

00001d9e <_Z15USB_RecvControlPvi>:
    1d9e:	af 92       	push	r10
    1da0:	bf 92       	push	r11
    1da2:	df 92       	push	r13
    1da4:	ef 92       	push	r14
    1da6:	ff 92       	push	r15
    1da8:	0f 93       	push	r16
    1daa:	1f 93       	push	r17
    1dac:	cf 93       	push	r28
    1dae:	df 93       	push	r29
    1db0:	5c 01       	movw	r10, r24
    1db2:	8b 01       	movw	r16, r22
    1db4:	eb 01       	movw	r28, r22
    1db6:	9b ef       	ldi	r25, 0xFB	; 251
    1db8:	d9 2e       	mov	r13, r25
    1dba:	20 97       	sbiw	r28, 0x00	; 0
    1dbc:	c1 f0       	breq	.+48     	; 0x1dee <_Z15USB_RecvControlPvi+0x50>
    1dbe:	7e 01       	movw	r14, r28
    1dc0:	c1 34       	cpi	r28, 0x41	; 65
    1dc2:	d1 05       	cpc	r29, r1
    1dc4:	1c f0       	brlt	.+6      	; 0x1dcc <_Z15USB_RecvControlPvi+0x2e>
    1dc6:	80 e4       	ldi	r24, 0x40	; 64
    1dc8:	e8 2e       	mov	r14, r24
    1dca:	f1 2c       	mov	r15, r1
    1dcc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1dd0:	82 ff       	sbrs	r24, 2
    1dd2:	fc cf       	rjmp	.-8      	; 0x1dcc <_Z15USB_RecvControlPvi+0x2e>
    1dd4:	c8 01       	movw	r24, r16
    1dd6:	8c 1b       	sub	r24, r28
    1dd8:	9d 0b       	sbc	r25, r29
    1dda:	6e 2d       	mov	r22, r14
    1ddc:	8a 0d       	add	r24, r10
    1dde:	9b 1d       	adc	r25, r11
    1de0:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <_ZL4RecvPVhh>
    1de4:	d0 92 e8 00 	sts	0x00E8, r13	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1de8:	ce 19       	sub	r28, r14
    1dea:	df 09       	sbc	r29, r15
    1dec:	e6 cf       	rjmp	.-52     	; 0x1dba <_Z15USB_RecvControlPvi+0x1c>
    1dee:	c8 01       	movw	r24, r16
    1df0:	df 91       	pop	r29
    1df2:	cf 91       	pop	r28
    1df4:	1f 91       	pop	r17
    1df6:	0f 91       	pop	r16
    1df8:	ff 90       	pop	r15
    1dfa:	ef 90       	pop	r14
    1dfc:	df 90       	pop	r13
    1dfe:	bf 90       	pop	r11
    1e00:	af 90       	pop	r10
    1e02:	08 95       	ret

00001e04 <__vector_11>:
    1e04:	1f 92       	push	r1
    1e06:	0f 92       	push	r0
    1e08:	0f b6       	in	r0, 0x3f	; 63
    1e0a:	0f 92       	push	r0
    1e0c:	11 24       	eor	r1, r1
    1e0e:	cf 92       	push	r12
    1e10:	df 92       	push	r13
    1e12:	ef 92       	push	r14
    1e14:	ff 92       	push	r15
    1e16:	0f 93       	push	r16
    1e18:	1f 93       	push	r17
    1e1a:	2f 93       	push	r18
    1e1c:	3f 93       	push	r19
    1e1e:	4f 93       	push	r20
    1e20:	5f 93       	push	r21
    1e22:	6f 93       	push	r22
    1e24:	7f 93       	push	r23
    1e26:	8f 93       	push	r24
    1e28:	9f 93       	push	r25
    1e2a:	af 93       	push	r26
    1e2c:	bf 93       	push	r27
    1e2e:	ef 93       	push	r30
    1e30:	ff 93       	push	r31
    1e32:	cf 93       	push	r28
    1e34:	df 93       	push	r29
    1e36:	cd b7       	in	r28, 0x3d	; 61
    1e38:	de b7       	in	r29, 0x3e	; 62
    1e3a:	6c 97       	sbiw	r28, 0x1c	; 28
    1e3c:	de bf       	out	0x3e, r29	; 62
    1e3e:	cd bf       	out	0x3d, r28	; 61
    1e40:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    1e44:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1e48:	83 ff       	sbrs	r24, 3
    1e4a:	24 c1       	rjmp	.+584    	; 0x2094 <__vector_11+0x290>
    1e4c:	68 e0       	ldi	r22, 0x08	; 8
    1e4e:	ce 01       	movw	r24, r28
    1e50:	45 96       	adiw	r24, 0x15	; 21
    1e52:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <_ZL4RecvPVhh>
    1e56:	82 ef       	ldi	r24, 0xF2	; 242
    1e58:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1e5c:	8d 89       	ldd	r24, Y+21	; 0x15
    1e5e:	87 ff       	sbrs	r24, 7
    1e60:	05 c0       	rjmp	.+10     	; 0x1e6c <__vector_11+0x68>
    1e62:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1e66:	90 ff       	sbrs	r25, 0
    1e68:	fc cf       	rjmp	.-8      	; 0x1e62 <__vector_11+0x5e>
    1e6a:	03 c0       	rjmp	.+6      	; 0x1e72 <__vector_11+0x6e>
    1e6c:	9e ef       	ldi	r25, 0xFE	; 254
    1e6e:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1e72:	98 2f       	mov	r25, r24
    1e74:	90 76       	andi	r25, 0x60	; 96
    1e76:	09 f0       	breq	.+2      	; 0x1e7a <__vector_11+0x76>
    1e78:	e5 c0       	rjmp	.+458    	; 0x2044 <__vector_11+0x240>
    1e7a:	9e 89       	ldd	r25, Y+22	; 0x16
    1e7c:	4f 89       	ldd	r20, Y+23	; 0x17
    1e7e:	58 8d       	ldd	r21, Y+24	; 0x18
    1e80:	2f 89       	ldd	r18, Y+23	; 0x17
    1e82:	18 8d       	ldd	r17, Y+24	; 0x18
    1e84:	91 11       	cpse	r25, r1
    1e86:	0c c0       	rjmp	.+24     	; 0x1ea0 <__vector_11+0x9c>
    1e88:	80 38       	cpi	r24, 0x80	; 128
    1e8a:	29 f4       	brne	.+10     	; 0x1e96 <__vector_11+0x92>
    1e8c:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <_usbCurrentStatus>
    1e90:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1e94:	02 c0       	rjmp	.+4      	; 0x1e9a <__vector_11+0x96>
    1e96:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1e9a:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1e9e:	f3 c0       	rjmp	.+486    	; 0x2086 <__vector_11+0x282>
    1ea0:	91 30       	cpi	r25, 0x01	; 1
    1ea2:	51 f4       	brne	.+20     	; 0x1eb8 <__vector_11+0xb4>
    1ea4:	81 11       	cpse	r24, r1
    1ea6:	ef c0       	rjmp	.+478    	; 0x2086 <__vector_11+0x282>
    1ea8:	41 30       	cpi	r20, 0x01	; 1
    1eaa:	51 05       	cpc	r21, r1
    1eac:	09 f0       	breq	.+2      	; 0x1eb0 <__vector_11+0xac>
    1eae:	eb c0       	rjmp	.+470    	; 0x2086 <__vector_11+0x282>
    1eb0:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <_usbCurrentStatus>
    1eb4:	8d 7f       	andi	r24, 0xFD	; 253
    1eb6:	0b c0       	rjmp	.+22     	; 0x1ece <__vector_11+0xca>
    1eb8:	93 30       	cpi	r25, 0x03	; 3
    1eba:	61 f4       	brne	.+24     	; 0x1ed4 <__vector_11+0xd0>
    1ebc:	81 11       	cpse	r24, r1
    1ebe:	e3 c0       	rjmp	.+454    	; 0x2086 <__vector_11+0x282>
    1ec0:	41 30       	cpi	r20, 0x01	; 1
    1ec2:	51 05       	cpc	r21, r1
    1ec4:	09 f0       	breq	.+2      	; 0x1ec8 <__vector_11+0xc4>
    1ec6:	df c0       	rjmp	.+446    	; 0x2086 <__vector_11+0x282>
    1ec8:	80 91 87 03 	lds	r24, 0x0387	; 0x800387 <_usbCurrentStatus>
    1ecc:	82 60       	ori	r24, 0x02	; 2
    1ece:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <_usbCurrentStatus>
    1ed2:	d9 c0       	rjmp	.+434    	; 0x2086 <__vector_11+0x282>
    1ed4:	95 30       	cpi	r25, 0x05	; 5
    1ed6:	49 f4       	brne	.+18     	; 0x1eea <__vector_11+0xe6>
    1ed8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    1edc:	80 ff       	sbrs	r24, 0
    1ede:	fc cf       	rjmp	.-8      	; 0x1ed8 <__vector_11+0xd4>
    1ee0:	82 2f       	mov	r24, r18
    1ee2:	80 68       	ori	r24, 0x80	; 128
    1ee4:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
    1ee8:	ce c0       	rjmp	.+412    	; 0x2086 <__vector_11+0x282>
    1eea:	96 30       	cpi	r25, 0x06	; 6
    1eec:	09 f0       	breq	.+2      	; 0x1ef0 <__vector_11+0xec>
    1eee:	7d c0       	rjmp	.+250    	; 0x1fea <__vector_11+0x1e6>
    1ef0:	eb 8c       	ldd	r14, Y+27	; 0x1b
    1ef2:	fc 8c       	ldd	r15, Y+28	; 0x1c
    1ef4:	12 30       	cpi	r17, 0x02	; 2
    1ef6:	69 f5       	brne	.+90     	; 0x1f52 <__vector_11+0x14e>
    1ef8:	80 e0       	ldi	r24, 0x00	; 0
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <_Z11InitControli>
    1f00:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <_ZL14SendInterfacesv>
    1f04:	99 e0       	ldi	r25, 0x09	; 9
    1f06:	9e 01       	movw	r18, r28
    1f08:	2f 5f       	subi	r18, 0xFF	; 255
    1f0a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f0c:	69 01       	movw	r12, r18
    1f0e:	f9 01       	movw	r30, r18
    1f10:	29 2f       	mov	r18, r25
    1f12:	11 92       	st	Z+, r1
    1f14:	2a 95       	dec	r18
    1f16:	e9 f7       	brne	.-6      	; 0x1f12 <__vector_11+0x10e>
    1f18:	99 83       	std	Y+1, r25	; 0x01
    1f1a:	1a 83       	std	Y+2, r17	; 0x02
    1f1c:	91 e0       	ldi	r25, 0x01	; 1
    1f1e:	9e 83       	std	Y+6, r25	; 0x06
    1f20:	90 ea       	ldi	r25, 0xA0	; 160
    1f22:	98 87       	std	Y+8, r25	; 0x08
    1f24:	9a ef       	ldi	r25, 0xFA	; 250
    1f26:	99 87       	std	Y+9, r25	; 0x09
    1f28:	20 91 84 03 	lds	r18, 0x0384	; 0x800384 <_ZL6_cmark>
    1f2c:	30 91 85 03 	lds	r19, 0x0385	; 0x800385 <_ZL6_cmark+0x1>
    1f30:	27 5f       	subi	r18, 0xF7	; 247
    1f32:	3f 4f       	sbci	r19, 0xFF	; 255
    1f34:	3c 83       	std	Y+4, r19	; 0x04
    1f36:	2b 83       	std	Y+3, r18	; 0x03
    1f38:	8d 83       	std	Y+5, r24	; 0x05
    1f3a:	c7 01       	movw	r24, r14
    1f3c:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <_Z11InitControli>
    1f40:	49 e0       	ldi	r20, 0x09	; 9
    1f42:	50 e0       	ldi	r21, 0x00	; 0
    1f44:	b6 01       	movw	r22, r12
    1f46:	80 e0       	ldi	r24, 0x00	; 0
    1f48:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <_Z15USB_SendControlhPKvi>
    1f4c:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <_ZL14SendInterfacesv>
    1f50:	9a c0       	rjmp	.+308    	; 0x2086 <__vector_11+0x282>
    1f52:	c7 01       	movw	r24, r14
    1f54:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <_Z11InitControli>
    1f58:	0e 94 75 19 	call	0x32ea	; 0x32ea <_Z12PluggableUSBv>
    1f5c:	be 01       	movw	r22, r28
    1f5e:	6b 5e       	subi	r22, 0xEB	; 235
    1f60:	7f 4f       	sbci	r23, 0xFF	; 255
    1f62:	0e 94 19 19 	call	0x3232	; 0x3232 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>
    1f66:	00 97       	sbiw	r24, 0x00	; 0
    1f68:	19 f0       	breq	.+6      	; 0x1f70 <__vector_11+0x16c>
    1f6a:	0c f0       	brlt	.+2      	; 0x1f6e <__vector_11+0x16a>
    1f6c:	8c c0       	rjmp	.+280    	; 0x2086 <__vector_11+0x282>
    1f6e:	8f c0       	rjmp	.+286    	; 0x208e <__vector_11+0x28a>
    1f70:	11 30       	cpi	r17, 0x01	; 1
    1f72:	71 f4       	brne	.+28     	; 0x1f90 <__vector_11+0x18c>
    1f74:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f76:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f78:	08 97       	sbiw	r24, 0x08	; 8
    1f7a:	19 f4       	brne	.+6      	; 0x1f82 <__vector_11+0x17e>
    1f7c:	81 e0       	ldi	r24, 0x01	; 1
    1f7e:	80 93 81 03 	sts	0x0381, r24	; 0x800381 <_ZL13_cdcComposite>
    1f82:	80 91 81 03 	lds	r24, 0x0381	; 0x800381 <_ZL13_cdcComposite>
    1f86:	81 11       	cpse	r24, r1
    1f88:	73 c0       	rjmp	.+230    	; 0x2070 <__vector_11+0x26c>
    1f8a:	6c ed       	ldi	r22, 0xDC	; 220
    1f8c:	70 e0       	ldi	r23, 0x00	; 0
    1f8e:	75 c0       	rjmp	.+234    	; 0x207a <__vector_11+0x276>
    1f90:	13 30       	cpi	r17, 0x03	; 3
    1f92:	09 f0       	breq	.+2      	; 0x1f96 <__vector_11+0x192>
    1f94:	7c c0       	rjmp	.+248    	; 0x208e <__vector_11+0x28a>
    1f96:	8f 89       	ldd	r24, Y+23	; 0x17
    1f98:	88 23       	and	r24, r24
    1f9a:	09 f4       	brne	.+2      	; 0x1f9e <__vector_11+0x19a>
    1f9c:	6c c0       	rjmp	.+216    	; 0x2076 <__vector_11+0x272>
    1f9e:	82 30       	cpi	r24, 0x02	; 2
    1fa0:	29 f4       	brne	.+10     	; 0x1fac <__vector_11+0x1a8>
    1fa2:	40 e8       	ldi	r20, 0x80	; 128
    1fa4:	6d e0       	ldi	r22, 0x0D	; 13
    1fa6:	8a ef       	ldi	r24, 0xFA	; 250
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	06 c0       	rjmp	.+12     	; 0x1fb8 <__vector_11+0x1b4>
    1fac:	81 30       	cpi	r24, 0x01	; 1
    1fae:	39 f4       	brne	.+14     	; 0x1fbe <__vector_11+0x1ba>
    1fb0:	40 e8       	ldi	r20, 0x80	; 128
    1fb2:	6b e0       	ldi	r22, 0x0B	; 11
    1fb4:	8e ee       	ldi	r24, 0xEE	; 238
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <_ZL24USB_SendStringDescriptorPKhhh>
    1fbc:	56 c0       	rjmp	.+172    	; 0x206a <__vector_11+0x266>
    1fbe:	83 30       	cpi	r24, 0x03	; 3
    1fc0:	09 f0       	breq	.+2      	; 0x1fc4 <__vector_11+0x1c0>
    1fc2:	65 c0       	rjmp	.+202    	; 0x208e <__vector_11+0x28a>
    1fc4:	0e 94 75 19 	call	0x32ea	; 0x32ea <_Z12PluggableUSBv>
    1fc8:	8e 01       	movw	r16, r28
    1fca:	0f 5f       	subi	r16, 0xFF	; 255
    1fcc:	1f 4f       	sbci	r17, 0xFF	; 255
    1fce:	b8 01       	movw	r22, r16
    1fd0:	0e 94 38 19 	call	0x3270	; 0x3270 <_ZN13PluggableUSB_12getShortNameEPc>
    1fd4:	f8 01       	movw	r30, r16
    1fd6:	01 90       	ld	r0, Z+
    1fd8:	00 20       	and	r0, r0
    1fda:	e9 f7       	brne	.-6      	; 0x1fd6 <__vector_11+0x1d2>
    1fdc:	31 97       	sbiw	r30, 0x01	; 1
    1fde:	bf 01       	movw	r22, r30
    1fe0:	60 1b       	sub	r22, r16
    1fe2:	71 0b       	sbc	r23, r17
    1fe4:	40 e0       	ldi	r20, 0x00	; 0
    1fe6:	c8 01       	movw	r24, r16
    1fe8:	e7 cf       	rjmp	.-50     	; 0x1fb8 <__vector_11+0x1b4>
    1fea:	97 30       	cpi	r25, 0x07	; 7
    1fec:	09 f4       	brne	.+2      	; 0x1ff0 <__vector_11+0x1ec>
    1fee:	4f c0       	rjmp	.+158    	; 0x208e <__vector_11+0x28a>
    1ff0:	98 30       	cpi	r25, 0x08	; 8
    1ff2:	21 f4       	brne	.+8      	; 0x1ffc <__vector_11+0x1f8>
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    1ffa:	45 c0       	rjmp	.+138    	; 0x2086 <__vector_11+0x282>
    1ffc:	99 30       	cpi	r25, 0x09	; 9
    1ffe:	09 f0       	breq	.+2      	; 0x2002 <__vector_11+0x1fe>
    2000:	42 c0       	rjmp	.+132    	; 0x2086 <__vector_11+0x282>
    2002:	83 70       	andi	r24, 0x03	; 3
    2004:	09 f0       	breq	.+2      	; 0x2008 <__vector_11+0x204>
    2006:	43 c0       	rjmp	.+134    	; 0x208e <__vector_11+0x28a>
    2008:	e4 e4       	ldi	r30, 0x44	; 68
    200a:	f1 e0       	ldi	r31, 0x01	; 1
    200c:	81 e0       	ldi	r24, 0x01	; 1
    200e:	31 e0       	ldi	r19, 0x01	; 1
    2010:	96 e3       	ldi	r25, 0x36	; 54
    2012:	20 81       	ld	r18, Z
    2014:	21 11       	cpse	r18, r1
    2016:	09 c0       	rjmp	.+18     	; 0x202a <__vector_11+0x226>
    2018:	8e e7       	ldi	r24, 0x7E	; 126
    201a:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
    201e:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
    2022:	8f 89       	ldd	r24, Y+23	; 0x17
    2024:	80 93 88 03 	sts	0x0388, r24	; 0x800388 <_usbConfiguration>
    2028:	2e c0       	rjmp	.+92     	; 0x2086 <__vector_11+0x282>
    202a:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    202e:	30 93 eb 00 	sts	0x00EB, r19	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    2032:	21 91       	ld	r18, Z+
    2034:	20 93 ec 00 	sts	0x00EC, r18	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    2038:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    203c:	8f 5f       	subi	r24, 0xFF	; 255
    203e:	87 30       	cpi	r24, 0x07	; 7
    2040:	41 f7       	brne	.-48     	; 0x2012 <__vector_11+0x20e>
    2042:	ea cf       	rjmp	.-44     	; 0x2018 <__vector_11+0x214>
    2044:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2046:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2048:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <_Z11InitControli>
    204c:	89 8d       	ldd	r24, Y+25	; 0x19
    204e:	81 11       	cpse	r24, r1
    2050:	05 c0       	rjmp	.+10     	; 0x205c <__vector_11+0x258>
    2052:	ce 01       	movw	r24, r28
    2054:	45 96       	adiw	r24, 0x15	; 21
    2056:	0e 94 58 18 	call	0x30b0	; 0x30b0 <_Z9CDC_SetupR8USBSetup>
    205a:	07 c0       	rjmp	.+14     	; 0x206a <__vector_11+0x266>
    205c:	0e 94 75 19 	call	0x32ea	; 0x32ea <_Z12PluggableUSBv>
    2060:	be 01       	movw	r22, r28
    2062:	6b 5e       	subi	r22, 0xEB	; 235
    2064:	7f 4f       	sbci	r23, 0xFF	; 255
    2066:	0e 94 57 19 	call	0x32ae	; 0x32ae <_ZN13PluggableUSB_5setupER8USBSetup>
    206a:	88 23       	and	r24, r24
    206c:	81 f0       	breq	.+32     	; 0x208e <__vector_11+0x28a>
    206e:	0b c0       	rjmp	.+22     	; 0x2086 <__vector_11+0x282>
    2070:	6a ec       	ldi	r22, 0xCA	; 202
    2072:	70 e0       	ldi	r23, 0x00	; 0
    2074:	02 c0       	rjmp	.+4      	; 0x207a <__vector_11+0x276>
    2076:	68 e0       	ldi	r22, 0x08	; 8
    2078:	71 e0       	ldi	r23, 0x01	; 1
    207a:	fb 01       	movw	r30, r22
    207c:	44 91       	lpm	r20, Z
    207e:	50 e0       	ldi	r21, 0x00	; 0
    2080:	80 e8       	ldi	r24, 0x80	; 128
    2082:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <_Z15USB_SendControlhPKvi>
    2086:	8e ef       	ldi	r24, 0xFE	; 254
    2088:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    208c:	03 c0       	rjmp	.+6      	; 0x2094 <__vector_11+0x290>
    208e:	81 e2       	ldi	r24, 0x21	; 33
    2090:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    2094:	6c 96       	adiw	r28, 0x1c	; 28
    2096:	0f b6       	in	r0, 0x3f	; 63
    2098:	f8 94       	cli
    209a:	de bf       	out	0x3e, r29	; 62
    209c:	0f be       	out	0x3f, r0	; 63
    209e:	cd bf       	out	0x3d, r28	; 61
    20a0:	df 91       	pop	r29
    20a2:	cf 91       	pop	r28
    20a4:	ff 91       	pop	r31
    20a6:	ef 91       	pop	r30
    20a8:	bf 91       	pop	r27
    20aa:	af 91       	pop	r26
    20ac:	9f 91       	pop	r25
    20ae:	8f 91       	pop	r24
    20b0:	7f 91       	pop	r23
    20b2:	6f 91       	pop	r22
    20b4:	5f 91       	pop	r21
    20b6:	4f 91       	pop	r20
    20b8:	3f 91       	pop	r19
    20ba:	2f 91       	pop	r18
    20bc:	1f 91       	pop	r17
    20be:	0f 91       	pop	r16
    20c0:	ff 90       	pop	r15
    20c2:	ef 90       	pop	r14
    20c4:	df 90       	pop	r13
    20c6:	cf 90       	pop	r12
    20c8:	0f 90       	pop	r0
    20ca:	0f be       	out	0x3f, r0	; 63
    20cc:	0f 90       	pop	r0
    20ce:	1f 90       	pop	r1
    20d0:	18 95       	reti

000020d2 <_Z9USB_Flushh>:
    20d2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    20d6:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    20da:	88 23       	and	r24, r24
    20dc:	19 f0       	breq	.+6      	; 0x20e4 <_Z9USB_Flushh+0x12>
    20de:	8a e3       	ldi	r24, 0x3A	; 58
    20e0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    20e4:	08 95       	ret

000020e6 <__vector_10>:
    20e6:	1f 92       	push	r1
    20e8:	0f 92       	push	r0
    20ea:	0f b6       	in	r0, 0x3f	; 63
    20ec:	0f 92       	push	r0
    20ee:	11 24       	eor	r1, r1
    20f0:	2f 93       	push	r18
    20f2:	3f 93       	push	r19
    20f4:	4f 93       	push	r20
    20f6:	5f 93       	push	r21
    20f8:	6f 93       	push	r22
    20fa:	7f 93       	push	r23
    20fc:	8f 93       	push	r24
    20fe:	9f 93       	push	r25
    2100:	af 93       	push	r26
    2102:	bf 93       	push	r27
    2104:	cf 93       	push	r28
    2106:	ef 93       	push	r30
    2108:	ff 93       	push	r31
    210a:	c0 91 e1 00 	lds	r28, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    210e:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2112:	83 7f       	andi	r24, 0xF3	; 243
    2114:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2118:	c3 ff       	sbrs	r28, 3
    211a:	0f c0       	rjmp	.+30     	; 0x213a <__vector_10+0x54>
    211c:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    2120:	81 e0       	ldi	r24, 0x01	; 1
    2122:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    2126:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
    212a:	82 e3       	ldi	r24, 0x32	; 50
    212c:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
    2130:	10 92 88 03 	sts	0x0388, r1	; 0x800388 <_usbConfiguration>
    2134:	88 e0       	ldi	r24, 0x08	; 8
    2136:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
    213a:	c2 ff       	sbrs	r28, 2
    213c:	19 c0       	rjmp	.+50     	; 0x2170 <__vector_10+0x8a>
    213e:	83 e0       	ldi	r24, 0x03	; 3
    2140:	0e 94 69 10 	call	0x20d2	; 0x20d2 <_Z9USB_Flushh>
    2144:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <TxLEDPulse>
    2148:	88 23       	and	r24, r24
    214a:	39 f0       	breq	.+14     	; 0x215a <__vector_10+0x74>
    214c:	80 91 8a 03 	lds	r24, 0x038A	; 0x80038a <TxLEDPulse>
    2150:	81 50       	subi	r24, 0x01	; 1
    2152:	80 93 8a 03 	sts	0x038A, r24	; 0x80038a <TxLEDPulse>
    2156:	88 23       	and	r24, r24
    2158:	89 f1       	breq	.+98     	; 0x21bc <__vector_10+0xd6>
    215a:	80 91 89 03 	lds	r24, 0x0389	; 0x800389 <RxLEDPulse>
    215e:	88 23       	and	r24, r24
    2160:	39 f0       	breq	.+14     	; 0x2170 <__vector_10+0x8a>
    2162:	80 91 89 03 	lds	r24, 0x0389	; 0x800389 <RxLEDPulse>
    2166:	81 50       	subi	r24, 0x01	; 1
    2168:	80 93 89 03 	sts	0x0389, r24	; 0x800389 <RxLEDPulse>
    216c:	88 23       	and	r24, r24
    216e:	41 f1       	breq	.+80     	; 0x21c0 <__vector_10+0xda>
    2170:	c4 ff       	sbrs	r28, 4
    2172:	10 c0       	rjmp	.+32     	; 0x2194 <__vector_10+0xae>
    2174:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2178:	8e 7e       	andi	r24, 0xEE	; 238
    217a:	81 60       	ori	r24, 0x01	; 1
    217c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    2180:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    2184:	8f 7e       	andi	r24, 0xEF	; 239
    2186:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    218a:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <_usbSuspendState>
    218e:	8e 7e       	andi	r24, 0xEE	; 238
    2190:	80 61       	ori	r24, 0x10	; 16
    2192:	11 c0       	rjmp	.+34     	; 0x21b6 <__vector_10+0xd0>
    2194:	c0 ff       	sbrs	r28, 0
    2196:	16 c0       	rjmp	.+44     	; 0x21c4 <__vector_10+0xde>
    2198:	80 91 e2 00 	lds	r24, 0x00E2	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    219c:	8e 7e       	andi	r24, 0xEE	; 238
    219e:	80 61       	ori	r24, 0x10	; 16
    21a0:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    21a4:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    21a8:	8e 7e       	andi	r24, 0xEE	; 238
    21aa:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    21ae:	80 91 86 03 	lds	r24, 0x0386	; 0x800386 <_usbSuspendState>
    21b2:	8e 7e       	andi	r24, 0xEE	; 238
    21b4:	81 60       	ori	r24, 0x01	; 1
    21b6:	80 93 86 03 	sts	0x0386, r24	; 0x800386 <_usbSuspendState>
    21ba:	04 c0       	rjmp	.+8      	; 0x21c4 <__vector_10+0xde>
    21bc:	5d 98       	cbi	0x0b, 5	; 11
    21be:	cd cf       	rjmp	.-102    	; 0x215a <__vector_10+0x74>
    21c0:	28 98       	cbi	0x05, 0	; 5
    21c2:	d6 cf       	rjmp	.-84     	; 0x2170 <__vector_10+0x8a>
    21c4:	ff 91       	pop	r31
    21c6:	ef 91       	pop	r30
    21c8:	cf 91       	pop	r28
    21ca:	bf 91       	pop	r27
    21cc:	af 91       	pop	r26
    21ce:	9f 91       	pop	r25
    21d0:	8f 91       	pop	r24
    21d2:	7f 91       	pop	r23
    21d4:	6f 91       	pop	r22
    21d6:	5f 91       	pop	r21
    21d8:	4f 91       	pop	r20
    21da:	3f 91       	pop	r19
    21dc:	2f 91       	pop	r18
    21de:	0f 90       	pop	r0
    21e0:	0f be       	out	0x3f, r0	; 63
    21e2:	0f 90       	pop	r0
    21e4:	1f 90       	pop	r1
    21e6:	18 95       	reti

000021e8 <_ZN10USBDevice_6attachEv>:
{
}

void USBDevice_::attach()
{
	_usbConfiguration = 0;
    21e8:	10 92 88 03 	sts	0x0388, r1	; 0x800388 <_usbConfiguration>
	_usbCurrentStatus = 0;
    21ec:	10 92 87 03 	sts	0x0387, r1	; 0x800387 <_usbCurrentStatus>
	_usbSuspendState = 0;
    21f0:	10 92 86 03 	sts	0x0386, r1	; 0x800386 <_usbSuspendState>
	USB_ClockEnable();
    21f4:	0e 94 41 0d 	call	0x1a82	; 0x1a82 <_ZL15USB_ClockEnablev>

	UDINT &= ~((1<<WAKEUPI) | (1<<SUSPI)); // clear already pending WAKEUP / SUSPEND requests
    21f8:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    21fc:	8e 7e       	andi	r24, 0xEE	; 238
    21fe:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
	UDIEN = (1<<EORSTE) | (1<<SOFE) | (1<<SUSPE);	// Enable interrupts for EOR (End of Reset), SOF (start of frame) and SUSPEND
    2202:	8d e0       	ldi	r24, 0x0D	; 13
    2204:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
	
	TX_RX_LED_INIT;
    2208:	55 9a       	sbi	0x0a, 5	; 10
    220a:	20 9a       	sbi	0x04, 0	; 4
    220c:	5d 98       	cbi	0x0b, 5	; 11
    220e:	28 98       	cbi	0x05, 0	; 5

#if MAGIC_KEY_POS != (RAMEND-1)
	if (pgm_read_word(FLASHEND - 1) == NEW_LUFA_SIGNATURE) {
    2210:	ee ef       	ldi	r30, 0xFE	; 254
    2212:	ff e7       	ldi	r31, 0x7F	; 127
    2214:	85 91       	lpm	r24, Z+
    2216:	94 91       	lpm	r25, Z
    2218:	8b 3f       	cpi	r24, 0xFB	; 251
    221a:	9c 4d       	sbci	r25, 0xDC	; 220
    221c:	19 f4       	brne	.+6      	; 0x2224 <_ZN10USBDevice_6attachEv+0x3c>
		_updatedLUFAbootloader = true;
    221e:	81 e0       	ldi	r24, 0x01	; 1
    2220:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <_updatedLUFAbootloader>
    2224:	08 95       	ret

00002226 <__vector_23>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    2226:	1f 92       	push	r1
    2228:	0f 92       	push	r0
    222a:	0f b6       	in	r0, 0x3f	; 63
    222c:	0f 92       	push	r0
    222e:	11 24       	eor	r1, r1
    2230:	2f 93       	push	r18
    2232:	3f 93       	push	r19
    2234:	8f 93       	push	r24
    2236:	9f 93       	push	r25
    2238:	af 93       	push	r26
    223a:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    223c:	80 91 8c 03 	lds	r24, 0x038C	; 0x80038c <timer0_millis>
    2240:	90 91 8d 03 	lds	r25, 0x038D	; 0x80038d <timer0_millis+0x1>
    2244:	a0 91 8e 03 	lds	r26, 0x038E	; 0x80038e <timer0_millis+0x2>
    2248:	b0 91 8f 03 	lds	r27, 0x038F	; 0x80038f <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    224c:	30 91 8b 03 	lds	r19, 0x038B	; 0x80038b <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    2250:	23 e0       	ldi	r18, 0x03	; 3
    2252:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    2254:	2d 37       	cpi	r18, 0x7D	; 125
    2256:	20 f4       	brcc	.+8      	; 0x2260 <__vector_23+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    2258:	01 96       	adiw	r24, 0x01	; 1
    225a:	a1 1d       	adc	r26, r1
    225c:	b1 1d       	adc	r27, r1
    225e:	05 c0       	rjmp	.+10     	; 0x226a <__vector_23+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    2260:	26 e8       	ldi	r18, 0x86	; 134
    2262:	23 0f       	add	r18, r19
		m += 1;
    2264:	02 96       	adiw	r24, 0x02	; 2
    2266:	a1 1d       	adc	r26, r1
    2268:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    226a:	20 93 8b 03 	sts	0x038B, r18	; 0x80038b <timer0_fract>
	timer0_millis = m;
    226e:	80 93 8c 03 	sts	0x038C, r24	; 0x80038c <timer0_millis>
    2272:	90 93 8d 03 	sts	0x038D, r25	; 0x80038d <timer0_millis+0x1>
    2276:	a0 93 8e 03 	sts	0x038E, r26	; 0x80038e <timer0_millis+0x2>
    227a:	b0 93 8f 03 	sts	0x038F, r27	; 0x80038f <timer0_millis+0x3>
	timer0_overflow_count++;
    227e:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <timer0_overflow_count>
    2282:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <timer0_overflow_count+0x1>
    2286:	a0 91 92 03 	lds	r26, 0x0392	; 0x800392 <timer0_overflow_count+0x2>
    228a:	b0 91 93 03 	lds	r27, 0x0393	; 0x800393 <timer0_overflow_count+0x3>
    228e:	01 96       	adiw	r24, 0x01	; 1
    2290:	a1 1d       	adc	r26, r1
    2292:	b1 1d       	adc	r27, r1
    2294:	80 93 90 03 	sts	0x0390, r24	; 0x800390 <timer0_overflow_count>
    2298:	90 93 91 03 	sts	0x0391, r25	; 0x800391 <timer0_overflow_count+0x1>
    229c:	a0 93 92 03 	sts	0x0392, r26	; 0x800392 <timer0_overflow_count+0x2>
    22a0:	b0 93 93 03 	sts	0x0393, r27	; 0x800393 <timer0_overflow_count+0x3>
}
    22a4:	bf 91       	pop	r27
    22a6:	af 91       	pop	r26
    22a8:	9f 91       	pop	r25
    22aa:	8f 91       	pop	r24
    22ac:	3f 91       	pop	r19
    22ae:	2f 91       	pop	r18
    22b0:	0f 90       	pop	r0
    22b2:	0f be       	out	0x3f, r0	; 63
    22b4:	0f 90       	pop	r0
    22b6:	1f 90       	pop	r1
    22b8:	18 95       	reti

000022ba <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    22ba:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    22bc:	f8 94       	cli
	m = timer0_millis;
    22be:	60 91 8c 03 	lds	r22, 0x038C	; 0x80038c <timer0_millis>
    22c2:	70 91 8d 03 	lds	r23, 0x038D	; 0x80038d <timer0_millis+0x1>
    22c6:	80 91 8e 03 	lds	r24, 0x038E	; 0x80038e <timer0_millis+0x2>
    22ca:	90 91 8f 03 	lds	r25, 0x038F	; 0x80038f <timer0_millis+0x3>
	SREG = oldSREG;
    22ce:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    22d0:	08 95       	ret

000022d2 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    22d2:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    22d4:	f8 94       	cli
	m = timer0_overflow_count;
    22d6:	80 91 90 03 	lds	r24, 0x0390	; 0x800390 <timer0_overflow_count>
    22da:	90 91 91 03 	lds	r25, 0x0391	; 0x800391 <timer0_overflow_count+0x1>
    22de:	a0 91 92 03 	lds	r26, 0x0392	; 0x800392 <timer0_overflow_count+0x2>
    22e2:	b0 91 93 03 	lds	r27, 0x0393	; 0x800393 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    22e6:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    22e8:	a8 9b       	sbis	0x15, 0	; 21
    22ea:	05 c0       	rjmp	.+10     	; 0x22f6 <micros+0x24>
    22ec:	2f 3f       	cpi	r18, 0xFF	; 255
    22ee:	19 f0       	breq	.+6      	; 0x22f6 <micros+0x24>
		m++;
    22f0:	01 96       	adiw	r24, 0x01	; 1
    22f2:	a1 1d       	adc	r26, r1
    22f4:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    22f6:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    22f8:	ba 2f       	mov	r27, r26
    22fa:	a9 2f       	mov	r26, r25
    22fc:	98 2f       	mov	r25, r24
    22fe:	88 27       	eor	r24, r24
    2300:	82 0f       	add	r24, r18
    2302:	91 1d       	adc	r25, r1
    2304:	a1 1d       	adc	r26, r1
    2306:	b1 1d       	adc	r27, r1
    2308:	bc 01       	movw	r22, r24
    230a:	cd 01       	movw	r24, r26
    230c:	42 e0       	ldi	r20, 0x02	; 2
    230e:	66 0f       	add	r22, r22
    2310:	77 1f       	adc	r23, r23
    2312:	88 1f       	adc	r24, r24
    2314:	99 1f       	adc	r25, r25
    2316:	4a 95       	dec	r20
    2318:	d1 f7       	brne	.-12     	; 0x230e <micros+0x3c>
}
    231a:	08 95       	ret

0000231c <delay>:

void delay(unsigned long ms)
{
    231c:	8f 92       	push	r8
    231e:	9f 92       	push	r9
    2320:	af 92       	push	r10
    2322:	bf 92       	push	r11
    2324:	cf 92       	push	r12
    2326:	df 92       	push	r13
    2328:	ef 92       	push	r14
    232a:	ff 92       	push	r15
    232c:	6b 01       	movw	r12, r22
    232e:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    2330:	0e 94 69 11 	call	0x22d2	; 0x22d2 <micros>
    2334:	4b 01       	movw	r8, r22
    2336:	5c 01       	movw	r10, r24

	while (ms > 0) {
    2338:	c1 14       	cp	r12, r1
    233a:	d1 04       	cpc	r13, r1
    233c:	e1 04       	cpc	r14, r1
    233e:	f1 04       	cpc	r15, r1
    2340:	01 f1       	breq	.+64     	; 0x2382 <delay+0x66>
		yield();
    2342:	0e 94 ef 18 	call	0x31de	; 0x31de <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    2346:	0e 94 69 11 	call	0x22d2	; 0x22d2 <micros>
    234a:	dc 01       	movw	r26, r24
    234c:	cb 01       	movw	r24, r22
    234e:	88 19       	sub	r24, r8
    2350:	99 09       	sbc	r25, r9
    2352:	aa 09       	sbc	r26, r10
    2354:	bb 09       	sbc	r27, r11
    2356:	88 3e       	cpi	r24, 0xE8	; 232
    2358:	93 40       	sbci	r25, 0x03	; 3
    235a:	a1 05       	cpc	r26, r1
    235c:	b1 05       	cpc	r27, r1
    235e:	60 f3       	brcs	.-40     	; 0x2338 <delay+0x1c>
			ms--;
    2360:	21 e0       	ldi	r18, 0x01	; 1
    2362:	c2 1a       	sub	r12, r18
    2364:	d1 08       	sbc	r13, r1
    2366:	e1 08       	sbc	r14, r1
    2368:	f1 08       	sbc	r15, r1
			start += 1000;
    236a:	88 ee       	ldi	r24, 0xE8	; 232
    236c:	88 0e       	add	r8, r24
    236e:	83 e0       	ldi	r24, 0x03	; 3
    2370:	98 1e       	adc	r9, r24
    2372:	a1 1c       	adc	r10, r1
    2374:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    2376:	c1 14       	cp	r12, r1
    2378:	d1 04       	cpc	r13, r1
    237a:	e1 04       	cpc	r14, r1
    237c:	f1 04       	cpc	r15, r1
    237e:	19 f7       	brne	.-58     	; 0x2346 <delay+0x2a>
    2380:	db cf       	rjmp	.-74     	; 0x2338 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    2382:	ff 90       	pop	r15
    2384:	ef 90       	pop	r14
    2386:	df 90       	pop	r13
    2388:	cf 90       	pop	r12
    238a:	bf 90       	pop	r11
    238c:	af 90       	pop	r10
    238e:	9f 90       	pop	r9
    2390:	8f 90       	pop	r8
    2392:	08 95       	ret

00002394 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    2394:	82 30       	cpi	r24, 0x02	; 2
    2396:	91 05       	cpc	r25, r1
    2398:	38 f0       	brcs	.+14     	; 0x23a8 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    239a:	88 0f       	add	r24, r24
    239c:	99 1f       	adc	r25, r25
    239e:	88 0f       	add	r24, r24
    23a0:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    23a2:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    23a4:	01 97       	sbiw	r24, 0x01	; 1
    23a6:	f1 f7       	brne	.-4      	; 0x23a4 <delayMicroseconds+0x10>
    23a8:	08 95       	ret

000023aa <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    23aa:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    23ac:	84 b5       	in	r24, 0x24	; 36
    23ae:	82 60       	ori	r24, 0x02	; 2
    23b0:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    23b2:	84 b5       	in	r24, 0x24	; 36
    23b4:	81 60       	ori	r24, 0x01	; 1
    23b6:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    23b8:	85 b5       	in	r24, 0x25	; 37
    23ba:	82 60       	ori	r24, 0x02	; 2
    23bc:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    23be:	85 b5       	in	r24, 0x25	; 37
    23c0:	81 60       	ori	r24, 0x01	; 1
    23c2:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    23c4:	ee e6       	ldi	r30, 0x6E	; 110
    23c6:	f0 e0       	ldi	r31, 0x00	; 0
    23c8:	80 81       	ld	r24, Z
    23ca:	81 60       	ori	r24, 0x01	; 1
    23cc:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    23ce:	e1 e8       	ldi	r30, 0x81	; 129
    23d0:	f0 e0       	ldi	r31, 0x00	; 0
    23d2:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    23d4:	80 81       	ld	r24, Z
    23d6:	82 60       	ori	r24, 0x02	; 2
    23d8:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    23da:	80 81       	ld	r24, Z
    23dc:	81 60       	ori	r24, 0x01	; 1
    23de:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    23e0:	e0 e8       	ldi	r30, 0x80	; 128
    23e2:	f0 e0       	ldi	r31, 0x00	; 0
    23e4:	80 81       	ld	r24, Z
    23e6:	81 60       	ori	r24, 0x01	; 1
    23e8:	80 83       	st	Z, r24
//#else
	// Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
	sbi(TCCR3B, CS31);		// set timer 3 prescale factor to 64
    23ea:	e1 e9       	ldi	r30, 0x91	; 145
    23ec:	f0 e0       	ldi	r31, 0x00	; 0
    23ee:	80 81       	ld	r24, Z
    23f0:	82 60       	ori	r24, 0x02	; 2
    23f2:	80 83       	st	Z, r24
	sbi(TCCR3B, CS30);
    23f4:	80 81       	ld	r24, Z
    23f6:	81 60       	ori	r24, 0x01	; 1
    23f8:	80 83       	st	Z, r24
	sbi(TCCR3A, WGM30);		// put timer 3 in 8-bit phase correct pwm mode
    23fa:	e0 e9       	ldi	r30, 0x90	; 144
    23fc:	f0 e0       	ldi	r31, 0x00	; 0
    23fe:	80 81       	ld	r24, Z
    2400:	81 60       	ori	r24, 0x01	; 1
    2402:	80 83       	st	Z, r24
#endif

#if defined(TCCR4A) && defined(TCCR4B) && defined(TCCR4D) /* beginning of timer4 block for 32U4 and similar */
	sbi(TCCR4B, CS42);		// set timer4 prescale factor to 64
    2404:	e1 ec       	ldi	r30, 0xC1	; 193
    2406:	f0 e0       	ldi	r31, 0x00	; 0
    2408:	80 81       	ld	r24, Z
    240a:	84 60       	ori	r24, 0x04	; 4
    240c:	80 83       	st	Z, r24
	sbi(TCCR4B, CS41);
    240e:	80 81       	ld	r24, Z
    2410:	82 60       	ori	r24, 0x02	; 2
    2412:	80 83       	st	Z, r24
	sbi(TCCR4B, CS40);
    2414:	80 81       	ld	r24, Z
    2416:	81 60       	ori	r24, 0x01	; 1
    2418:	80 83       	st	Z, r24
	sbi(TCCR4D, WGM40);		// put timer 4 in phase- and frequency-correct PWM mode	
    241a:	e3 ec       	ldi	r30, 0xC3	; 195
    241c:	f0 e0       	ldi	r31, 0x00	; 0
    241e:	80 81       	ld	r24, Z
    2420:	81 60       	ori	r24, 0x01	; 1
    2422:	80 83       	st	Z, r24
	sbi(TCCR4A, PWM4A);		// enable PWM mode for comparator OCR4A
    2424:	e0 ec       	ldi	r30, 0xC0	; 192
    2426:	f0 e0       	ldi	r31, 0x00	; 0
    2428:	80 81       	ld	r24, Z
    242a:	82 60       	ori	r24, 0x02	; 2
    242c:	80 83       	st	Z, r24
	sbi(TCCR4C, PWM4D);		// enable PWM mode for comparator OCR4D
    242e:	e2 ec       	ldi	r30, 0xC2	; 194
    2430:	f0 e0       	ldi	r31, 0x00	; 0
    2432:	80 81       	ld	r24, Z
    2434:	81 60       	ori	r24, 0x01	; 1
    2436:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    2438:	ea e7       	ldi	r30, 0x7A	; 122
    243a:	f0 e0       	ldi	r31, 0x00	; 0
    243c:	80 81       	ld	r24, Z
    243e:	84 60       	ori	r24, 0x04	; 4
    2440:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    2442:	80 81       	ld	r24, Z
    2444:	82 60       	ori	r24, 0x02	; 2
    2446:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    2448:	80 81       	ld	r24, Z
    244a:	81 60       	ori	r24, 0x01	; 1
    244c:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    244e:	80 81       	ld	r24, Z
    2450:	80 68       	ori	r24, 0x80	; 128
    2452:	80 83       	st	Z, r24
    2454:	08 95       	ret

00002456 <analogRead>:
{
	uint8_t low, high;

#if defined(analogPinToChannel)
#if defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
    2456:	82 31       	cpi	r24, 0x12	; 18
    2458:	08 f0       	brcs	.+2      	; 0x245c <analogRead+0x6>
    245a:	82 51       	subi	r24, 0x12	; 18
#endif
	pin = analogPinToChannel(pin);
    245c:	e8 2f       	mov	r30, r24
    245e:	f0 e0       	ldi	r31, 0x00	; 0
    2460:	e4 5f       	subi	r30, 0xF4	; 244
    2462:	fe 4f       	sbci	r31, 0xFE	; 254
    2464:	e4 91       	lpm	r30, Z
#endif

#if defined(ADCSRB) && defined(MUX5)
	// the MUX5 bit of ADCSRB selects whether we're reading from channels
	// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
    2466:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
    246a:	e3 fb       	bst	r30, 3
    246c:	22 27       	eor	r18, r18
    246e:	20 f9       	bld	r18, 0
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	95 e0       	ldi	r25, 0x05	; 5
    2474:	22 0f       	add	r18, r18
    2476:	33 1f       	adc	r19, r19
    2478:	9a 95       	dec	r25
    247a:	e1 f7       	brne	.-8      	; 0x2474 <analogRead+0x1e>
    247c:	8f 7d       	andi	r24, 0xDF	; 223
    247e:	28 2b       	or	r18, r24
    2480:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    2484:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <analog_reference>
    2488:	20 e4       	ldi	r18, 0x40	; 64
    248a:	82 9f       	mul	r24, r18
    248c:	c0 01       	movw	r24, r0
    248e:	11 24       	eor	r1, r1
    2490:	e7 70       	andi	r30, 0x07	; 7
    2492:	e8 2b       	or	r30, r24
    2494:	e0 93 7c 00 	sts	0x007C, r30	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    2498:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    249c:	80 64       	ori	r24, 0x40	; 64
    249e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    24a2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    24a6:	86 fd       	sbrc	r24, 6
    24a8:	fc cf       	rjmp	.-8      	; 0x24a2 <analogRead+0x4c>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    24aa:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
	high = ADCH;
    24ae:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    24b2:	90 e0       	ldi	r25, 0x00	; 0
}
    24b4:	92 2b       	or	r25, r18
    24b6:	08 95       	ret

000024b8 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	fc 01       	movw	r30, r24
    24bc:	31 97       	sbiw	r30, 0x01	; 1
    24be:	ef 30       	cpi	r30, 0x0F	; 15
    24c0:	f1 05       	cpc	r31, r1
    24c2:	b0 f5       	brcc	.+108    	; 0x2530 <turnOffPWM+0x78>
    24c4:	ea 5a       	subi	r30, 0xAA	; 170
    24c6:	ff 4f       	sbci	r31, 0xFF	; 255
    24c8:	0c 94 3c 1b 	jmp	0x3678	; 0x3678 <__tablejump2__>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    24cc:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    24d0:	8f 77       	andi	r24, 0x7F	; 127
    24d2:	03 c0       	rjmp	.+6      	; 0x24da <turnOffPWM+0x22>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    24d4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    24d8:	8f 7d       	andi	r24, 0xDF	; 223
    24da:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    24de:	08 95       	ret
		#endif
		#if defined(TCCR1A) && defined(COM1C1)
		case TIMER1C:   cbi(TCCR1A, COM1C1);    break;
    24e0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    24e4:	87 7f       	andi	r24, 0xF7	; 247
    24e6:	f9 cf       	rjmp	.-14     	; 0x24da <turnOffPWM+0x22>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    24e8:	84 b5       	in	r24, 0x24	; 36
    24ea:	8f 77       	andi	r24, 0x7F	; 127
    24ec:	02 c0       	rjmp	.+4      	; 0x24f2 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    24ee:	84 b5       	in	r24, 0x24	; 36
    24f0:	8f 7d       	andi	r24, 0xDF	; 223
    24f2:	84 bd       	out	0x24, r24	; 36
    24f4:	08 95       	ret
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
		#endif
		
		#if defined(TCCR3A) && defined(COM3A1)
		case  TIMER3A:  cbi(TCCR3A, COM3A1);    break;
    24f6:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    24fa:	8f 77       	andi	r24, 0x7F	; 127
    24fc:	07 c0       	rjmp	.+14     	; 0x250c <turnOffPWM+0x54>
		#endif
		#if defined(TCCR3A) && defined(COM3B1)
		case  TIMER3B:  cbi(TCCR3A, COM3B1);    break;
    24fe:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    2502:	8f 7d       	andi	r24, 0xDF	; 223
    2504:	03 c0       	rjmp	.+6      	; 0x250c <turnOffPWM+0x54>
		#endif
		#if defined(TCCR3A) && defined(COM3C1)
		case  TIMER3C:  cbi(TCCR3A, COM3C1);    break;
    2506:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    250a:	87 7f       	andi	r24, 0xF7	; 247
    250c:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    2510:	08 95       	ret
		#endif

		#if defined(TCCR4A) && defined(COM4A1)
		case  TIMER4A:  cbi(TCCR4A, COM4A1);    break;
    2512:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    2516:	8f 77       	andi	r24, 0x7F	; 127
    2518:	03 c0       	rjmp	.+6      	; 0x2520 <turnOffPWM+0x68>
		#endif					
		#if defined(TCCR4A) && defined(COM4B1)
		case  TIMER4B:  cbi(TCCR4A, COM4B1);    break;
    251a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    251e:	8f 7d       	andi	r24, 0xDF	; 223
    2520:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
    2524:	08 95       	ret
		#endif
		#if defined(TCCR4A) && defined(COM4C1)
		case  TIMER4C:  cbi(TCCR4A, COM4C1);    break;
		#endif			
		#if defined(TCCR4C) && defined(COM4D1)
		case TIMER4D:	cbi(TCCR4C, COM4D1);	break;
    2526:	80 91 c2 00 	lds	r24, 0x00C2	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    252a:	87 7f       	andi	r24, 0xF7	; 247
    252c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
    2530:	08 95       	ret

00002532 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    2532:	cf 93       	push	r28
    2534:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	fc 01       	movw	r30, r24
    253a:	e9 5c       	subi	r30, 0xC9	; 201
    253c:	fe 4f       	sbci	r31, 0xFE	; 254
    253e:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    2540:	fc 01       	movw	r30, r24
    2542:	ea 5a       	subi	r30, 0xAA	; 170
    2544:	fe 4f       	sbci	r31, 0xFE	; 254
    2546:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    2548:	88 23       	and	r24, r24
    254a:	61 f1       	breq	.+88     	; 0x25a4 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	88 0f       	add	r24, r24
    2550:	99 1f       	adc	r25, r25
    2552:	fc 01       	movw	r30, r24
    2554:	ed 57       	subi	r30, 0x7D	; 125
    2556:	fe 4f       	sbci	r31, 0xFE	; 254
    2558:	c5 91       	lpm	r28, Z+
    255a:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    255c:	fc 01       	movw	r30, r24
    255e:	eb 58       	subi	r30, 0x8B	; 139
    2560:	fe 4f       	sbci	r31, 0xFE	; 254
    2562:	a5 91       	lpm	r26, Z+
    2564:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    2566:	61 11       	cpse	r22, r1
    2568:	09 c0       	rjmp	.+18     	; 0x257c <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    256a:	9f b7       	in	r25, 0x3f	; 63
                cli();
    256c:	f8 94       	cli
		*reg &= ~bit;
    256e:	88 81       	ld	r24, Y
    2570:	20 95       	com	r18
    2572:	82 23       	and	r24, r18
    2574:	88 83       	st	Y, r24
		*out &= ~bit;
    2576:	ec 91       	ld	r30, X
    2578:	2e 23       	and	r18, r30
    257a:	0b c0       	rjmp	.+22     	; 0x2592 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    257c:	62 30       	cpi	r22, 0x02	; 2
    257e:	61 f4       	brne	.+24     	; 0x2598 <pinMode+0x66>
		uint8_t oldSREG = SREG;
    2580:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2582:	f8 94       	cli
		*reg &= ~bit;
    2584:	88 81       	ld	r24, Y
    2586:	32 2f       	mov	r19, r18
    2588:	30 95       	com	r19
    258a:	83 23       	and	r24, r19
    258c:	88 83       	st	Y, r24
		*out |= bit;
    258e:	ec 91       	ld	r30, X
    2590:	2e 2b       	or	r18, r30
    2592:	2c 93       	st	X, r18
		SREG = oldSREG;
    2594:	9f bf       	out	0x3f, r25	; 63
    2596:	06 c0       	rjmp	.+12     	; 0x25a4 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    2598:	8f b7       	in	r24, 0x3f	; 63
                cli();
    259a:	f8 94       	cli
		*reg |= bit;
    259c:	e8 81       	ld	r30, Y
    259e:	2e 2b       	or	r18, r30
    25a0:	28 83       	st	Y, r18
		SREG = oldSREG;
    25a2:	8f bf       	out	0x3f, r24	; 63
	}
}
    25a4:	df 91       	pop	r29
    25a6:	cf 91       	pop	r28
    25a8:	08 95       	ret

000025aa <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    25aa:	1f 93       	push	r17
    25ac:	cf 93       	push	r28
    25ae:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    25b0:	28 2f       	mov	r18, r24
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	f9 01       	movw	r30, r18
    25b6:	e8 5e       	subi	r30, 0xE8	; 232
    25b8:	fe 4f       	sbci	r31, 0xFE	; 254
    25ba:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    25bc:	f9 01       	movw	r30, r18
    25be:	e9 5c       	subi	r30, 0xC9	; 201
    25c0:	fe 4f       	sbci	r31, 0xFE	; 254
    25c2:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    25c4:	f9 01       	movw	r30, r18
    25c6:	ea 5a       	subi	r30, 0xAA	; 170
    25c8:	fe 4f       	sbci	r31, 0xFE	; 254
    25ca:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    25cc:	cc 23       	and	r28, r28
    25ce:	c1 f0       	breq	.+48     	; 0x2600 <digitalWrite+0x56>
    25d0:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    25d2:	81 11       	cpse	r24, r1
    25d4:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <turnOffPWM>

	out = portOutputRegister(port);
    25d8:	ec 2f       	mov	r30, r28
    25da:	f0 e0       	ldi	r31, 0x00	; 0
    25dc:	ee 0f       	add	r30, r30
    25de:	ff 1f       	adc	r31, r31
    25e0:	eb 58       	subi	r30, 0x8B	; 139
    25e2:	fe 4f       	sbci	r31, 0xFE	; 254
    25e4:	a5 91       	lpm	r26, Z+
    25e6:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    25e8:	9f b7       	in	r25, 0x3f	; 63
	cli();
    25ea:	f8 94       	cli

	if (val == LOW) {
    25ec:	11 11       	cpse	r17, r1
    25ee:	04 c0       	rjmp	.+8      	; 0x25f8 <digitalWrite+0x4e>
		*out &= ~bit;
    25f0:	8c 91       	ld	r24, X
    25f2:	d0 95       	com	r29
    25f4:	d8 23       	and	r29, r24
    25f6:	02 c0       	rjmp	.+4      	; 0x25fc <digitalWrite+0x52>
	} else {
		*out |= bit;
    25f8:	ec 91       	ld	r30, X
    25fa:	de 2b       	or	r29, r30
    25fc:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    25fe:	9f bf       	out	0x3f, r25	; 63
}
    2600:	df 91       	pop	r29
    2602:	cf 91       	pop	r28
    2604:	1f 91       	pop	r17
    2606:	08 95       	ret

00002608 <_ZN3PID7ComputeEv>:
 *     This, as they say, is where the magic happens.  this function should be called
 *   every time "void loop()" executes.  the function will decide for itself whether a new
 *   pid Output needs to be computed
 **********************************************************************************/ 
void PID::Compute()
{
    2608:	2f 92       	push	r2
    260a:	3f 92       	push	r3
    260c:	4f 92       	push	r4
    260e:	5f 92       	push	r5
    2610:	6f 92       	push	r6
    2612:	7f 92       	push	r7
    2614:	8f 92       	push	r8
    2616:	9f 92       	push	r9
    2618:	af 92       	push	r10
    261a:	bf 92       	push	r11
    261c:	cf 92       	push	r12
    261e:	df 92       	push	r13
    2620:	ef 92       	push	r14
    2622:	ff 92       	push	r15
    2624:	0f 93       	push	r16
    2626:	1f 93       	push	r17
    2628:	cf 93       	push	r28
    262a:	df 93       	push	r29
    262c:	cd b7       	in	r28, 0x3d	; 61
    262e:	de b7       	in	r29, 0x3e	; 62
    2630:	2a 97       	sbiw	r28, 0x0a	; 10
    2632:	0f b6       	in	r0, 0x3f	; 63
    2634:	f8 94       	cli
    2636:	de bf       	out	0x3e, r29	; 62
    2638:	0f be       	out	0x3f, r0	; 63
    263a:	cd bf       	out	0x3d, r28	; 61
   if(!inAuto) return;
    263c:	dc 01       	movw	r26, r24
    263e:	d6 96       	adiw	r26, 0x36	; 54
    2640:	2c 91       	ld	r18, X
    2642:	22 23       	and	r18, r18
    2644:	09 f4       	brne	.+2      	; 0x2648 <_ZN3PID7ComputeEv+0x40>
    2646:	e9 c0       	rjmp	.+466    	; 0x281a <_ZN3PID7ComputeEv+0x212>
    2648:	9a 87       	std	Y+10, r25	; 0x0a
    264a:	89 87       	std	Y+9, r24	; 0x09
   unsigned long now = millis();
    264c:	0e 94 5d 11 	call	0x22ba	; 0x22ba <millis>
    2650:	69 83       	std	Y+1, r22	; 0x01
    2652:	7a 83       	std	Y+2, r23	; 0x02
    2654:	8b 83       	std	Y+3, r24	; 0x03
    2656:	9c 83       	std	Y+4, r25	; 0x04
   int timeChange = (now - lastTime);
   if(timeChange>=SampleTime)
    2658:	e9 85       	ldd	r30, Y+9	; 0x09
    265a:	fa 85       	ldd	r31, Y+10	; 0x0a
    265c:	80 a1       	ldd	r24, Z+32	; 0x20
    265e:	91 a1       	ldd	r25, Z+33	; 0x21
    2660:	29 81       	ldd	r18, Y+1	; 0x01
    2662:	3a 81       	ldd	r19, Y+2	; 0x02
    2664:	28 1b       	sub	r18, r24
    2666:	39 0b       	sbc	r19, r25
    2668:	84 a5       	ldd	r24, Z+44	; 0x2c
    266a:	95 a5       	ldd	r25, Z+45	; 0x2d
    266c:	28 17       	cp	r18, r24
    266e:	39 07       	cpc	r19, r25
    2670:	0c f4       	brge	.+2      	; 0x2674 <_ZN3PID7ComputeEv+0x6c>
    2672:	d3 c0       	rjmp	.+422    	; 0x281a <_ZN3PID7ComputeEv+0x212>
   {
      /*Compute all the working error variables*/
	  double input = *myInput;
    2674:	02 8c       	ldd	r0, Z+26	; 0x1a
    2676:	f3 8d       	ldd	r31, Z+27	; 0x1b
    2678:	e0 2d       	mov	r30, r0
    267a:	80 80       	ld	r8, Z
    267c:	91 80       	ldd	r9, Z+1	; 0x01
    267e:	a2 80       	ldd	r10, Z+2	; 0x02
    2680:	b3 80       	ldd	r11, Z+3	; 0x03
      double error = *mySetpoint - input;
    2682:	a9 85       	ldd	r26, Y+9	; 0x09
    2684:	ba 85       	ldd	r27, Y+10	; 0x0a
    2686:	5e 96       	adiw	r26, 0x1e	; 30
    2688:	ed 91       	ld	r30, X+
    268a:	fc 91       	ld	r31, X
    268c:	5f 97       	sbiw	r26, 0x1f	; 31
    268e:	a5 01       	movw	r20, r10
    2690:	94 01       	movw	r18, r8
    2692:	60 81       	ld	r22, Z
    2694:	71 81       	ldd	r23, Z+1	; 0x01
    2696:	82 81       	ldd	r24, Z+2	; 0x02
    2698:	93 81       	ldd	r25, Z+3	; 0x03
    269a:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__subsf3>
    269e:	2b 01       	movw	r4, r22
    26a0:	3c 01       	movw	r6, r24
      ITerm+= (ki * error);
    26a2:	e9 85       	ldd	r30, Y+9	; 0x09
    26a4:	fa 85       	ldd	r31, Y+10	; 0x0a
    26a6:	20 89       	ldd	r18, Z+16	; 0x10
    26a8:	31 89       	ldd	r19, Z+17	; 0x11
    26aa:	42 89       	ldd	r20, Z+18	; 0x12
    26ac:	53 89       	ldd	r21, Z+19	; 0x13
    26ae:	0e 94 41 0a 	call	0x1482	; 0x1482 <__mulsf3>
    26b2:	a9 85       	ldd	r26, Y+9	; 0x09
    26b4:	ba 85       	ldd	r27, Y+10	; 0x0a
    26b6:	94 96       	adiw	r26, 0x24	; 36
    26b8:	2d 91       	ld	r18, X+
    26ba:	3d 91       	ld	r19, X+
    26bc:	4d 91       	ld	r20, X+
    26be:	5c 91       	ld	r21, X
    26c0:	97 97       	sbiw	r26, 0x27	; 39
    26c2:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__addsf3>
    26c6:	6b 01       	movw	r12, r22
    26c8:	7c 01       	movw	r14, r24
    26ca:	e9 85       	ldd	r30, Y+9	; 0x09
    26cc:	fa 85       	ldd	r31, Y+10	; 0x0a
    26ce:	64 a3       	std	Z+36, r22	; 0x24
    26d0:	75 a3       	std	Z+37, r23	; 0x25
    26d2:	86 a3       	std	Z+38, r24	; 0x26
    26d4:	97 a3       	std	Z+39, r25	; 0x27
      if(ITerm > outMax) ITerm= outMax;
    26d6:	12 a9       	ldd	r17, Z+50	; 0x32
    26d8:	03 a9       	ldd	r16, Z+51	; 0x33
    26da:	34 a8       	ldd	r3, Z+52	; 0x34
    26dc:	25 a8       	ldd	r2, Z+53	; 0x35
    26de:	21 2f       	mov	r18, r17
    26e0:	30 2f       	mov	r19, r16
    26e2:	43 2d       	mov	r20, r3
    26e4:	52 2d       	mov	r21, r2
    26e6:	0e 94 3c 0a 	call	0x1478	; 0x1478 <__gesf2>
    26ea:	18 16       	cp	r1, r24
    26ec:	2c f4       	brge	.+10     	; 0x26f8 <_ZN3PID7ComputeEv+0xf0>
    26ee:	81 2f       	mov	r24, r17
    26f0:	90 2f       	mov	r25, r16
    26f2:	a3 2d       	mov	r26, r3
    26f4:	b2 2d       	mov	r27, r2
    26f6:	18 c0       	rjmp	.+48     	; 0x2728 <_ZN3PID7ComputeEv+0x120>
      else if(ITerm < outMin) ITerm= outMin;
    26f8:	a9 85       	ldd	r26, Y+9	; 0x09
    26fa:	ba 85       	ldd	r27, Y+10	; 0x0a
    26fc:	9e 96       	adiw	r26, 0x2e	; 46
    26fe:	8d 91       	ld	r24, X+
    2700:	9d 91       	ld	r25, X+
    2702:	0d 90       	ld	r0, X+
    2704:	bc 91       	ld	r27, X
    2706:	a0 2d       	mov	r26, r0
    2708:	8d 83       	std	Y+5, r24	; 0x05
    270a:	9e 83       	std	Y+6, r25	; 0x06
    270c:	af 83       	std	Y+7, r26	; 0x07
    270e:	b8 87       	std	Y+8, r27	; 0x08
    2710:	9c 01       	movw	r18, r24
    2712:	ad 01       	movw	r20, r26
    2714:	c7 01       	movw	r24, r14
    2716:	b6 01       	movw	r22, r12
    2718:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__cmpsf2>
    271c:	87 ff       	sbrs	r24, 7
    271e:	0a c0       	rjmp	.+20     	; 0x2734 <_ZN3PID7ComputeEv+0x12c>
    2720:	8d 81       	ldd	r24, Y+5	; 0x05
    2722:	9e 81       	ldd	r25, Y+6	; 0x06
    2724:	af 81       	ldd	r26, Y+7	; 0x07
    2726:	b8 85       	ldd	r27, Y+8	; 0x08
    2728:	e9 85       	ldd	r30, Y+9	; 0x09
    272a:	fa 85       	ldd	r31, Y+10	; 0x0a
    272c:	84 a3       	std	Z+36, r24	; 0x24
    272e:	95 a3       	std	Z+37, r25	; 0x25
    2730:	a6 a3       	std	Z+38, r26	; 0x26
    2732:	b7 a3       	std	Z+39, r27	; 0x27
      double dInput = (input - lastInput);
 
      /*Compute PID Output*/
      double output = kp * error + ITerm- kd * dInput;
    2734:	a9 85       	ldd	r26, Y+9	; 0x09
    2736:	ba 85       	ldd	r27, Y+10	; 0x0a
    2738:	1c 96       	adiw	r26, 0x0c	; 12
    273a:	2d 91       	ld	r18, X+
    273c:	3d 91       	ld	r19, X+
    273e:	4d 91       	ld	r20, X+
    2740:	5c 91       	ld	r21, X
    2742:	1f 97       	sbiw	r26, 0x0f	; 15
    2744:	c3 01       	movw	r24, r6
    2746:	b2 01       	movw	r22, r4
    2748:	0e 94 41 0a 	call	0x1482	; 0x1482 <__mulsf3>
    274c:	e9 85       	ldd	r30, Y+9	; 0x09
    274e:	fa 85       	ldd	r31, Y+10	; 0x0a
    2750:	24 a1       	ldd	r18, Z+36	; 0x24
    2752:	35 a1       	ldd	r19, Z+37	; 0x25
    2754:	46 a1       	ldd	r20, Z+38	; 0x26
    2756:	57 a1       	ldd	r21, Z+39	; 0x27
    2758:	0e 94 71 08 	call	0x10e2	; 0x10e2 <__addsf3>
    275c:	6b 01       	movw	r12, r22
    275e:	7c 01       	movw	r14, r24
    2760:	a9 85       	ldd	r26, Y+9	; 0x09
    2762:	ba 85       	ldd	r27, Y+10	; 0x0a
    2764:	98 96       	adiw	r26, 0x28	; 40
    2766:	2d 91       	ld	r18, X+
    2768:	3d 91       	ld	r19, X+
    276a:	4d 91       	ld	r20, X+
    276c:	5c 91       	ld	r21, X
    276e:	9b 97       	sbiw	r26, 0x2b	; 43
    2770:	c5 01       	movw	r24, r10
    2772:	b4 01       	movw	r22, r8
    2774:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__subsf3>
    2778:	e9 85       	ldd	r30, Y+9	; 0x09
    277a:	fa 85       	ldd	r31, Y+10	; 0x0a
    277c:	24 89       	ldd	r18, Z+20	; 0x14
    277e:	35 89       	ldd	r19, Z+21	; 0x15
    2780:	46 89       	ldd	r20, Z+22	; 0x16
    2782:	57 89       	ldd	r21, Z+23	; 0x17
    2784:	0e 94 41 0a 	call	0x1482	; 0x1482 <__mulsf3>
    2788:	9b 01       	movw	r18, r22
    278a:	ac 01       	movw	r20, r24
    278c:	c7 01       	movw	r24, r14
    278e:	b6 01       	movw	r22, r12
    2790:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__subsf3>
    2794:	6b 01       	movw	r12, r22
    2796:	7c 01       	movw	r14, r24
      
	  if(output > outMax) output = outMax;
    2798:	9b 01       	movw	r18, r22
    279a:	ac 01       	movw	r20, r24
    279c:	61 2f       	mov	r22, r17
    279e:	70 2f       	mov	r23, r16
    27a0:	83 2d       	mov	r24, r3
    27a2:	92 2d       	mov	r25, r2
    27a4:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__cmpsf2>
    27a8:	87 fd       	sbrc	r24, 7
    27aa:	1b c0       	rjmp	.+54     	; 0x27e2 <_ZN3PID7ComputeEv+0x1da>
      else if(output < outMin) output = outMin;
    27ac:	a9 85       	ldd	r26, Y+9	; 0x09
    27ae:	ba 85       	ldd	r27, Y+10	; 0x0a
    27b0:	9e 96       	adiw	r26, 0x2e	; 46
    27b2:	1c 91       	ld	r17, X
    27b4:	9e 97       	sbiw	r26, 0x2e	; 46
    27b6:	9f 96       	adiw	r26, 0x2f	; 47
    27b8:	0c 91       	ld	r16, X
    27ba:	9f 97       	sbiw	r26, 0x2f	; 47
    27bc:	d0 96       	adiw	r26, 0x30	; 48
    27be:	3c 90       	ld	r3, X
    27c0:	d0 97       	sbiw	r26, 0x30	; 48
    27c2:	d1 96       	adiw	r26, 0x31	; 49
    27c4:	2c 90       	ld	r2, X
    27c6:	21 2f       	mov	r18, r17
    27c8:	30 2f       	mov	r19, r16
    27ca:	43 2d       	mov	r20, r3
    27cc:	52 2d       	mov	r21, r2
    27ce:	b6 01       	movw	r22, r12
    27d0:	c7 01       	movw	r24, r14
    27d2:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__cmpsf2>
    27d6:	87 fd       	sbrc	r24, 7
    27d8:	04 c0       	rjmp	.+8      	; 0x27e2 <_ZN3PID7ComputeEv+0x1da>
      if(ITerm > outMax) ITerm= outMax;
      else if(ITerm < outMin) ITerm= outMin;
      double dInput = (input - lastInput);
 
      /*Compute PID Output*/
      double output = kp * error + ITerm- kd * dInput;
    27da:	1c 2d       	mov	r17, r12
    27dc:	0d 2d       	mov	r16, r13
    27de:	3e 2c       	mov	r3, r14
    27e0:	2f 2c       	mov	r2, r15
      
	  if(output > outMax) output = outMax;
      else if(output < outMin) output = outMin;
	  *myOutput = output;
    27e2:	a9 85       	ldd	r26, Y+9	; 0x09
    27e4:	ba 85       	ldd	r27, Y+10	; 0x0a
    27e6:	5c 96       	adiw	r26, 0x1c	; 28
    27e8:	ed 91       	ld	r30, X+
    27ea:	fc 91       	ld	r31, X
    27ec:	5d 97       	sbiw	r26, 0x1d	; 29
    27ee:	81 2f       	mov	r24, r17
    27f0:	90 2f       	mov	r25, r16
    27f2:	a3 2d       	mov	r26, r3
    27f4:	b2 2d       	mov	r27, r2
    27f6:	80 83       	st	Z, r24
    27f8:	91 83       	std	Z+1, r25	; 0x01
    27fa:	a2 83       	std	Z+2, r26	; 0x02
    27fc:	b3 83       	std	Z+3, r27	; 0x03
	  
      /*Remember some variables for next time*/
      lastInput = input;
    27fe:	e9 85       	ldd	r30, Y+9	; 0x09
    2800:	fa 85       	ldd	r31, Y+10	; 0x0a
    2802:	80 a6       	std	Z+40, r8	; 0x28
    2804:	91 a6       	std	Z+41, r9	; 0x29
    2806:	a2 a6       	std	Z+42, r10	; 0x2a
    2808:	b3 a6       	std	Z+43, r11	; 0x2b
      lastTime = now;
    280a:	89 81       	ldd	r24, Y+1	; 0x01
    280c:	9a 81       	ldd	r25, Y+2	; 0x02
    280e:	ab 81       	ldd	r26, Y+3	; 0x03
    2810:	bc 81       	ldd	r27, Y+4	; 0x04
    2812:	80 a3       	std	Z+32, r24	; 0x20
    2814:	91 a3       	std	Z+33, r25	; 0x21
    2816:	a2 a3       	std	Z+34, r26	; 0x22
    2818:	b3 a3       	std	Z+35, r27	; 0x23
   }
}
    281a:	2a 96       	adiw	r28, 0x0a	; 10
    281c:	0f b6       	in	r0, 0x3f	; 63
    281e:	f8 94       	cli
    2820:	de bf       	out	0x3e, r29	; 62
    2822:	0f be       	out	0x3f, r0	; 63
    2824:	cd bf       	out	0x3d, r28	; 61
    2826:	df 91       	pop	r29
    2828:	cf 91       	pop	r28
    282a:	1f 91       	pop	r17
    282c:	0f 91       	pop	r16
    282e:	ff 90       	pop	r15
    2830:	ef 90       	pop	r14
    2832:	df 90       	pop	r13
    2834:	cf 90       	pop	r12
    2836:	bf 90       	pop	r11
    2838:	af 90       	pop	r10
    283a:	9f 90       	pop	r9
    283c:	8f 90       	pop	r8
    283e:	7f 90       	pop	r7
    2840:	6f 90       	pop	r6
    2842:	5f 90       	pop	r5
    2844:	4f 90       	pop	r4
    2846:	3f 90       	pop	r3
    2848:	2f 90       	pop	r2
    284a:	08 95       	ret

0000284c <_ZN3PID10SetTuningsEddd>:
 * This function allows the controller's dynamic performance to be adjusted. 
 * it's called automatically from the constructor, but tunings can also
 * be adjusted on the fly during normal operation
 ******************************************************************************/ 
void PID::SetTunings(double Kp, double Ki, double Kd)
{
    284c:	4f 92       	push	r4
    284e:	5f 92       	push	r5
    2850:	6f 92       	push	r6
    2852:	7f 92       	push	r7
    2854:	8f 92       	push	r8
    2856:	9f 92       	push	r9
    2858:	af 92       	push	r10
    285a:	bf 92       	push	r11
    285c:	cf 92       	push	r12
    285e:	df 92       	push	r13
    2860:	ef 92       	push	r14
    2862:	ff 92       	push	r15
    2864:	0f 93       	push	r16
    2866:	1f 93       	push	r17
    2868:	cf 93       	push	r28
    286a:	df 93       	push	r29
    286c:	00 d0       	rcall	.+0      	; 0x286e <_ZN3PID10SetTuningsEddd+0x22>
    286e:	00 d0       	rcall	.+0      	; 0x2870 <_ZN3PID10SetTuningsEddd+0x24>
    2870:	00 d0       	rcall	.+0      	; 0x2872 <_ZN3PID10SetTuningsEddd+0x26>
    2872:	cd b7       	in	r28, 0x3d	; 61
    2874:	de b7       	in	r29, 0x3e	; 62
    2876:	9e 83       	std	Y+6, r25	; 0x06
    2878:	8d 83       	std	Y+5, r24	; 0x05
    287a:	2a 01       	movw	r4, r20
    287c:	3b 01       	movw	r6, r22
    287e:	48 01       	movw	r8, r16
    2880:	59 01       	movw	r10, r18
   if (Kp<0 || Ki<0 || Kd<0) return;
    2882:	20 e0       	ldi	r18, 0x00	; 0
    2884:	30 e0       	ldi	r19, 0x00	; 0
    2886:	a9 01       	movw	r20, r18
    2888:	c3 01       	movw	r24, r6
    288a:	b2 01       	movw	r22, r4
    288c:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__cmpsf2>
    2890:	87 fd       	sbrc	r24, 7
    2892:	81 c0       	rjmp	.+258    	; 0x2996 <_ZN3PID10SetTuningsEddd+0x14a>
    2894:	20 e0       	ldi	r18, 0x00	; 0
    2896:	30 e0       	ldi	r19, 0x00	; 0
    2898:	a9 01       	movw	r20, r18
    289a:	c5 01       	movw	r24, r10
    289c:	b4 01       	movw	r22, r8
    289e:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__cmpsf2>
    28a2:	87 fd       	sbrc	r24, 7
    28a4:	78 c0       	rjmp	.+240    	; 0x2996 <_ZN3PID10SetTuningsEddd+0x14a>
    28a6:	20 e0       	ldi	r18, 0x00	; 0
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	a9 01       	movw	r20, r18
    28ac:	c7 01       	movw	r24, r14
    28ae:	b6 01       	movw	r22, r12
    28b0:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__cmpsf2>
    28b4:	87 fd       	sbrc	r24, 7
    28b6:	6f c0       	rjmp	.+222    	; 0x2996 <_ZN3PID10SetTuningsEddd+0x14a>
 
   dispKp = Kp; dispKi = Ki; dispKd = Kd;
    28b8:	ed 81       	ldd	r30, Y+5	; 0x05
    28ba:	fe 81       	ldd	r31, Y+6	; 0x06
    28bc:	40 82       	st	Z, r4
    28be:	51 82       	std	Z+1, r5	; 0x01
    28c0:	62 82       	std	Z+2, r6	; 0x02
    28c2:	73 82       	std	Z+3, r7	; 0x03
    28c4:	84 82       	std	Z+4, r8	; 0x04
    28c6:	95 82       	std	Z+5, r9	; 0x05
    28c8:	a6 82       	std	Z+6, r10	; 0x06
    28ca:	b7 82       	std	Z+7, r11	; 0x07
    28cc:	c0 86       	std	Z+8, r12	; 0x08
    28ce:	d1 86       	std	Z+9, r13	; 0x09
    28d0:	e2 86       	std	Z+10, r14	; 0x0a
    28d2:	f3 86       	std	Z+11, r15	; 0x0b
   
   double SampleTimeInSec = ((double)SampleTime)/1000;  
    28d4:	64 a5       	ldd	r22, Z+44	; 0x2c
    28d6:	75 a5       	ldd	r23, Z+45	; 0x2d
    28d8:	07 2e       	mov	r0, r23
    28da:	00 0c       	add	r0, r0
    28dc:	88 0b       	sbc	r24, r24
    28de:	99 0b       	sbc	r25, r25
    28e0:	0e 94 8c 09 	call	0x1318	; 0x1318 <__floatsisf>
    28e4:	20 e0       	ldi	r18, 0x00	; 0
    28e6:	30 e0       	ldi	r19, 0x00	; 0
    28e8:	4a e7       	ldi	r20, 0x7A	; 122
    28ea:	54 e4       	ldi	r21, 0x44	; 68
    28ec:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__divsf3>
    28f0:	69 83       	std	Y+1, r22	; 0x01
    28f2:	7a 83       	std	Y+2, r23	; 0x02
    28f4:	8b 83       	std	Y+3, r24	; 0x03
    28f6:	9c 83       	std	Y+4, r25	; 0x04
   kp = Kp;
    28f8:	ed 81       	ldd	r30, Y+5	; 0x05
    28fa:	fe 81       	ldd	r31, Y+6	; 0x06
    28fc:	44 86       	std	Z+12, r4	; 0x0c
    28fe:	55 86       	std	Z+13, r5	; 0x0d
    2900:	66 86       	std	Z+14, r6	; 0x0e
    2902:	77 86       	std	Z+15, r7	; 0x0f
   ki = Ki * SampleTimeInSec;
    2904:	9b 01       	movw	r18, r22
    2906:	ac 01       	movw	r20, r24
    2908:	c5 01       	movw	r24, r10
    290a:	b4 01       	movw	r22, r8
    290c:	0e 94 41 0a 	call	0x1482	; 0x1482 <__mulsf3>
    2910:	4b 01       	movw	r8, r22
    2912:	5c 01       	movw	r10, r24
    2914:	ed 81       	ldd	r30, Y+5	; 0x05
    2916:	fe 81       	ldd	r31, Y+6	; 0x06
    2918:	60 8b       	std	Z+16, r22	; 0x10
    291a:	71 8b       	std	Z+17, r23	; 0x11
    291c:	82 8b       	std	Z+18, r24	; 0x12
    291e:	93 8b       	std	Z+19, r25	; 0x13
   kd = Kd / SampleTimeInSec;
    2920:	29 81       	ldd	r18, Y+1	; 0x01
    2922:	3a 81       	ldd	r19, Y+2	; 0x02
    2924:	4b 81       	ldd	r20, Y+3	; 0x03
    2926:	5c 81       	ldd	r21, Y+4	; 0x04
    2928:	c7 01       	movw	r24, r14
    292a:	b6 01       	movw	r22, r12
    292c:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__divsf3>
    2930:	6b 01       	movw	r12, r22
    2932:	7c 01       	movw	r14, r24
    2934:	ed 81       	ldd	r30, Y+5	; 0x05
    2936:	fe 81       	ldd	r31, Y+6	; 0x06
    2938:	64 8b       	std	Z+20, r22	; 0x14
    293a:	75 8b       	std	Z+21, r23	; 0x15
    293c:	86 8b       	std	Z+22, r24	; 0x16
    293e:	97 8b       	std	Z+23, r25	; 0x17
 
  if(controllerDirection ==REVERSE)
    2940:	80 8d       	ldd	r24, Z+24	; 0x18
    2942:	91 8d       	ldd	r25, Z+25	; 0x19
    2944:	01 97       	sbiw	r24, 0x01	; 1
    2946:	39 f5       	brne	.+78     	; 0x2996 <_ZN3PID10SetTuningsEddd+0x14a>
   {
      kp = (0 - kp);
    2948:	a3 01       	movw	r20, r6
    294a:	92 01       	movw	r18, r4
    294c:	60 e0       	ldi	r22, 0x00	; 0
    294e:	70 e0       	ldi	r23, 0x00	; 0
    2950:	cb 01       	movw	r24, r22
    2952:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__subsf3>
    2956:	ed 81       	ldd	r30, Y+5	; 0x05
    2958:	fe 81       	ldd	r31, Y+6	; 0x06
    295a:	64 87       	std	Z+12, r22	; 0x0c
    295c:	75 87       	std	Z+13, r23	; 0x0d
    295e:	86 87       	std	Z+14, r24	; 0x0e
    2960:	97 87       	std	Z+15, r25	; 0x0f
      ki = (0 - ki);
    2962:	a5 01       	movw	r20, r10
    2964:	94 01       	movw	r18, r8
    2966:	60 e0       	ldi	r22, 0x00	; 0
    2968:	70 e0       	ldi	r23, 0x00	; 0
    296a:	cb 01       	movw	r24, r22
    296c:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__subsf3>
    2970:	ed 81       	ldd	r30, Y+5	; 0x05
    2972:	fe 81       	ldd	r31, Y+6	; 0x06
    2974:	60 8b       	std	Z+16, r22	; 0x10
    2976:	71 8b       	std	Z+17, r23	; 0x11
    2978:	82 8b       	std	Z+18, r24	; 0x12
    297a:	93 8b       	std	Z+19, r25	; 0x13
      kd = (0 - kd);
    297c:	a7 01       	movw	r20, r14
    297e:	96 01       	movw	r18, r12
    2980:	60 e0       	ldi	r22, 0x00	; 0
    2982:	70 e0       	ldi	r23, 0x00	; 0
    2984:	cb 01       	movw	r24, r22
    2986:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__subsf3>
    298a:	ed 81       	ldd	r30, Y+5	; 0x05
    298c:	fe 81       	ldd	r31, Y+6	; 0x06
    298e:	64 8b       	std	Z+20, r22	; 0x14
    2990:	75 8b       	std	Z+21, r23	; 0x15
    2992:	86 8b       	std	Z+22, r24	; 0x16
    2994:	97 8b       	std	Z+23, r25	; 0x17
   }
}
    2996:	26 96       	adiw	r28, 0x06	; 6
    2998:	0f b6       	in	r0, 0x3f	; 63
    299a:	f8 94       	cli
    299c:	de bf       	out	0x3e, r29	; 62
    299e:	0f be       	out	0x3f, r0	; 63
    29a0:	cd bf       	out	0x3d, r28	; 61
    29a2:	df 91       	pop	r29
    29a4:	cf 91       	pop	r28
    29a6:	1f 91       	pop	r17
    29a8:	0f 91       	pop	r16
    29aa:	ff 90       	pop	r15
    29ac:	ef 90       	pop	r14
    29ae:	df 90       	pop	r13
    29b0:	cf 90       	pop	r12
    29b2:	bf 90       	pop	r11
    29b4:	af 90       	pop	r10
    29b6:	9f 90       	pop	r9
    29b8:	8f 90       	pop	r8
    29ba:	7f 90       	pop	r7
    29bc:	6f 90       	pop	r6
    29be:	5f 90       	pop	r5
    29c0:	4f 90       	pop	r4
    29c2:	08 95       	ret

000029c4 <_ZN3PID13SetSampleTimeEi>:
  
/* SetSampleTime(...) *********************************************************
 * sets the period, in Milliseconds, at which the calculation is performed	
 ******************************************************************************/
void PID::SetSampleTime(int NewSampleTime)
{
    29c4:	cf 92       	push	r12
    29c6:	df 92       	push	r13
    29c8:	ef 92       	push	r14
    29ca:	ff 92       	push	r15
    29cc:	0f 93       	push	r16
    29ce:	1f 93       	push	r17
    29d0:	cf 93       	push	r28
    29d2:	df 93       	push	r29
   if (NewSampleTime > 0)
    29d4:	16 16       	cp	r1, r22
    29d6:	17 06       	cpc	r1, r23
    29d8:	a4 f5       	brge	.+104    	; 0x2a42 <_ZN3PID13SetSampleTimeEi+0x7e>
    29da:	8b 01       	movw	r16, r22
    29dc:	ec 01       	movw	r28, r24
   {
      double ratio  = (double)NewSampleTime
                      / (double)SampleTime;
    29de:	07 2e       	mov	r0, r23
    29e0:	00 0c       	add	r0, r0
    29e2:	88 0b       	sbc	r24, r24
    29e4:	99 0b       	sbc	r25, r25
    29e6:	0e 94 8c 09 	call	0x1318	; 0x1318 <__floatsisf>
    29ea:	6b 01       	movw	r12, r22
    29ec:	7c 01       	movw	r14, r24
    29ee:	6c a5       	ldd	r22, Y+44	; 0x2c
    29f0:	7d a5       	ldd	r23, Y+45	; 0x2d
    29f2:	07 2e       	mov	r0, r23
    29f4:	00 0c       	add	r0, r0
    29f6:	88 0b       	sbc	r24, r24
    29f8:	99 0b       	sbc	r25, r25
    29fa:	0e 94 8c 09 	call	0x1318	; 0x1318 <__floatsisf>
    29fe:	9b 01       	movw	r18, r22
    2a00:	ac 01       	movw	r20, r24
    2a02:	c7 01       	movw	r24, r14
    2a04:	b6 01       	movw	r22, r12
    2a06:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__divsf3>
    2a0a:	6b 01       	movw	r12, r22
    2a0c:	7c 01       	movw	r14, r24
      ki *= ratio;
    2a0e:	9b 01       	movw	r18, r22
    2a10:	ac 01       	movw	r20, r24
    2a12:	68 89       	ldd	r22, Y+16	; 0x10
    2a14:	79 89       	ldd	r23, Y+17	; 0x11
    2a16:	8a 89       	ldd	r24, Y+18	; 0x12
    2a18:	9b 89       	ldd	r25, Y+19	; 0x13
    2a1a:	0e 94 41 0a 	call	0x1482	; 0x1482 <__mulsf3>
    2a1e:	68 8b       	std	Y+16, r22	; 0x10
    2a20:	79 8b       	std	Y+17, r23	; 0x11
    2a22:	8a 8b       	std	Y+18, r24	; 0x12
    2a24:	9b 8b       	std	Y+19, r25	; 0x13
      kd /= ratio;
    2a26:	a7 01       	movw	r20, r14
    2a28:	96 01       	movw	r18, r12
    2a2a:	6c 89       	ldd	r22, Y+20	; 0x14
    2a2c:	7d 89       	ldd	r23, Y+21	; 0x15
    2a2e:	8e 89       	ldd	r24, Y+22	; 0x16
    2a30:	9f 89       	ldd	r25, Y+23	; 0x17
    2a32:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <__divsf3>
    2a36:	6c 8b       	std	Y+20, r22	; 0x14
    2a38:	7d 8b       	std	Y+21, r23	; 0x15
    2a3a:	8e 8b       	std	Y+22, r24	; 0x16
    2a3c:	9f 8b       	std	Y+23, r25	; 0x17
      SampleTime = (unsigned long)NewSampleTime;
    2a3e:	1d a7       	std	Y+45, r17	; 0x2d
    2a40:	0c a7       	std	Y+44, r16	; 0x2c
   }
}
    2a42:	df 91       	pop	r29
    2a44:	cf 91       	pop	r28
    2a46:	1f 91       	pop	r17
    2a48:	0f 91       	pop	r16
    2a4a:	ff 90       	pop	r15
    2a4c:	ef 90       	pop	r14
    2a4e:	df 90       	pop	r13
    2a50:	cf 90       	pop	r12
    2a52:	08 95       	ret

00002a54 <_ZN3PID15SetOutputLimitsEdd>:
 *  be doing a time window and will need 0-8000 or something.  or maybe they'll
 *  want to clamp it from 0-125.  who knows.  at any rate, that can all be done
 *  here.
 **************************************************************************/
void PID::SetOutputLimits(double Min, double Max)
{
    2a54:	2f 92       	push	r2
    2a56:	3f 92       	push	r3
    2a58:	4f 92       	push	r4
    2a5a:	5f 92       	push	r5
    2a5c:	6f 92       	push	r6
    2a5e:	7f 92       	push	r7
    2a60:	8f 92       	push	r8
    2a62:	9f 92       	push	r9
    2a64:	af 92       	push	r10
    2a66:	bf 92       	push	r11
    2a68:	cf 92       	push	r12
    2a6a:	df 92       	push	r13
    2a6c:	ef 92       	push	r14
    2a6e:	ff 92       	push	r15
    2a70:	0f 93       	push	r16
    2a72:	1f 93       	push	r17
    2a74:	cf 93       	push	r28
    2a76:	df 93       	push	r29
    2a78:	ec 01       	movw	r28, r24
    2a7a:	6a 01       	movw	r12, r20
    2a7c:	7b 01       	movw	r14, r22
    2a7e:	48 01       	movw	r8, r16
    2a80:	59 01       	movw	r10, r18
   if(Min >= Max) return;
    2a82:	a9 01       	movw	r20, r18
    2a84:	98 01       	movw	r18, r16
    2a86:	c7 01       	movw	r24, r14
    2a88:	b6 01       	movw	r22, r12
    2a8a:	0e 94 3c 0a 	call	0x1478	; 0x1478 <__gesf2>
    2a8e:	87 ff       	sbrs	r24, 7
    2a90:	4e c0       	rjmp	.+156    	; 0x2b2e <_ZN3PID15SetOutputLimitsEdd+0xda>
   outMin = Min;
    2a92:	ce a6       	std	Y+46, r12	; 0x2e
    2a94:	df a6       	std	Y+47, r13	; 0x2f
    2a96:	e8 aa       	std	Y+48, r14	; 0x30
    2a98:	f9 aa       	std	Y+49, r15	; 0x31
   outMax = Max;
    2a9a:	8a aa       	std	Y+50, r8	; 0x32
    2a9c:	9b aa       	std	Y+51, r9	; 0x33
    2a9e:	ac aa       	std	Y+52, r10	; 0x34
    2aa0:	bd aa       	std	Y+53, r11	; 0x35
 
   if(inAuto)
    2aa2:	8e a9       	ldd	r24, Y+54	; 0x36
    2aa4:	88 23       	and	r24, r24
    2aa6:	09 f4       	brne	.+2      	; 0x2aaa <_ZN3PID15SetOutputLimitsEdd+0x56>
    2aa8:	42 c0       	rjmp	.+132    	; 0x2b2e <_ZN3PID15SetOutputLimitsEdd+0xda>
   {
	   if(*myOutput > outMax) *myOutput = outMax;
    2aaa:	2c 8c       	ldd	r2, Y+28	; 0x1c
    2aac:	3d 8c       	ldd	r3, Y+29	; 0x1d
    2aae:	f1 01       	movw	r30, r2
    2ab0:	40 80       	ld	r4, Z
    2ab2:	51 80       	ldd	r5, Z+1	; 0x01
    2ab4:	62 80       	ldd	r6, Z+2	; 0x02
    2ab6:	73 80       	ldd	r7, Z+3	; 0x03
    2ab8:	a3 01       	movw	r20, r6
    2aba:	92 01       	movw	r18, r4
    2abc:	c5 01       	movw	r24, r10
    2abe:	b4 01       	movw	r22, r8
    2ac0:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__cmpsf2>
    2ac4:	87 ff       	sbrs	r24, 7
    2ac6:	06 c0       	rjmp	.+12     	; 0x2ad4 <_ZN3PID15SetOutputLimitsEdd+0x80>
    2ac8:	f1 01       	movw	r30, r2
    2aca:	80 82       	st	Z, r8
    2acc:	91 82       	std	Z+1, r9	; 0x01
    2ace:	a2 82       	std	Z+2, r10	; 0x02
    2ad0:	b3 82       	std	Z+3, r11	; 0x03
    2ad2:	0d c0       	rjmp	.+26     	; 0x2aee <_ZN3PID15SetOutputLimitsEdd+0x9a>
	   else if(*myOutput < outMin) *myOutput = outMin;
    2ad4:	a3 01       	movw	r20, r6
    2ad6:	92 01       	movw	r18, r4
    2ad8:	c7 01       	movw	r24, r14
    2ada:	b6 01       	movw	r22, r12
    2adc:	0e 94 3c 0a 	call	0x1478	; 0x1478 <__gesf2>
    2ae0:	18 16       	cp	r1, r24
    2ae2:	2c f4       	brge	.+10     	; 0x2aee <_ZN3PID15SetOutputLimitsEdd+0x9a>
    2ae4:	f1 01       	movw	r30, r2
    2ae6:	c0 82       	st	Z, r12
    2ae8:	d1 82       	std	Z+1, r13	; 0x01
    2aea:	e2 82       	std	Z+2, r14	; 0x02
    2aec:	f3 82       	std	Z+3, r15	; 0x03
	 
	   if(ITerm > outMax) ITerm= outMax;
    2aee:	8c a0       	ldd	r8, Y+36	; 0x24
    2af0:	9d a0       	ldd	r9, Y+37	; 0x25
    2af2:	ae a0       	ldd	r10, Y+38	; 0x26
    2af4:	bf a0       	ldd	r11, Y+39	; 0x27
    2af6:	ca a8       	ldd	r12, Y+50	; 0x32
    2af8:	db a8       	ldd	r13, Y+51	; 0x33
    2afa:	ec a8       	ldd	r14, Y+52	; 0x34
    2afc:	fd a8       	ldd	r15, Y+53	; 0x35
    2afe:	a7 01       	movw	r20, r14
    2b00:	96 01       	movw	r18, r12
    2b02:	c5 01       	movw	r24, r10
    2b04:	b4 01       	movw	r22, r8
    2b06:	0e 94 3c 0a 	call	0x1478	; 0x1478 <__gesf2>
    2b0a:	18 16       	cp	r1, r24
    2b0c:	64 f0       	brlt	.+24     	; 0x2b26 <_ZN3PID15SetOutputLimitsEdd+0xd2>
	   else if(ITerm < outMin) ITerm= outMin;
    2b0e:	ce a4       	ldd	r12, Y+46	; 0x2e
    2b10:	df a4       	ldd	r13, Y+47	; 0x2f
    2b12:	e8 a8       	ldd	r14, Y+48	; 0x30
    2b14:	f9 a8       	ldd	r15, Y+49	; 0x31
    2b16:	a7 01       	movw	r20, r14
    2b18:	96 01       	movw	r18, r12
    2b1a:	c5 01       	movw	r24, r10
    2b1c:	b4 01       	movw	r22, r8
    2b1e:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__cmpsf2>
    2b22:	87 ff       	sbrs	r24, 7
    2b24:	04 c0       	rjmp	.+8      	; 0x2b2e <_ZN3PID15SetOutputLimitsEdd+0xda>
    2b26:	cc a2       	std	Y+36, r12	; 0x24
    2b28:	dd a2       	std	Y+37, r13	; 0x25
    2b2a:	ee a2       	std	Y+38, r14	; 0x26
    2b2c:	ff a2       	std	Y+39, r15	; 0x27
   }
}
    2b2e:	df 91       	pop	r29
    2b30:	cf 91       	pop	r28
    2b32:	1f 91       	pop	r17
    2b34:	0f 91       	pop	r16
    2b36:	ff 90       	pop	r15
    2b38:	ef 90       	pop	r14
    2b3a:	df 90       	pop	r13
    2b3c:	cf 90       	pop	r12
    2b3e:	bf 90       	pop	r11
    2b40:	af 90       	pop	r10
    2b42:	9f 90       	pop	r9
    2b44:	8f 90       	pop	r8
    2b46:	7f 90       	pop	r7
    2b48:	6f 90       	pop	r6
    2b4a:	5f 90       	pop	r5
    2b4c:	4f 90       	pop	r4
    2b4e:	3f 90       	pop	r3
    2b50:	2f 90       	pop	r2
    2b52:	08 95       	ret

00002b54 <_ZN3PID10InitializeEv>:
/* Initialize()****************************************************************
 *	does all the things that need to happen to ensure a bumpless transfer
 *  from manual to automatic mode.
 ******************************************************************************/ 
void PID::Initialize()
{
    2b54:	8f 92       	push	r8
    2b56:	9f 92       	push	r9
    2b58:	af 92       	push	r10
    2b5a:	bf 92       	push	r11
    2b5c:	cf 92       	push	r12
    2b5e:	df 92       	push	r13
    2b60:	ef 92       	push	r14
    2b62:	ff 92       	push	r15
    2b64:	cf 93       	push	r28
    2b66:	df 93       	push	r29
    2b68:	ec 01       	movw	r28, r24
   ITerm = *myOutput;
    2b6a:	ec 8d       	ldd	r30, Y+28	; 0x1c
    2b6c:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2b6e:	c0 80       	ld	r12, Z
    2b70:	d1 80       	ldd	r13, Z+1	; 0x01
    2b72:	e2 80       	ldd	r14, Z+2	; 0x02
    2b74:	f3 80       	ldd	r15, Z+3	; 0x03
    2b76:	cc a2       	std	Y+36, r12	; 0x24
    2b78:	dd a2       	std	Y+37, r13	; 0x25
    2b7a:	ee a2       	std	Y+38, r14	; 0x26
    2b7c:	ff a2       	std	Y+39, r15	; 0x27
   lastInput = *myInput;
    2b7e:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2b80:	fb 8d       	ldd	r31, Y+27	; 0x1b
    2b82:	80 81       	ld	r24, Z
    2b84:	91 81       	ldd	r25, Z+1	; 0x01
    2b86:	a2 81       	ldd	r26, Z+2	; 0x02
    2b88:	b3 81       	ldd	r27, Z+3	; 0x03
    2b8a:	88 a7       	std	Y+40, r24	; 0x28
    2b8c:	99 a7       	std	Y+41, r25	; 0x29
    2b8e:	aa a7       	std	Y+42, r26	; 0x2a
    2b90:	bb a7       	std	Y+43, r27	; 0x2b
   if(ITerm > outMax) ITerm = outMax;
    2b92:	8a a8       	ldd	r8, Y+50	; 0x32
    2b94:	9b a8       	ldd	r9, Y+51	; 0x33
    2b96:	ac a8       	ldd	r10, Y+52	; 0x34
    2b98:	bd a8       	ldd	r11, Y+53	; 0x35
    2b9a:	a5 01       	movw	r20, r10
    2b9c:	94 01       	movw	r18, r8
    2b9e:	c7 01       	movw	r24, r14
    2ba0:	b6 01       	movw	r22, r12
    2ba2:	0e 94 3c 0a 	call	0x1478	; 0x1478 <__gesf2>
    2ba6:	18 16       	cp	r1, r24
    2ba8:	64 f0       	brlt	.+24     	; 0x2bc2 <_ZN3PID10InitializeEv+0x6e>
   else if(ITerm < outMin) ITerm = outMin;
    2baa:	8e a4       	ldd	r8, Y+46	; 0x2e
    2bac:	9f a4       	ldd	r9, Y+47	; 0x2f
    2bae:	a8 a8       	ldd	r10, Y+48	; 0x30
    2bb0:	b9 a8       	ldd	r11, Y+49	; 0x31
    2bb2:	a5 01       	movw	r20, r10
    2bb4:	94 01       	movw	r18, r8
    2bb6:	c7 01       	movw	r24, r14
    2bb8:	b6 01       	movw	r22, r12
    2bba:	0e 94 dd 08 	call	0x11ba	; 0x11ba <__cmpsf2>
    2bbe:	87 ff       	sbrs	r24, 7
    2bc0:	04 c0       	rjmp	.+8      	; 0x2bca <_ZN3PID10InitializeEv+0x76>
    2bc2:	8c a2       	std	Y+36, r8	; 0x24
    2bc4:	9d a2       	std	Y+37, r9	; 0x25
    2bc6:	ae a2       	std	Y+38, r10	; 0x26
    2bc8:	bf a2       	std	Y+39, r11	; 0x27
}
    2bca:	df 91       	pop	r29
    2bcc:	cf 91       	pop	r28
    2bce:	ff 90       	pop	r15
    2bd0:	ef 90       	pop	r14
    2bd2:	df 90       	pop	r13
    2bd4:	cf 90       	pop	r12
    2bd6:	bf 90       	pop	r11
    2bd8:	af 90       	pop	r10
    2bda:	9f 90       	pop	r9
    2bdc:	8f 90       	pop	r8
    2bde:	08 95       	ret

00002be0 <_ZN3PID7SetModeEi>:
 * Allows the controller Mode to be set to manual (0) or Automatic (non-zero)
 * when the transition from manual to auto occurs, the controller is
 * automatically initialized
 ******************************************************************************/ 
void PID::SetMode(int Mode)
{
    2be0:	1f 93       	push	r17
    2be2:	cf 93       	push	r28
    2be4:	df 93       	push	r29
    2be6:	ec 01       	movw	r28, r24
    bool newAuto = (Mode == AUTOMATIC);
    2be8:	11 e0       	ldi	r17, 0x01	; 1
    2bea:	61 30       	cpi	r22, 0x01	; 1
    2bec:	71 05       	cpc	r23, r1
    2bee:	09 f0       	breq	.+2      	; 0x2bf2 <_ZN3PID7SetModeEi+0x12>
    2bf0:	10 e0       	ldi	r17, 0x00	; 0
    if(newAuto == !inAuto)
    2bf2:	9e a9       	ldd	r25, Y+54	; 0x36
    2bf4:	81 e0       	ldi	r24, 0x01	; 1
    2bf6:	89 27       	eor	r24, r25
    2bf8:	18 13       	cpse	r17, r24
    2bfa:	03 c0       	rjmp	.+6      	; 0x2c02 <_ZN3PID7SetModeEi+0x22>
    {  /*we just went from manual to auto*/
        PID::Initialize();
    2bfc:	ce 01       	movw	r24, r28
    2bfe:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <_ZN3PID10InitializeEv>
    }
    inAuto = newAuto;
    2c02:	1e ab       	std	Y+54, r17	; 0x36
}
    2c04:	df 91       	pop	r29
    2c06:	cf 91       	pop	r28
    2c08:	1f 91       	pop	r17
    2c0a:	08 95       	ret

00002c0c <_ZN3PID22SetControllerDirectionEi>:
 * to +Input) or a REVERSE acting process(+Output leads to -Input.)  we need to
 * know which one, because otherwise we may increase the output when we should
 * be decreasing.  This is called from the constructor.
 ******************************************************************************/
void PID::SetControllerDirection(int Direction)
{
    2c0c:	0f 93       	push	r16
    2c0e:	1f 93       	push	r17
    2c10:	cf 93       	push	r28
    2c12:	df 93       	push	r29
    2c14:	ec 01       	movw	r28, r24
    2c16:	8b 01       	movw	r16, r22
   if(inAuto && Direction !=controllerDirection)
    2c18:	8e a9       	ldd	r24, Y+54	; 0x36
    2c1a:	88 23       	and	r24, r24
    2c1c:	61 f1       	breq	.+88     	; 0x2c76 <_ZN3PID22SetControllerDirectionEi+0x6a>
    2c1e:	88 8d       	ldd	r24, Y+24	; 0x18
    2c20:	99 8d       	ldd	r25, Y+25	; 0x19
    2c22:	86 17       	cp	r24, r22
    2c24:	97 07       	cpc	r25, r23
    2c26:	39 f1       	breq	.+78     	; 0x2c76 <_ZN3PID22SetControllerDirectionEi+0x6a>
   {
	  kp = (0 - kp);
    2c28:	2c 85       	ldd	r18, Y+12	; 0x0c
    2c2a:	3d 85       	ldd	r19, Y+13	; 0x0d
    2c2c:	4e 85       	ldd	r20, Y+14	; 0x0e
    2c2e:	5f 85       	ldd	r21, Y+15	; 0x0f
    2c30:	60 e0       	ldi	r22, 0x00	; 0
    2c32:	70 e0       	ldi	r23, 0x00	; 0
    2c34:	cb 01       	movw	r24, r22
    2c36:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__subsf3>
    2c3a:	6c 87       	std	Y+12, r22	; 0x0c
    2c3c:	7d 87       	std	Y+13, r23	; 0x0d
    2c3e:	8e 87       	std	Y+14, r24	; 0x0e
    2c40:	9f 87       	std	Y+15, r25	; 0x0f
      ki = (0 - ki);
    2c42:	28 89       	ldd	r18, Y+16	; 0x10
    2c44:	39 89       	ldd	r19, Y+17	; 0x11
    2c46:	4a 89       	ldd	r20, Y+18	; 0x12
    2c48:	5b 89       	ldd	r21, Y+19	; 0x13
    2c4a:	60 e0       	ldi	r22, 0x00	; 0
    2c4c:	70 e0       	ldi	r23, 0x00	; 0
    2c4e:	cb 01       	movw	r24, r22
    2c50:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__subsf3>
    2c54:	68 8b       	std	Y+16, r22	; 0x10
    2c56:	79 8b       	std	Y+17, r23	; 0x11
    2c58:	8a 8b       	std	Y+18, r24	; 0x12
    2c5a:	9b 8b       	std	Y+19, r25	; 0x13
      kd = (0 - kd);
    2c5c:	2c 89       	ldd	r18, Y+20	; 0x14
    2c5e:	3d 89       	ldd	r19, Y+21	; 0x15
    2c60:	4e 89       	ldd	r20, Y+22	; 0x16
    2c62:	5f 89       	ldd	r21, Y+23	; 0x17
    2c64:	60 e0       	ldi	r22, 0x00	; 0
    2c66:	70 e0       	ldi	r23, 0x00	; 0
    2c68:	cb 01       	movw	r24, r22
    2c6a:	0e 94 70 08 	call	0x10e0	; 0x10e0 <__subsf3>
    2c6e:	6c 8b       	std	Y+20, r22	; 0x14
    2c70:	7d 8b       	std	Y+21, r23	; 0x15
    2c72:	8e 8b       	std	Y+22, r24	; 0x16
    2c74:	9f 8b       	std	Y+23, r25	; 0x17
   }   
   controllerDirection = Direction;
    2c76:	19 8f       	std	Y+25, r17	; 0x19
    2c78:	08 8f       	std	Y+24, r16	; 0x18
}
    2c7a:	df 91       	pop	r29
    2c7c:	cf 91       	pop	r28
    2c7e:	1f 91       	pop	r17
    2c80:	0f 91       	pop	r16
    2c82:	08 95       	ret

00002c84 <_ZN3PIDC1EPdS0_S0_dddi>:

/*Constructor (...)*********************************************************
 *    The parameters specified here are those for for which we can't set up 
 *    reliable defaults, so we need to have the user set them.
 ***************************************************************************/
PID::PID(double* Input, double* Output, double* Setpoint,
    2c84:	2f 92       	push	r2
    2c86:	3f 92       	push	r3
    2c88:	4f 92       	push	r4
    2c8a:	5f 92       	push	r5
    2c8c:	6f 92       	push	r6
    2c8e:	7f 92       	push	r7
    2c90:	8f 92       	push	r8
    2c92:	9f 92       	push	r9
    2c94:	af 92       	push	r10
    2c96:	bf 92       	push	r11
    2c98:	cf 92       	push	r12
    2c9a:	df 92       	push	r13
    2c9c:	ef 92       	push	r14
    2c9e:	ff 92       	push	r15
    2ca0:	0f 93       	push	r16
    2ca2:	1f 93       	push	r17
    2ca4:	cf 93       	push	r28
    2ca6:	df 93       	push	r29
    2ca8:	cd b7       	in	r28, 0x3d	; 61
    2caa:	de b7       	in	r29, 0x3e	; 62
    2cac:	28 97       	sbiw	r28, 0x08	; 8
    2cae:	0f b6       	in	r0, 0x3f	; 63
    2cb0:	f8 94       	cli
    2cb2:	de bf       	out	0x3e, r29	; 62
    2cb4:	0f be       	out	0x3f, r0	; 63
    2cb6:	cd bf       	out	0x3d, r28	; 61
    2cb8:	4c 01       	movw	r8, r24
    2cba:	7a 83       	std	Y+2, r23	; 0x02
    2cbc:	69 83       	std	Y+1, r22	; 0x01
    2cbe:	1a 01       	movw	r2, r20
    2cc0:	3c 83       	std	Y+4, r19	; 0x04
    2cc2:	2b 83       	std	Y+3, r18	; 0x03
    2cc4:	27 01       	movw	r4, r14
    2cc6:	38 01       	movw	r6, r16
    2cc8:	ad 82       	std	Y+5, r10	; 0x05
    2cca:	be 82       	std	Y+6, r11	; 0x06
    2ccc:	cf 82       	std	Y+7, r12	; 0x07
    2cce:	d8 86       	std	Y+8, r13	; 0x08
        double Kp, double Ki, double Kd, int ControllerDirection)
{
	PID::SetOutputLimits(0, 255);				//default output limit corresponds to 
    2cd0:	00 e0       	ldi	r16, 0x00	; 0
    2cd2:	10 e0       	ldi	r17, 0x00	; 0
    2cd4:	2f e7       	ldi	r18, 0x7F	; 127
    2cd6:	33 e4       	ldi	r19, 0x43	; 67
    2cd8:	40 e0       	ldi	r20, 0x00	; 0
    2cda:	50 e0       	ldi	r21, 0x00	; 0
    2cdc:	ba 01       	movw	r22, r20
    2cde:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <_ZN3PID15SetOutputLimitsEdd>
												//the arduino pwm limits

    SampleTime = 100;							//default Controller Sample Time is 0.1 seconds
    2ce2:	84 e6       	ldi	r24, 0x64	; 100
    2ce4:	90 e0       	ldi	r25, 0x00	; 0
    2ce6:	f4 01       	movw	r30, r8
    2ce8:	95 a7       	std	Z+45, r25	; 0x2d
    2cea:	84 a7       	std	Z+44, r24	; 0x2c

    PID::SetControllerDirection(ControllerDirection);
    2cec:	69 a1       	ldd	r22, Y+33	; 0x21
    2cee:	7a a1       	ldd	r23, Y+34	; 0x22
    2cf0:	c4 01       	movw	r24, r8
    2cf2:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <_ZN3PID22SetControllerDirectionEi>
    PID::SetTunings(Kp, Ki, Kd);
    2cf6:	cd 8c       	ldd	r12, Y+29	; 0x1d
    2cf8:	de 8c       	ldd	r13, Y+30	; 0x1e
    2cfa:	ef 8c       	ldd	r14, Y+31	; 0x1f
    2cfc:	f8 a0       	ldd	r15, Y+32	; 0x20
    2cfe:	0d 81       	ldd	r16, Y+5	; 0x05
    2d00:	1e 81       	ldd	r17, Y+6	; 0x06
    2d02:	2f 81       	ldd	r18, Y+7	; 0x07
    2d04:	38 85       	ldd	r19, Y+8	; 0x08
    2d06:	b3 01       	movw	r22, r6
    2d08:	a2 01       	movw	r20, r4
    2d0a:	c4 01       	movw	r24, r8
    2d0c:	0e 94 26 14 	call	0x284c	; 0x284c <_ZN3PID10SetTuningsEddd>

    lastTime = millis()-SampleTime;				
    2d10:	0e 94 5d 11 	call	0x22ba	; 0x22ba <millis>
    2d14:	f4 01       	movw	r30, r8
    2d16:	44 a4       	ldd	r4, Z+44	; 0x2c
    2d18:	55 a4       	ldd	r5, Z+45	; 0x2d
    2d1a:	05 2c       	mov	r0, r5
    2d1c:	00 0c       	add	r0, r0
    2d1e:	66 08       	sbc	r6, r6
    2d20:	77 08       	sbc	r7, r7
    2d22:	dc 01       	movw	r26, r24
    2d24:	cb 01       	movw	r24, r22
    2d26:	84 19       	sub	r24, r4
    2d28:	95 09       	sbc	r25, r5
    2d2a:	a6 09       	sbc	r26, r6
    2d2c:	b7 09       	sbc	r27, r7
    2d2e:	80 a3       	std	Z+32, r24	; 0x20
    2d30:	91 a3       	std	Z+33, r25	; 0x21
    2d32:	a2 a3       	std	Z+34, r26	; 0x22
    2d34:	b3 a3       	std	Z+35, r27	; 0x23
    inAuto = false;
    2d36:	16 aa       	std	Z+54, r1	; 0x36
    myOutput = Output;
    2d38:	35 8e       	std	Z+29, r3	; 0x1d
    2d3a:	24 8e       	std	Z+28, r2	; 0x1c
    myInput = Input;
    2d3c:	89 81       	ldd	r24, Y+1	; 0x01
    2d3e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d40:	93 8f       	std	Z+27, r25	; 0x1b
    2d42:	82 8f       	std	Z+26, r24	; 0x1a
    mySetpoint = Setpoint;
    2d44:	8b 81       	ldd	r24, Y+3	; 0x03
    2d46:	9c 81       	ldd	r25, Y+4	; 0x04
    2d48:	97 8f       	std	Z+31, r25	; 0x1f
    2d4a:	86 8f       	std	Z+30, r24	; 0x1e
		
}
    2d4c:	28 96       	adiw	r28, 0x08	; 8
    2d4e:	0f b6       	in	r0, 0x3f	; 63
    2d50:	f8 94       	cli
    2d52:	de bf       	out	0x3e, r29	; 62
    2d54:	0f be       	out	0x3f, r0	; 63
    2d56:	cd bf       	out	0x3d, r28	; 61
    2d58:	df 91       	pop	r29
    2d5a:	cf 91       	pop	r28
    2d5c:	1f 91       	pop	r17
    2d5e:	0f 91       	pop	r16
    2d60:	ff 90       	pop	r15
    2d62:	ef 90       	pop	r14
    2d64:	df 90       	pop	r13
    2d66:	cf 90       	pop	r12
    2d68:	bf 90       	pop	r11
    2d6a:	af 90       	pop	r10
    2d6c:	9f 90       	pop	r9
    2d6e:	8f 90       	pop	r8
    2d70:	7f 90       	pop	r7
    2d72:	6f 90       	pop	r6
    2d74:	5f 90       	pop	r5
    2d76:	4f 90       	pop	r4
    2d78:	3f 90       	pop	r3
    2d7a:	2f 90       	pop	r2
    2d7c:	08 95       	ret

00002d7e <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    2d7e:	cf 93       	push	r28
  uint8_t sreg = SREG;
    2d80:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    2d82:	f8 94       	cli
  if (!initialized) {
    2d84:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <_ZN8SPIClass11initializedE>
    2d88:	81 11       	cpse	r24, r1
    2d8a:	27 c0       	rjmp	.+78     	; 0x2dda <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    2d8c:	e7 e6       	ldi	r30, 0x67	; 103
    2d8e:	f1 e0       	ldi	r31, 0x01	; 1
    2d90:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    2d92:	e8 e4       	ldi	r30, 0x48	; 72
    2d94:	f1 e0       	ldi	r31, 0x01	; 1
    2d96:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    2d98:	e8 2f       	mov	r30, r24
    2d9a:	f0 e0       	ldi	r31, 0x00	; 0
    2d9c:	ee 0f       	add	r30, r30
    2d9e:	ff 1f       	adc	r31, r31
    2da0:	ed 57       	subi	r30, 0x7D	; 125
    2da2:	fe 4f       	sbci	r31, 0xFE	; 254
    2da4:	a5 91       	lpm	r26, Z+
    2da6:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    2da8:	ec 91       	ld	r30, X
    2daa:	e9 23       	and	r30, r25
    2dac:	21 f4       	brne	.+8      	; 0x2db6 <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    2dae:	61 e0       	ldi	r22, 0x01	; 1
    2db0:	81 e1       	ldi	r24, 0x11	; 17
    2db2:	0e 94 d5 12 	call	0x25aa	; 0x25aa <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    2db6:	61 e0       	ldi	r22, 0x01	; 1
    2db8:	81 e1       	ldi	r24, 0x11	; 17
    2dba:	0e 94 99 12 	call	0x2532	; 0x2532 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    2dbe:	8c b5       	in	r24, 0x2c	; 44
    2dc0:	80 61       	ori	r24, 0x10	; 16
    2dc2:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    2dc4:	8c b5       	in	r24, 0x2c	; 44
    2dc6:	80 64       	ori	r24, 0x40	; 64
    2dc8:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    2dca:	61 e0       	ldi	r22, 0x01	; 1
    2dcc:	8f e0       	ldi	r24, 0x0F	; 15
    2dce:	0e 94 99 12 	call	0x2532	; 0x2532 <pinMode>
    pinMode(MOSI, OUTPUT);
    2dd2:	61 e0       	ldi	r22, 0x01	; 1
    2dd4:	80 e1       	ldi	r24, 0x10	; 16
    2dd6:	0e 94 99 12 	call	0x2532	; 0x2532 <pinMode>
  }
  initialized++; // reference count
    2dda:	80 91 94 03 	lds	r24, 0x0394	; 0x800394 <_ZN8SPIClass11initializedE>
    2dde:	8f 5f       	subi	r24, 0xFF	; 255
    2de0:	80 93 94 03 	sts	0x0394, r24	; 0x800394 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    2de4:	cf bf       	out	0x3f, r28	; 63
}
    2de6:	cf 91       	pop	r28
    2de8:	08 95       	ret

00002dea <_ZN7TwoWire9availableEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
    2dea:	80 91 c8 03 	lds	r24, 0x03C8	; 0x8003c8 <_ZN7TwoWire14rxBufferLengthE>
    2dee:	90 e0       	ldi	r25, 0x00	; 0
    2df0:	20 91 c9 03 	lds	r18, 0x03C9	; 0x8003c9 <_ZN7TwoWire13rxBufferIndexE>
    2df4:	82 1b       	sub	r24, r18
    2df6:	91 09       	sbc	r25, r1
    2df8:	08 95       	ret

00002dfa <_ZN7TwoWire4readEv>:
    2dfa:	90 91 c9 03 	lds	r25, 0x03C9	; 0x8003c9 <_ZN7TwoWire13rxBufferIndexE>
    2dfe:	80 91 c8 03 	lds	r24, 0x03C8	; 0x8003c8 <_ZN7TwoWire14rxBufferLengthE>
    2e02:	98 17       	cp	r25, r24
    2e04:	50 f4       	brcc	.+20     	; 0x2e1a <_ZN7TwoWire4readEv+0x20>
    2e06:	e9 2f       	mov	r30, r25
    2e08:	f0 e0       	ldi	r31, 0x00	; 0
    2e0a:	e6 53       	subi	r30, 0x36	; 54
    2e0c:	fc 4f       	sbci	r31, 0xFC	; 252
    2e0e:	20 81       	ld	r18, Z
    2e10:	30 e0       	ldi	r19, 0x00	; 0
    2e12:	9f 5f       	subi	r25, 0xFF	; 255
    2e14:	90 93 c9 03 	sts	0x03C9, r25	; 0x8003c9 <_ZN7TwoWire13rxBufferIndexE>
    2e18:	02 c0       	rjmp	.+4      	; 0x2e1e <_ZN7TwoWire4readEv+0x24>
    2e1a:	2f ef       	ldi	r18, 0xFF	; 255
    2e1c:	3f ef       	ldi	r19, 0xFF	; 255
    2e1e:	c9 01       	movw	r24, r18
    2e20:	08 95       	ret

00002e22 <_ZN7TwoWire4peekEv>:
    2e22:	e0 91 c9 03 	lds	r30, 0x03C9	; 0x8003c9 <_ZN7TwoWire13rxBufferIndexE>
    2e26:	80 91 c8 03 	lds	r24, 0x03C8	; 0x8003c8 <_ZN7TwoWire14rxBufferLengthE>
    2e2a:	e8 17       	cp	r30, r24
    2e2c:	30 f4       	brcc	.+12     	; 0x2e3a <_ZN7TwoWire4peekEv+0x18>
    2e2e:	f0 e0       	ldi	r31, 0x00	; 0
    2e30:	e6 53       	subi	r30, 0x36	; 54
    2e32:	fc 4f       	sbci	r31, 0xFC	; 252
    2e34:	80 81       	ld	r24, Z
    2e36:	90 e0       	ldi	r25, 0x00	; 0
    2e38:	08 95       	ret
    2e3a:	8f ef       	ldi	r24, 0xFF	; 255
    2e3c:	9f ef       	ldi	r25, 0xFF	; 255
    2e3e:	08 95       	ret

00002e40 <_ZN7TwoWire5flushEv>:
    2e40:	08 95       	ret

00002e42 <_ZN7TwoWire16onReceiveServiceEPhi>:
    2e42:	cf 93       	push	r28
    2e44:	df 93       	push	r29
    2e46:	ec 01       	movw	r28, r24
    2e48:	e0 91 a1 03 	lds	r30, 0x03A1	; 0x8003a1 <_ZN7TwoWire14user_onReceiveE>
    2e4c:	f0 91 a2 03 	lds	r31, 0x03A2	; 0x8003a2 <_ZN7TwoWire14user_onReceiveE+0x1>
    2e50:	30 97       	sbiw	r30, 0x00	; 0
    2e52:	f1 f0       	breq	.+60     	; 0x2e90 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    2e54:	90 91 c9 03 	lds	r25, 0x03C9	; 0x8003c9 <_ZN7TwoWire13rxBufferIndexE>
    2e58:	80 91 c8 03 	lds	r24, 0x03C8	; 0x8003c8 <_ZN7TwoWire14rxBufferLengthE>
    2e5c:	98 17       	cp	r25, r24
    2e5e:	c0 f0       	brcs	.+48     	; 0x2e90 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    2e60:	90 e0       	ldi	r25, 0x00	; 0
    2e62:	29 2f       	mov	r18, r25
    2e64:	30 e0       	ldi	r19, 0x00	; 0
    2e66:	26 17       	cp	r18, r22
    2e68:	37 07       	cpc	r19, r23
    2e6a:	54 f4       	brge	.+20     	; 0x2e80 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    2e6c:	de 01       	movw	r26, r28
    2e6e:	a2 0f       	add	r26, r18
    2e70:	b3 1f       	adc	r27, r19
    2e72:	4c 91       	ld	r20, X
    2e74:	d9 01       	movw	r26, r18
    2e76:	a6 53       	subi	r26, 0x36	; 54
    2e78:	bc 4f       	sbci	r27, 0xFC	; 252
    2e7a:	4c 93       	st	X, r20
    2e7c:	9f 5f       	subi	r25, 0xFF	; 255
    2e7e:	f1 cf       	rjmp	.-30     	; 0x2e62 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    2e80:	10 92 c9 03 	sts	0x03C9, r1	; 0x8003c9 <_ZN7TwoWire13rxBufferIndexE>
    2e84:	60 93 c8 03 	sts	0x03C8, r22	; 0x8003c8 <_ZN7TwoWire14rxBufferLengthE>
    2e88:	cb 01       	movw	r24, r22
    2e8a:	df 91       	pop	r29
    2e8c:	cf 91       	pop	r28
    2e8e:	09 94       	ijmp
    2e90:	df 91       	pop	r29
    2e92:	cf 91       	pop	r28
    2e94:	08 95       	ret

00002e96 <_ZN7TwoWire16onRequestServiceEv>:
    2e96:	e0 91 a3 03 	lds	r30, 0x03A3	; 0x8003a3 <_ZN7TwoWire14user_onRequestE>
    2e9a:	f0 91 a4 03 	lds	r31, 0x03A4	; 0x8003a4 <_ZN7TwoWire14user_onRequestE+0x1>
    2e9e:	30 97       	sbiw	r30, 0x00	; 0
    2ea0:	29 f0       	breq	.+10     	; 0x2eac <_ZN7TwoWire16onRequestServiceEv+0x16>
    2ea2:	10 92 a7 03 	sts	0x03A7, r1	; 0x8003a7 <_ZN7TwoWire13txBufferIndexE>
    2ea6:	10 92 a6 03 	sts	0x03A6, r1	; 0x8003a6 <_ZN7TwoWire14txBufferLengthE>
    2eaa:	09 94       	ijmp
    2eac:	08 95       	ret

00002eae <_ZN7TwoWire5writeEPKhj>:
    2eae:	cf 92       	push	r12
    2eb0:	df 92       	push	r13
    2eb2:	ef 92       	push	r14
    2eb4:	ff 92       	push	r15
    2eb6:	0f 93       	push	r16
    2eb8:	1f 93       	push	r17
    2eba:	cf 93       	push	r28
    2ebc:	df 93       	push	r29
    2ebe:	7c 01       	movw	r14, r24
    2ec0:	cb 01       	movw	r24, r22
    2ec2:	8a 01       	movw	r16, r20
    2ec4:	20 91 a5 03 	lds	r18, 0x03A5	; 0x8003a5 <_ZN7TwoWire12transmittingE>
    2ec8:	22 23       	and	r18, r18
    2eca:	89 f0       	breq	.+34     	; 0x2eee <_ZN7TwoWire5writeEPKhj+0x40>
    2ecc:	eb 01       	movw	r28, r22
    2ece:	6b 01       	movw	r12, r22
    2ed0:	c4 0e       	add	r12, r20
    2ed2:	d5 1e       	adc	r13, r21
    2ed4:	cc 15       	cp	r28, r12
    2ed6:	dd 05       	cpc	r29, r13
    2ed8:	69 f0       	breq	.+26     	; 0x2ef4 <_ZN7TwoWire5writeEPKhj+0x46>
    2eda:	69 91       	ld	r22, Y+
    2edc:	d7 01       	movw	r26, r14
    2ede:	ed 91       	ld	r30, X+
    2ee0:	fc 91       	ld	r31, X
    2ee2:	01 90       	ld	r0, Z+
    2ee4:	f0 81       	ld	r31, Z
    2ee6:	e0 2d       	mov	r30, r0
    2ee8:	c7 01       	movw	r24, r14
    2eea:	09 95       	icall
    2eec:	f3 cf       	rjmp	.-26     	; 0x2ed4 <_ZN7TwoWire5writeEPKhj+0x26>
    2eee:	64 2f       	mov	r22, r20
    2ef0:	0e 94 ab 19 	call	0x3356	; 0x3356 <twi_transmit>
    2ef4:	c8 01       	movw	r24, r16
    2ef6:	df 91       	pop	r29
    2ef8:	cf 91       	pop	r28
    2efa:	1f 91       	pop	r17
    2efc:	0f 91       	pop	r16
    2efe:	ff 90       	pop	r15
    2f00:	ef 90       	pop	r14
    2f02:	df 90       	pop	r13
    2f04:	cf 90       	pop	r12
    2f06:	08 95       	ret

00002f08 <_ZN7TwoWire5writeEh>:
    2f08:	cf 93       	push	r28
    2f0a:	df 93       	push	r29
    2f0c:	1f 92       	push	r1
    2f0e:	cd b7       	in	r28, 0x3d	; 61
    2f10:	de b7       	in	r29, 0x3e	; 62
    2f12:	69 83       	std	Y+1, r22	; 0x01
    2f14:	20 91 a5 03 	lds	r18, 0x03A5	; 0x8003a5 <_ZN7TwoWire12transmittingE>
    2f18:	22 23       	and	r18, r18
    2f1a:	d1 f0       	breq	.+52     	; 0x2f50 <_ZN7TwoWire5writeEh+0x48>
    2f1c:	20 91 a6 03 	lds	r18, 0x03A6	; 0x8003a6 <_ZN7TwoWire14txBufferLengthE>
    2f20:	20 32       	cpi	r18, 0x20	; 32
    2f22:	40 f0       	brcs	.+16     	; 0x2f34 <_ZN7TwoWire5writeEh+0x2c>
    2f24:	21 e0       	ldi	r18, 0x01	; 1
    2f26:	30 e0       	ldi	r19, 0x00	; 0
    2f28:	fc 01       	movw	r30, r24
    2f2a:	33 83       	std	Z+3, r19	; 0x03
    2f2c:	22 83       	std	Z+2, r18	; 0x02
    2f2e:	80 e0       	ldi	r24, 0x00	; 0
    2f30:	90 e0       	ldi	r25, 0x00	; 0
    2f32:	15 c0       	rjmp	.+42     	; 0x2f5e <_ZN7TwoWire5writeEh+0x56>
    2f34:	80 91 a7 03 	lds	r24, 0x03A7	; 0x8003a7 <_ZN7TwoWire13txBufferIndexE>
    2f38:	e8 2f       	mov	r30, r24
    2f3a:	f0 e0       	ldi	r31, 0x00	; 0
    2f3c:	e8 55       	subi	r30, 0x58	; 88
    2f3e:	fc 4f       	sbci	r31, 0xFC	; 252
    2f40:	99 81       	ldd	r25, Y+1	; 0x01
    2f42:	90 83       	st	Z, r25
    2f44:	8f 5f       	subi	r24, 0xFF	; 255
    2f46:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <_ZN7TwoWire13txBufferIndexE>
    2f4a:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <_ZN7TwoWire14txBufferLengthE>
    2f4e:	05 c0       	rjmp	.+10     	; 0x2f5a <_ZN7TwoWire5writeEh+0x52>
    2f50:	61 e0       	ldi	r22, 0x01	; 1
    2f52:	ce 01       	movw	r24, r28
    2f54:	01 96       	adiw	r24, 0x01	; 1
    2f56:	0e 94 ab 19 	call	0x3356	; 0x3356 <twi_transmit>
    2f5a:	81 e0       	ldi	r24, 0x01	; 1
    2f5c:	90 e0       	ldi	r25, 0x00	; 0
    2f5e:	0f 90       	pop	r0
    2f60:	df 91       	pop	r29
    2f62:	cf 91       	pop	r28
    2f64:	08 95       	ret

00002f66 <_ZN7TwoWireC1Ev>:
    2f66:	fc 01       	movw	r30, r24
    2f68:	13 82       	std	Z+3, r1	; 0x03
    2f6a:	12 82       	std	Z+2, r1	; 0x02
    2f6c:	88 ee       	ldi	r24, 0xE8	; 232
    2f6e:	93 e0       	ldi	r25, 0x03	; 3
    2f70:	a0 e0       	ldi	r26, 0x00	; 0
    2f72:	b0 e0       	ldi	r27, 0x00	; 0
    2f74:	84 83       	std	Z+4, r24	; 0x04
    2f76:	95 83       	std	Z+5, r25	; 0x05
    2f78:	a6 83       	std	Z+6, r26	; 0x06
    2f7a:	b7 83       	std	Z+7, r27	; 0x07
    2f7c:	84 ed       	ldi	r24, 0xD4	; 212
    2f7e:	91 e0       	ldi	r25, 0x01	; 1
    2f80:	91 83       	std	Z+1, r25	; 0x01
    2f82:	80 83       	st	Z, r24
    2f84:	08 95       	ret

00002f86 <_ZN7TwoWire5beginEv>:
    2f86:	10 92 c9 03 	sts	0x03C9, r1	; 0x8003c9 <_ZN7TwoWire13rxBufferIndexE>
    2f8a:	10 92 c8 03 	sts	0x03C8, r1	; 0x8003c8 <_ZN7TwoWire14rxBufferLengthE>
    2f8e:	10 92 a7 03 	sts	0x03A7, r1	; 0x8003a7 <_ZN7TwoWire13txBufferIndexE>
    2f92:	10 92 a6 03 	sts	0x03A6, r1	; 0x8003a6 <_ZN7TwoWire14txBufferLengthE>
    2f96:	0c 94 89 19 	jmp	0x3312	; 0x3312 <twi_init>

00002f9a <_ZN7TwoWire5beginEh>:
    2f9a:	cf 93       	push	r28
    2f9c:	df 93       	push	r29
    2f9e:	ec 01       	movw	r28, r24
    2fa0:	86 2f       	mov	r24, r22
    2fa2:	0e 94 a7 19 	call	0x334e	; 0x334e <twi_setAddress>
    2fa6:	8b e4       	ldi	r24, 0x4B	; 75
    2fa8:	97 e1       	ldi	r25, 0x17	; 23
    2faa:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <twi_attachSlaveTxEvent>
    2fae:	81 e2       	ldi	r24, 0x21	; 33
    2fb0:	97 e1       	ldi	r25, 0x17	; 23
    2fb2:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <twi_attachSlaveRxEvent>
    2fb6:	ce 01       	movw	r24, r28
    2fb8:	df 91       	pop	r29
    2fba:	cf 91       	pop	r28
    2fbc:	0c 94 c3 17 	jmp	0x2f86	; 0x2f86 <_ZN7TwoWire5beginEv>

00002fc0 <_ZN7TwoWire5beginEi>:
    2fc0:	0c 94 cd 17 	jmp	0x2f9a	; 0x2f9a <_ZN7TwoWire5beginEh>

00002fc4 <_ZN7TwoWire9onReceiveEPFviE>:
}

// sets function called on slave write
void TwoWire::onReceive( void (*function)(int) )
{
  user_onReceive = function;
    2fc4:	70 93 a2 03 	sts	0x03A2, r23	; 0x8003a2 <_ZN7TwoWire14user_onReceiveE+0x1>
    2fc8:	60 93 a1 03 	sts	0x03A1, r22	; 0x8003a1 <_ZN7TwoWire14user_onReceiveE>
    2fcc:	08 95       	ret

00002fce <_ZN7TwoWire9onRequestEPFvvE>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    2fce:	70 93 a4 03 	sts	0x03A4, r23	; 0x8003a4 <_ZN7TwoWire14user_onRequestE+0x1>
    2fd2:	60 93 a3 03 	sts	0x03A3, r22	; 0x8003a3 <_ZN7TwoWire14user_onRequestE>
    2fd6:	08 95       	ret

00002fd8 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    2fd8:	85 e9       	ldi	r24, 0x95	; 149
    2fda:	93 e0       	ldi	r25, 0x03	; 3
    2fdc:	0c 94 b3 17 	jmp	0x2f66	; 0x2f66 <_ZN7TwoWireC1Ev>

00002fe0 <_ZN7Serial_5writeEh>:
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
		ret = breakValue;
		breakValue = -1;
	}
	return ret;
}
    2fe0:	cf 93       	push	r28
    2fe2:	df 93       	push	r29
    2fe4:	1f 92       	push	r1
    2fe6:	cd b7       	in	r28, 0x3d	; 61
    2fe8:	de b7       	in	r29, 0x3e	; 62
    2fea:	69 83       	std	Y+1, r22	; 0x01
    2fec:	dc 01       	movw	r26, r24
    2fee:	ed 91       	ld	r30, X+
    2ff0:	fc 91       	ld	r31, X
    2ff2:	02 80       	ldd	r0, Z+2	; 0x02
    2ff4:	f3 81       	ldd	r31, Z+3	; 0x03
    2ff6:	e0 2d       	mov	r30, r0
    2ff8:	41 e0       	ldi	r20, 0x01	; 1
    2ffa:	50 e0       	ldi	r21, 0x00	; 0
    2ffc:	be 01       	movw	r22, r28
    2ffe:	6f 5f       	subi	r22, 0xFF	; 255
    3000:	7f 4f       	sbci	r23, 0xFF	; 255
    3002:	09 95       	icall
    3004:	0f 90       	pop	r0
    3006:	df 91       	pop	r29
    3008:	cf 91       	pop	r28
    300a:	08 95       	ret

0000300c <_ZN7Serial_4peekEv>:
    300c:	cf 93       	push	r28
    300e:	df 93       	push	r29
    3010:	ec 01       	movw	r28, r24
    3012:	8c 85       	ldd	r24, Y+12	; 0x0c
    3014:	9d 85       	ldd	r25, Y+13	; 0x0d
    3016:	97 ff       	sbrs	r25, 7
    3018:	05 c0       	rjmp	.+10     	; 0x3024 <_ZN7Serial_4peekEv+0x18>
    301a:	82 e0       	ldi	r24, 0x02	; 2
    301c:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <_Z8USB_Recvh>
    3020:	9d 87       	std	Y+13, r25	; 0x0d
    3022:	8c 87       	std	Y+12, r24	; 0x0c
    3024:	8c 85       	ldd	r24, Y+12	; 0x0c
    3026:	9d 85       	ldd	r25, Y+13	; 0x0d
    3028:	df 91       	pop	r29
    302a:	cf 91       	pop	r28
    302c:	08 95       	ret

0000302e <_ZN7Serial_5flushEv>:
    302e:	83 e0       	ldi	r24, 0x03	; 3
    3030:	0c 94 69 10 	jmp	0x20d2	; 0x20d2 <_Z9USB_Flushh>

00003034 <_ZN7Serial_9availableEv>:
    3034:	fc 01       	movw	r30, r24
    3036:	84 85       	ldd	r24, Z+12	; 0x0c
    3038:	95 85       	ldd	r25, Z+13	; 0x0d
    303a:	97 fd       	sbrc	r25, 7
    303c:	06 c0       	rjmp	.+12     	; 0x304a <_ZN7Serial_9availableEv+0x16>
    303e:	82 e0       	ldi	r24, 0x02	; 2
    3040:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <_Z13USB_Availableh>
    3044:	90 e0       	ldi	r25, 0x00	; 0
    3046:	01 96       	adiw	r24, 0x01	; 1
    3048:	08 95       	ret
    304a:	82 e0       	ldi	r24, 0x02	; 2
    304c:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <_Z13USB_Availableh>
    3050:	90 e0       	ldi	r25, 0x00	; 0
    3052:	08 95       	ret

00003054 <_ZN7Serial_4readEv>:
    3054:	fc 01       	movw	r30, r24
    3056:	84 85       	ldd	r24, Z+12	; 0x0c
    3058:	95 85       	ldd	r25, Z+13	; 0x0d
    305a:	97 fd       	sbrc	r25, 7
    305c:	05 c0       	rjmp	.+10     	; 0x3068 <_ZN7Serial_4readEv+0x14>
    305e:	2f ef       	ldi	r18, 0xFF	; 255
    3060:	3f ef       	ldi	r19, 0xFF	; 255
    3062:	35 87       	std	Z+13, r19	; 0x0d
    3064:	24 87       	std	Z+12, r18	; 0x0c
    3066:	08 95       	ret
    3068:	82 e0       	ldi	r24, 0x02	; 2
    306a:	0c 94 d7 0d 	jmp	0x1bae	; 0x1bae <_Z8USB_Recvh>

0000306e <_ZN7Serial_5writeEPKhj>:
    306e:	cf 93       	push	r28
    3070:	df 93       	push	r29
    3072:	ec 01       	movw	r28, r24
    3074:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <_ZL12_usbLineInfo+0x7>
    3078:	88 23       	and	r24, r24
    307a:	31 f0       	breq	.+12     	; 0x3088 <_ZN7Serial_5writeEPKhj+0x1a>
    307c:	83 e0       	ldi	r24, 0x03	; 3
    307e:	0e 94 08 0e 	call	0x1c10	; 0x1c10 <_Z8USB_SendhPKvi>
    3082:	18 16       	cp	r1, r24
    3084:	19 06       	cpc	r1, r25
    3086:	34 f0       	brlt	.+12     	; 0x3094 <_ZN7Serial_5writeEPKhj+0x26>
    3088:	81 e0       	ldi	r24, 0x01	; 1
    308a:	90 e0       	ldi	r25, 0x00	; 0
    308c:	9b 83       	std	Y+3, r25	; 0x03
    308e:	8a 83       	std	Y+2, r24	; 0x02
    3090:	80 e0       	ldi	r24, 0x00	; 0
    3092:	90 e0       	ldi	r25, 0x00	; 0
    3094:	df 91       	pop	r29
    3096:	cf 91       	pop	r28
    3098:	08 95       	ret

0000309a <_Z16CDC_GetInterfacePh>:
    309a:	fc 01       	movw	r30, r24
    309c:	90 81       	ld	r25, Z
    309e:	9e 5f       	subi	r25, 0xFE	; 254
    30a0:	90 83       	st	Z, r25
    30a2:	42 e4       	ldi	r20, 0x42	; 66
    30a4:	50 e0       	ldi	r21, 0x00	; 0
    30a6:	61 e9       	ldi	r22, 0x91	; 145
    30a8:	71 e0       	ldi	r23, 0x01	; 1
    30aa:	80 e8       	ldi	r24, 0x80	; 128
    30ac:	0c 94 a8 0e 	jmp	0x1d50	; 0x1d50 <_Z15USB_SendControlhPKvi>

000030b0 <_Z9CDC_SetupR8USBSetup>:
    30b0:	fc 01       	movw	r30, r24
    30b2:	81 81       	ldd	r24, Z+1	; 0x01
    30b4:	90 81       	ld	r25, Z
    30b6:	91 3a       	cpi	r25, 0xA1	; 161
    30b8:	59 f4       	brne	.+22     	; 0x30d0 <_Z9CDC_SetupR8USBSetup+0x20>
    30ba:	81 32       	cpi	r24, 0x21	; 33
    30bc:	09 f0       	breq	.+2      	; 0x30c0 <_Z9CDC_SetupR8USBSetup+0x10>
    30be:	5c c0       	rjmp	.+184    	; 0x3178 <_Z9CDC_SetupR8USBSetup+0xc8>
    30c0:	47 e0       	ldi	r20, 0x07	; 7
    30c2:	50 e0       	ldi	r21, 0x00	; 0
    30c4:	6f e4       	ldi	r22, 0x4F	; 79
    30c6:	71 e0       	ldi	r23, 0x01	; 1
    30c8:	80 e0       	ldi	r24, 0x00	; 0
    30ca:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <_Z15USB_SendControlhPKvi>
    30ce:	52 c0       	rjmp	.+164    	; 0x3174 <_Z9CDC_SetupR8USBSetup+0xc4>
    30d0:	91 32       	cpi	r25, 0x21	; 33
    30d2:	09 f0       	breq	.+2      	; 0x30d6 <_Z9CDC_SetupR8USBSetup+0x26>
    30d4:	51 c0       	rjmp	.+162    	; 0x3178 <_Z9CDC_SetupR8USBSetup+0xc8>
    30d6:	83 32       	cpi	r24, 0x23	; 35
    30d8:	69 f4       	brne	.+26     	; 0x30f4 <_Z9CDC_SetupR8USBSetup+0x44>
    30da:	82 81       	ldd	r24, Z+2	; 0x02
    30dc:	93 81       	ldd	r25, Z+3	; 0x03
    30de:	a0 e0       	ldi	r26, 0x00	; 0
    30e0:	b0 e0       	ldi	r27, 0x00	; 0
    30e2:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <_ZL10breakValue>
    30e6:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <_ZL10breakValue+0x1>
    30ea:	a0 93 4d 01 	sts	0x014D, r26	; 0x80014d <_ZL10breakValue+0x2>
    30ee:	b0 93 4e 01 	sts	0x014E, r27	; 0x80014e <_ZL10breakValue+0x3>
    30f2:	40 c0       	rjmp	.+128    	; 0x3174 <_Z9CDC_SetupR8USBSetup+0xc4>
    30f4:	80 32       	cpi	r24, 0x20	; 32
    30f6:	39 f4       	brne	.+14     	; 0x3106 <_Z9CDC_SetupR8USBSetup+0x56>
    30f8:	67 e0       	ldi	r22, 0x07	; 7
    30fa:	70 e0       	ldi	r23, 0x00	; 0
    30fc:	8f e4       	ldi	r24, 0x4F	; 79
    30fe:	91 e0       	ldi	r25, 0x01	; 1
    3100:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <_Z15USB_RecvControlPvi>
    3104:	05 c0       	rjmp	.+10     	; 0x3110 <_Z9CDC_SetupR8USBSetup+0x60>
    3106:	82 32       	cpi	r24, 0x22	; 34
    3108:	a9 f5       	brne	.+106    	; 0x3174 <_Z9CDC_SetupR8USBSetup+0xc4>
    310a:	82 81       	ldd	r24, Z+2	; 0x02
    310c:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <_ZL12_usbLineInfo+0x7>
    3110:	80 91 3a 04 	lds	r24, 0x043A	; 0x80043a <_updatedLUFAbootloader>
    3114:	88 23       	and	r24, r24
    3116:	19 f0       	breq	.+6      	; 0x311e <_Z9CDC_SetupR8USBSetup+0x6e>
    3118:	ee ef       	ldi	r30, 0xFE	; 254
    311a:	fa e0       	ldi	r31, 0x0A	; 10
    311c:	02 c0       	rjmp	.+4      	; 0x3122 <_Z9CDC_SetupR8USBSetup+0x72>
    311e:	e0 e0       	ldi	r30, 0x00	; 0
    3120:	f8 e0       	ldi	r31, 0x08	; 8
    3122:	80 91 4f 01 	lds	r24, 0x014F	; 0x80014f <_ZL12_usbLineInfo>
    3126:	90 91 50 01 	lds	r25, 0x0150	; 0x800150 <_ZL12_usbLineInfo+0x1>
    312a:	a0 91 51 01 	lds	r26, 0x0151	; 0x800151 <_ZL12_usbLineInfo+0x2>
    312e:	b0 91 52 01 	lds	r27, 0x0152	; 0x800152 <_ZL12_usbLineInfo+0x3>
    3132:	80 3b       	cpi	r24, 0xB0	; 176
    3134:	94 40       	sbci	r25, 0x04	; 4
    3136:	a1 05       	cpc	r26, r1
    3138:	b1 05       	cpc	r27, r1
    313a:	01 f5       	brne	.+64     	; 0x317c <_Z9CDC_SetupR8USBSetup+0xcc>
    313c:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <_ZL12_usbLineInfo+0x7>
    3140:	80 fd       	sbrc	r24, 0
    3142:	1c c0       	rjmp	.+56     	; 0x317c <_Z9CDC_SetupR8USBSetup+0xcc>
    3144:	ee 3f       	cpi	r30, 0xFE	; 254
    3146:	2a e0       	ldi	r18, 0x0A	; 10
    3148:	f2 07       	cpc	r31, r18
    314a:	31 f0       	breq	.+12     	; 0x3158 <_Z9CDC_SetupR8USBSetup+0xa8>
    314c:	80 81       	ld	r24, Z
    314e:	91 81       	ldd	r25, Z+1	; 0x01
    3150:	90 93 ff 0a 	sts	0x0AFF, r25	; 0x800aff <__bss_end+0x64a>
    3154:	80 93 fe 0a 	sts	0x0AFE, r24	; 0x800afe <__bss_end+0x649>
    3158:	87 e7       	ldi	r24, 0x77	; 119
    315a:	97 e7       	ldi	r25, 0x77	; 119
    315c:	91 83       	std	Z+1, r25	; 0x01
    315e:	80 83       	st	Z, r24
    3160:	9b e0       	ldi	r25, 0x0B	; 11
    3162:	88 e1       	ldi	r24, 0x18	; 24
    3164:	0f b6       	in	r0, 0x3f	; 63
    3166:	f8 94       	cli
    3168:	a8 95       	wdr
    316a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    316e:	0f be       	out	0x3f, r0	; 63
    3170:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3174:	81 e0       	ldi	r24, 0x01	; 1
    3176:	08 95       	ret
    3178:	80 e0       	ldi	r24, 0x00	; 0
    317a:	08 95       	ret
    317c:	0f b6       	in	r0, 0x3f	; 63
    317e:	f8 94       	cli
    3180:	a8 95       	wdr
    3182:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3186:	88 61       	ori	r24, 0x18	; 24
    3188:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    318c:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    3190:	0f be       	out	0x3f, r0	; 63
    3192:	a8 95       	wdr
    3194:	ee 3f       	cpi	r30, 0xFE	; 254
    3196:	8a e0       	ldi	r24, 0x0A	; 10
    3198:	f8 07       	cpc	r31, r24
    319a:	39 f0       	breq	.+14     	; 0x31aa <_Z9CDC_SetupR8USBSetup+0xfa>
    319c:	80 91 fe 0a 	lds	r24, 0x0AFE	; 0x800afe <__bss_end+0x649>
    31a0:	90 91 ff 0a 	lds	r25, 0x0AFF	; 0x800aff <__bss_end+0x64a>
    31a4:	91 83       	std	Z+1, r25	; 0x01
    31a6:	80 83       	st	Z, r24
    31a8:	e5 cf       	rjmp	.-54     	; 0x3174 <_Z9CDC_SetupR8USBSetup+0xc4>
    31aa:	10 92 ff 0a 	sts	0x0AFF, r1	; 0x800aff <__bss_end+0x64a>
    31ae:	10 92 fe 0a 	sts	0x0AFE, r1	; 0x800afe <__bss_end+0x649>
    31b2:	e0 cf       	rjmp	.-64     	; 0x3174 <_Z9CDC_SetupR8USBSetup+0xc4>

000031b4 <_GLOBAL__sub_I__updatedLUFAbootloader>:
    31b4:	ea ee       	ldi	r30, 0xEA	; 234
    31b6:	f3 e0       	ldi	r31, 0x03	; 3
    31b8:	13 82       	std	Z+3, r1	; 0x03
    31ba:	12 82       	std	Z+2, r1	; 0x02
    31bc:	88 ee       	ldi	r24, 0xE8	; 232
    31be:	93 e0       	ldi	r25, 0x03	; 3
    31c0:	a0 e0       	ldi	r26, 0x00	; 0
    31c2:	b0 e0       	ldi	r27, 0x00	; 0
    31c4:	84 83       	std	Z+4, r24	; 0x04
    31c6:	95 83       	std	Z+5, r25	; 0x05
    31c8:	a6 83       	std	Z+6, r26	; 0x06
    31ca:	b7 83       	std	Z+7, r27	; 0x07
class Serial_ : public Stream
{
private:
	int peek_buffer;
public:
	Serial_() { peek_buffer = -1; };
    31cc:	84 ee       	ldi	r24, 0xE4	; 228
    31ce:	91 e0       	ldi	r25, 0x01	; 1
    31d0:	91 83       	std	Z+1, r25	; 0x01
    31d2:	80 83       	st	Z, r24
    31d4:	8f ef       	ldi	r24, 0xFF	; 255
    31d6:	9f ef       	ldi	r25, 0xFF	; 255
    31d8:	95 87       	std	Z+13, r25	; 0x0d
    31da:	84 87       	std	Z+12, r24	; 0x0c
    31dc:	08 95       	ret

000031de <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    31de:	08 95       	ret

000031e0 <_ZN13PluggableUSB_12getInterfaceEPh>:
		_initEndpoints[lastEp] = node->endpointType[i];
		lastEp++;
	}
	return true;
	// restart USB layer???
}
    31e0:	ef 92       	push	r14
    31e2:	ff 92       	push	r15
    31e4:	0f 93       	push	r16
    31e6:	1f 93       	push	r17
    31e8:	cf 93       	push	r28
    31ea:	df 93       	push	r29
    31ec:	7b 01       	movw	r14, r22
    31ee:	fc 01       	movw	r30, r24
    31f0:	c2 81       	ldd	r28, Z+2	; 0x02
    31f2:	d3 81       	ldd	r29, Z+3	; 0x03
    31f4:	00 e0       	ldi	r16, 0x00	; 0
    31f6:	10 e0       	ldi	r17, 0x00	; 0
    31f8:	20 97       	sbiw	r28, 0x00	; 0
    31fa:	81 f0       	breq	.+32     	; 0x321c <_ZN13PluggableUSB_12getInterfaceEPh+0x3c>
    31fc:	e8 81       	ld	r30, Y
    31fe:	f9 81       	ldd	r31, Y+1	; 0x01
    3200:	02 80       	ldd	r0, Z+2	; 0x02
    3202:	f3 81       	ldd	r31, Z+3	; 0x03
    3204:	e0 2d       	mov	r30, r0
    3206:	b7 01       	movw	r22, r14
    3208:	ce 01       	movw	r24, r28
    320a:	09 95       	icall
    320c:	97 fd       	sbrc	r25, 7
    320e:	08 c0       	rjmp	.+16     	; 0x3220 <_ZN13PluggableUSB_12getInterfaceEPh+0x40>
    3210:	08 0f       	add	r16, r24
    3212:	19 1f       	adc	r17, r25
    3214:	08 84       	ldd	r0, Y+8	; 0x08
    3216:	d9 85       	ldd	r29, Y+9	; 0x09
    3218:	c0 2d       	mov	r28, r0
    321a:	ee cf       	rjmp	.-36     	; 0x31f8 <_ZN13PluggableUSB_12getInterfaceEPh+0x18>
    321c:	c8 01       	movw	r24, r16
    321e:	02 c0       	rjmp	.+4      	; 0x3224 <_ZN13PluggableUSB_12getInterfaceEPh+0x44>
    3220:	8f ef       	ldi	r24, 0xFF	; 255
    3222:	9f ef       	ldi	r25, 0xFF	; 255
    3224:	df 91       	pop	r29
    3226:	cf 91       	pop	r28
    3228:	1f 91       	pop	r17
    322a:	0f 91       	pop	r16
    322c:	ff 90       	pop	r15
    322e:	ef 90       	pop	r14
    3230:	08 95       	ret

00003232 <_ZN13PluggableUSB_13getDescriptorER8USBSetup>:
    3232:	0f 93       	push	r16
    3234:	1f 93       	push	r17
    3236:	cf 93       	push	r28
    3238:	df 93       	push	r29
    323a:	8b 01       	movw	r16, r22
    323c:	fc 01       	movw	r30, r24
    323e:	c2 81       	ldd	r28, Z+2	; 0x02
    3240:	d3 81       	ldd	r29, Z+3	; 0x03
    3242:	20 97       	sbiw	r28, 0x00	; 0
    3244:	71 f0       	breq	.+28     	; 0x3262 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x30>
    3246:	e8 81       	ld	r30, Y
    3248:	f9 81       	ldd	r31, Y+1	; 0x01
    324a:	04 80       	ldd	r0, Z+4	; 0x04
    324c:	f5 81       	ldd	r31, Z+5	; 0x05
    324e:	e0 2d       	mov	r30, r0
    3250:	b8 01       	movw	r22, r16
    3252:	ce 01       	movw	r24, r28
    3254:	09 95       	icall
    3256:	00 97       	sbiw	r24, 0x00	; 0
    3258:	31 f4       	brne	.+12     	; 0x3266 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x34>
    325a:	08 84       	ldd	r0, Y+8	; 0x08
    325c:	d9 85       	ldd	r29, Y+9	; 0x09
    325e:	c0 2d       	mov	r28, r0
    3260:	f0 cf       	rjmp	.-32     	; 0x3242 <_ZN13PluggableUSB_13getDescriptorER8USBSetup+0x10>
    3262:	80 e0       	ldi	r24, 0x00	; 0
    3264:	90 e0       	ldi	r25, 0x00	; 0
    3266:	df 91       	pop	r29
    3268:	cf 91       	pop	r28
    326a:	1f 91       	pop	r17
    326c:	0f 91       	pop	r16
    326e:	08 95       	ret

00003270 <_ZN13PluggableUSB_12getShortNameEPc>:
    3270:	0f 93       	push	r16
    3272:	1f 93       	push	r17
    3274:	cf 93       	push	r28
    3276:	df 93       	push	r29
    3278:	8b 01       	movw	r16, r22
    327a:	fc 01       	movw	r30, r24
    327c:	c2 81       	ldd	r28, Z+2	; 0x02
    327e:	d3 81       	ldd	r29, Z+3	; 0x03
    3280:	20 97       	sbiw	r28, 0x00	; 0
    3282:	71 f0       	breq	.+28     	; 0x32a0 <_ZN13PluggableUSB_12getShortNameEPc+0x30>
    3284:	e8 81       	ld	r30, Y
    3286:	f9 81       	ldd	r31, Y+1	; 0x01
    3288:	06 80       	ldd	r0, Z+6	; 0x06
    328a:	f7 81       	ldd	r31, Z+7	; 0x07
    328c:	e0 2d       	mov	r30, r0
    328e:	b8 01       	movw	r22, r16
    3290:	ce 01       	movw	r24, r28
    3292:	09 95       	icall
    3294:	08 0f       	add	r16, r24
    3296:	11 1d       	adc	r17, r1
    3298:	08 84       	ldd	r0, Y+8	; 0x08
    329a:	d9 85       	ldd	r29, Y+9	; 0x09
    329c:	c0 2d       	mov	r28, r0
    329e:	f0 cf       	rjmp	.-32     	; 0x3280 <_ZN13PluggableUSB_12getShortNameEPc+0x10>
    32a0:	f8 01       	movw	r30, r16
    32a2:	10 82       	st	Z, r1
    32a4:	df 91       	pop	r29
    32a6:	cf 91       	pop	r28
    32a8:	1f 91       	pop	r17
    32aa:	0f 91       	pop	r16
    32ac:	08 95       	ret

000032ae <_ZN13PluggableUSB_5setupER8USBSetup>:
    32ae:	0f 93       	push	r16
    32b0:	1f 93       	push	r17
    32b2:	cf 93       	push	r28
    32b4:	df 93       	push	r29
    32b6:	8b 01       	movw	r16, r22
    32b8:	fc 01       	movw	r30, r24
    32ba:	c2 81       	ldd	r28, Z+2	; 0x02
    32bc:	d3 81       	ldd	r29, Z+3	; 0x03
    32be:	20 97       	sbiw	r28, 0x00	; 0
    32c0:	71 f0       	breq	.+28     	; 0x32de <_ZN13PluggableUSB_5setupER8USBSetup+0x30>
    32c2:	e8 81       	ld	r30, Y
    32c4:	f9 81       	ldd	r31, Y+1	; 0x01
    32c6:	01 90       	ld	r0, Z+
    32c8:	f0 81       	ld	r31, Z
    32ca:	e0 2d       	mov	r30, r0
    32cc:	b8 01       	movw	r22, r16
    32ce:	ce 01       	movw	r24, r28
    32d0:	09 95       	icall
    32d2:	81 11       	cpse	r24, r1
    32d4:	05 c0       	rjmp	.+10     	; 0x32e0 <_ZN13PluggableUSB_5setupER8USBSetup+0x32>
    32d6:	08 84       	ldd	r0, Y+8	; 0x08
    32d8:	d9 85       	ldd	r29, Y+9	; 0x09
    32da:	c0 2d       	mov	r28, r0
    32dc:	f0 cf       	rjmp	.-32     	; 0x32be <_ZN13PluggableUSB_5setupER8USBSetup+0x10>
    32de:	80 e0       	ldi	r24, 0x00	; 0
    32e0:	df 91       	pop	r29
    32e2:	cf 91       	pop	r28
    32e4:	1f 91       	pop	r17
    32e6:	0f 91       	pop	r16
    32e8:	08 95       	ret

000032ea <_Z12PluggableUSBv>:

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    32ea:	80 91 3f 04 	lds	r24, 0x043F	; 0x80043f <_ZGVZ12PluggableUSBvE3obj>
    32ee:	81 11       	cpse	r24, r1
    32f0:	0d c0       	rjmp	.+26     	; 0x330c <_Z12PluggableUSBv+0x22>
	return obj;
}

PluggableUSB_::PluggableUSB_() : lastIf(CDC_ACM_INTERFACE + CDC_INTERFACE_COUNT),
                                 lastEp(CDC_FIRST_ENDPOINT + CDC_ENPOINT_COUNT),
                                 rootNode(NULL)
    32f2:	82 e0       	ldi	r24, 0x02	; 2
    32f4:	80 93 3b 04 	sts	0x043B, r24	; 0x80043b <_ZZ12PluggableUSBvE3obj>
    32f8:	84 e0       	ldi	r24, 0x04	; 4
    32fa:	80 93 3c 04 	sts	0x043C, r24	; 0x80043c <_ZZ12PluggableUSBvE3obj+0x1>
    32fe:	10 92 3e 04 	sts	0x043E, r1	; 0x80043e <_ZZ12PluggableUSBvE3obj+0x3>
    3302:	10 92 3d 04 	sts	0x043D, r1	; 0x80043d <_ZZ12PluggableUSBvE3obj+0x2>
	// restart USB layer???
}

PluggableUSB_& PluggableUSB()
{
	static PluggableUSB_ obj;
    3306:	81 e0       	ldi	r24, 0x01	; 1
    3308:	80 93 3f 04 	sts	0x043F, r24	; 0x80043f <_ZGVZ12PluggableUSBvE3obj>
	return obj;
}
    330c:	8b e3       	ldi	r24, 0x3B	; 59
    330e:	94 e0       	ldi	r25, 0x04	; 4
    3310:	08 95       	ret

00003312 <twi_init>:
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3312:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <twi_state>
    3316:	81 e0       	ldi	r24, 0x01	; 1
    3318:	80 93 b2 04 	sts	0x04B2, r24	; 0x8004b2 <twi_sendStop>
    331c:	10 92 b1 04 	sts	0x04B1, r1	; 0x8004b1 <twi_inRepStart>
    3320:	61 e0       	ldi	r22, 0x01	; 1
    3322:	82 e0       	ldi	r24, 0x02	; 2
    3324:	0e 94 d5 12 	call	0x25aa	; 0x25aa <digitalWrite>
    3328:	61 e0       	ldi	r22, 0x01	; 1
    332a:	83 e0       	ldi	r24, 0x03	; 3
    332c:	0e 94 d5 12 	call	0x25aa	; 0x25aa <digitalWrite>
    3330:	e9 eb       	ldi	r30, 0xB9	; 185
    3332:	f0 e0       	ldi	r31, 0x00	; 0
    3334:	80 81       	ld	r24, Z
    3336:	8e 7f       	andi	r24, 0xFE	; 254
    3338:	80 83       	st	Z, r24
    333a:	80 81       	ld	r24, Z
    333c:	8d 7f       	andi	r24, 0xFD	; 253
    333e:	80 83       	st	Z, r24
    3340:	88 e4       	ldi	r24, 0x48	; 72
    3342:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    3346:	85 e4       	ldi	r24, 0x45	; 69
    3348:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    334c:	08 95       	ret

0000334e <twi_setAddress>:
    334e:	88 0f       	add	r24, r24
    3350:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7e00ba>
    3354:	08 95       	ret

00003356 <twi_transmit>:
    3356:	40 91 69 04 	lds	r20, 0x0469	; 0x800469 <twi_txBufferLength>
    335a:	26 2f       	mov	r18, r22
    335c:	30 e0       	ldi	r19, 0x00	; 0
    335e:	24 0f       	add	r18, r20
    3360:	31 1d       	adc	r19, r1
    3362:	21 32       	cpi	r18, 0x21	; 33
    3364:	31 05       	cpc	r19, r1
    3366:	dc f4       	brge	.+54     	; 0x339e <twi_transmit+0x48>
    3368:	20 91 b4 04 	lds	r18, 0x04B4	; 0x8004b4 <twi_state>
    336c:	24 30       	cpi	r18, 0x04	; 4
    336e:	c9 f4       	brne	.+50     	; 0x33a2 <twi_transmit+0x4c>
    3370:	fc 01       	movw	r30, r24
    3372:	80 e0       	ldi	r24, 0x00	; 0
    3374:	90 e0       	ldi	r25, 0x00	; 0
    3376:	86 17       	cp	r24, r22
    3378:	58 f4       	brcc	.+22     	; 0x3390 <twi_transmit+0x3a>
    337a:	30 91 69 04 	lds	r19, 0x0469	; 0x800469 <twi_txBufferLength>
    337e:	21 91       	ld	r18, Z+
    3380:	dc 01       	movw	r26, r24
    3382:	a5 59       	subi	r26, 0x95	; 149
    3384:	bb 4f       	sbci	r27, 0xFB	; 251
    3386:	a3 0f       	add	r26, r19
    3388:	b1 1d       	adc	r27, r1
    338a:	2c 93       	st	X, r18
    338c:	01 96       	adiw	r24, 0x01	; 1
    338e:	f3 cf       	rjmp	.-26     	; 0x3376 <twi_transmit+0x20>
    3390:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <twi_txBufferLength>
    3394:	68 0f       	add	r22, r24
    3396:	60 93 69 04 	sts	0x0469, r22	; 0x800469 <twi_txBufferLength>
    339a:	80 e0       	ldi	r24, 0x00	; 0
    339c:	08 95       	ret
    339e:	81 e0       	ldi	r24, 0x01	; 1
    33a0:	08 95       	ret
    33a2:	82 e0       	ldi	r24, 0x02	; 2
    33a4:	08 95       	ret

000033a6 <twi_attachSlaveRxEvent>:
    33a6:	90 93 ae 04 	sts	0x04AE, r25	; 0x8004ae <twi_onSlaveReceive+0x1>
    33aa:	80 93 ad 04 	sts	0x04AD, r24	; 0x8004ad <twi_onSlaveReceive>
    33ae:	08 95       	ret

000033b0 <twi_attachSlaveTxEvent>:
    33b0:	90 93 b0 04 	sts	0x04B0, r25	; 0x8004b0 <twi_onSlaveTransmit+0x1>
    33b4:	80 93 af 04 	sts	0x04AF, r24	; 0x8004af <twi_onSlaveTransmit>
    33b8:	08 95       	ret

000033ba <twi_stop>:
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    33ba:	85 ed       	ldi	r24, 0xD5	; 213
    33bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    33c0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    33c4:	84 fd       	sbrc	r24, 4
    33c6:	fc cf       	rjmp	.-8      	; 0x33c0 <twi_stop+0x6>
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    33c8:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <twi_state>
    33cc:	08 95       	ret

000033ce <twi_releaseBus>:
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    33ce:	85 ec       	ldi	r24, 0xC5	; 197
    33d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

  // update twi state
  twi_state = TWI_READY;
    33d4:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <twi_state>
    33d8:	08 95       	ret

000033da <__vector_36>:
}

ISR(TWI_vect)
{
    33da:	1f 92       	push	r1
    33dc:	0f 92       	push	r0
    33de:	0f b6       	in	r0, 0x3f	; 63
    33e0:	0f 92       	push	r0
    33e2:	11 24       	eor	r1, r1
    33e4:	2f 93       	push	r18
    33e6:	3f 93       	push	r19
    33e8:	4f 93       	push	r20
    33ea:	5f 93       	push	r21
    33ec:	6f 93       	push	r22
    33ee:	7f 93       	push	r23
    33f0:	8f 93       	push	r24
    33f2:	9f 93       	push	r25
    33f4:	af 93       	push	r26
    33f6:	bf 93       	push	r27
    33f8:	ef 93       	push	r30
    33fa:	ff 93       	push	r31
  switch(TW_STATUS){
    33fc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    3400:	88 7f       	andi	r24, 0xF8	; 248
    3402:	80 36       	cpi	r24, 0x60	; 96
    3404:	09 f4       	brne	.+2      	; 0x3408 <__vector_36+0x2e>
    3406:	9e c0       	rjmp	.+316    	; 0x3544 <__vector_36+0x16a>
    3408:	78 f5       	brcc	.+94     	; 0x3468 <__vector_36+0x8e>
    340a:	88 32       	cpi	r24, 0x28	; 40
    340c:	09 f4       	brne	.+2      	; 0x3410 <__vector_36+0x36>
    340e:	5d c0       	rjmp	.+186    	; 0x34ca <__vector_36+0xf0>
    3410:	90 f4       	brcc	.+36     	; 0x3436 <__vector_36+0x5c>
    3412:	80 31       	cpi	r24, 0x10	; 16
    3414:	09 f4       	brne	.+2      	; 0x3418 <__vector_36+0x3e>
    3416:	56 c0       	rjmp	.+172    	; 0x34c4 <__vector_36+0xea>
    3418:	38 f4       	brcc	.+14     	; 0x3428 <__vector_36+0x4e>
    341a:	88 23       	and	r24, r24
    341c:	09 f4       	brne	.+2      	; 0x3420 <__vector_36+0x46>
    341e:	f5 c0       	rjmp	.+490    	; 0x360a <__vector_36+0x230>
    3420:	88 30       	cpi	r24, 0x08	; 8
    3422:	09 f4       	brne	.+2      	; 0x3426 <__vector_36+0x4c>
    3424:	4f c0       	rjmp	.+158    	; 0x34c4 <__vector_36+0xea>
    3426:	f5 c0       	rjmp	.+490    	; 0x3612 <__vector_36+0x238>
    3428:	88 31       	cpi	r24, 0x18	; 24
    342a:	09 f4       	brne	.+2      	; 0x342e <__vector_36+0x54>
    342c:	4e c0       	rjmp	.+156    	; 0x34ca <__vector_36+0xf0>
    342e:	80 32       	cpi	r24, 0x20	; 32
    3430:	09 f4       	brne	.+2      	; 0x3434 <__vector_36+0x5a>
    3432:	5f c0       	rjmp	.+190    	; 0x34f2 <__vector_36+0x118>
    3434:	ee c0       	rjmp	.+476    	; 0x3612 <__vector_36+0x238>
    3436:	80 34       	cpi	r24, 0x40	; 64
    3438:	09 f4       	brne	.+2      	; 0x343c <__vector_36+0x62>
    343a:	6a c0       	rjmp	.+212    	; 0x3510 <__vector_36+0x136>
    343c:	58 f4       	brcc	.+22     	; 0x3454 <__vector_36+0x7a>
    343e:	80 33       	cpi	r24, 0x30	; 48
    3440:	09 f4       	brne	.+2      	; 0x3444 <__vector_36+0x6a>
    3442:	57 c0       	rjmp	.+174    	; 0x34f2 <__vector_36+0x118>
    3444:	88 33       	cpi	r24, 0x38	; 56
    3446:	09 f0       	breq	.+2      	; 0x344a <__vector_36+0x70>
    3448:	e4 c0       	rjmp	.+456    	; 0x3612 <__vector_36+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    344a:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <twi_error>
      twi_releaseBus();
    344e:	0e 94 e7 19 	call	0x33ce	; 0x33ce <twi_releaseBus>
      break;
    3452:	df c0       	rjmp	.+446    	; 0x3612 <__vector_36+0x238>
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    3454:	80 35       	cpi	r24, 0x50	; 80
    3456:	09 f4       	brne	.+2      	; 0x345a <__vector_36+0x80>
    3458:	4f c0       	rjmp	.+158    	; 0x34f8 <__vector_36+0x11e>
    345a:	88 35       	cpi	r24, 0x58	; 88
    345c:	09 f4       	brne	.+2      	; 0x3460 <__vector_36+0x86>
    345e:	5d c0       	rjmp	.+186    	; 0x351a <__vector_36+0x140>
    3460:	88 34       	cpi	r24, 0x48	; 72
    3462:	09 f0       	breq	.+2      	; 0x3466 <__vector_36+0x8c>
    3464:	d6 c0       	rjmp	.+428    	; 0x3612 <__vector_36+0x238>
    3466:	d3 c0       	rjmp	.+422    	; 0x360e <__vector_36+0x234>
    3468:	88 39       	cpi	r24, 0x98	; 152
    346a:	09 f4       	brne	.+2      	; 0x346e <__vector_36+0x94>
    346c:	c4 c0       	rjmp	.+392    	; 0x35f6 <__vector_36+0x21c>
    346e:	a8 f4       	brcc	.+42     	; 0x349a <__vector_36+0xc0>
    3470:	88 37       	cpi	r24, 0x78	; 120
    3472:	09 f4       	brne	.+2      	; 0x3476 <__vector_36+0x9c>
    3474:	67 c0       	rjmp	.+206    	; 0x3544 <__vector_36+0x16a>
    3476:	38 f4       	brcc	.+14     	; 0x3486 <__vector_36+0xac>
    3478:	88 36       	cpi	r24, 0x68	; 104
    347a:	09 f4       	brne	.+2      	; 0x347e <__vector_36+0xa4>
    347c:	63 c0       	rjmp	.+198    	; 0x3544 <__vector_36+0x16a>
    347e:	80 37       	cpi	r24, 0x70	; 112
    3480:	09 f4       	brne	.+2      	; 0x3484 <__vector_36+0xaa>
    3482:	60 c0       	rjmp	.+192    	; 0x3544 <__vector_36+0x16a>
    3484:	c6 c0       	rjmp	.+396    	; 0x3612 <__vector_36+0x238>
    3486:	88 38       	cpi	r24, 0x88	; 136
    3488:	09 f4       	brne	.+2      	; 0x348c <__vector_36+0xb2>
    348a:	b5 c0       	rjmp	.+362    	; 0x35f6 <__vector_36+0x21c>
    348c:	80 39       	cpi	r24, 0x90	; 144
    348e:	09 f4       	brne	.+2      	; 0x3492 <__vector_36+0xb8>
    3490:	5f c0       	rjmp	.+190    	; 0x3550 <__vector_36+0x176>
    3492:	80 38       	cpi	r24, 0x80	; 128
    3494:	09 f0       	breq	.+2      	; 0x3498 <__vector_36+0xbe>
    3496:	bd c0       	rjmp	.+378    	; 0x3612 <__vector_36+0x238>
    3498:	5b c0       	rjmp	.+182    	; 0x3550 <__vector_36+0x176>
    349a:	80 3b       	cpi	r24, 0xB0	; 176
    349c:	09 f4       	brne	.+2      	; 0x34a0 <__vector_36+0xc6>
    349e:	83 c0       	rjmp	.+262    	; 0x35a6 <__vector_36+0x1cc>
    34a0:	38 f4       	brcc	.+14     	; 0x34b0 <__vector_36+0xd6>
    34a2:	80 3a       	cpi	r24, 0xA0	; 160
    34a4:	09 f4       	brne	.+2      	; 0x34a8 <__vector_36+0xce>
    34a6:	66 c0       	rjmp	.+204    	; 0x3574 <__vector_36+0x19a>
    34a8:	88 3a       	cpi	r24, 0xA8	; 168
    34aa:	09 f4       	brne	.+2      	; 0x34ae <__vector_36+0xd4>
    34ac:	7c c0       	rjmp	.+248    	; 0x35a6 <__vector_36+0x1cc>
    34ae:	b1 c0       	rjmp	.+354    	; 0x3612 <__vector_36+0x238>
    34b0:	80 3c       	cpi	r24, 0xC0	; 192
    34b2:	09 f4       	brne	.+2      	; 0x34b6 <__vector_36+0xdc>
    34b4:	a4 c0       	rjmp	.+328    	; 0x35fe <__vector_36+0x224>
    34b6:	88 3c       	cpi	r24, 0xC8	; 200
    34b8:	09 f4       	brne	.+2      	; 0x34bc <__vector_36+0xe2>
    34ba:	a1 c0       	rjmp	.+322    	; 0x35fe <__vector_36+0x224>
    34bc:	88 3b       	cpi	r24, 0xB8	; 184
    34be:	09 f4       	brne	.+2      	; 0x34c2 <__vector_36+0xe8>
    34c0:	87 c0       	rjmp	.+270    	; 0x35d0 <__vector_36+0x1f6>
    34c2:	a7 c0       	rjmp	.+334    	; 0x3612 <__vector_36+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    34c4:	80 91 b3 04 	lds	r24, 0x04B3	; 0x8004b3 <twi_slarw>
    34c8:	10 c0       	rjmp	.+32     	; 0x34ea <__vector_36+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    34ca:	90 91 8c 04 	lds	r25, 0x048C	; 0x80048c <twi_masterBufferIndex>
    34ce:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <twi_masterBufferLength>
    34d2:	98 17       	cp	r25, r24
    34d4:	70 f5       	brcc	.+92     	; 0x3532 <__vector_36+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    34d6:	e0 91 8c 04 	lds	r30, 0x048C	; 0x80048c <twi_masterBufferIndex>
    34da:	81 e0       	ldi	r24, 0x01	; 1
    34dc:	8e 0f       	add	r24, r30
    34de:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <twi_masterBufferIndex>
    34e2:	f0 e0       	ldi	r31, 0x00	; 0
    34e4:	e3 57       	subi	r30, 0x73	; 115
    34e6:	fb 4f       	sbci	r31, 0xFB	; 251
    34e8:	80 81       	ld	r24, Z
    34ea:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    34ee:	85 ec       	ldi	r24, 0xC5	; 197
    34f0:	83 c0       	rjmp	.+262    	; 0x35f8 <__vector_36+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    34f2:	80 93 47 04 	sts	0x0447, r24	; 0x800447 <twi_error>
    34f6:	8b c0       	rjmp	.+278    	; 0x360e <__vector_36+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    34f8:	e0 91 8c 04 	lds	r30, 0x048C	; 0x80048c <twi_masterBufferIndex>
    34fc:	81 e0       	ldi	r24, 0x01	; 1
    34fe:	8e 0f       	add	r24, r30
    3500:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <twi_masterBufferIndex>
    3504:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    3508:	f0 e0       	ldi	r31, 0x00	; 0
    350a:	e3 57       	subi	r30, 0x73	; 115
    350c:	fb 4f       	sbci	r31, 0xFB	; 251
    350e:	80 83       	st	Z, r24
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3510:	90 91 8c 04 	lds	r25, 0x048C	; 0x80048c <twi_masterBufferIndex>
    3514:	80 91 8b 04 	lds	r24, 0x048B	; 0x80048b <twi_masterBufferLength>
    3518:	6b c0       	rjmp	.+214    	; 0x35f0 <__vector_36+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    351a:	e0 91 8c 04 	lds	r30, 0x048C	; 0x80048c <twi_masterBufferIndex>
    351e:	81 e0       	ldi	r24, 0x01	; 1
    3520:	8e 0f       	add	r24, r30
    3522:	80 93 8c 04 	sts	0x048C, r24	; 0x80048c <twi_masterBufferIndex>
    3526:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    352a:	f0 e0       	ldi	r31, 0x00	; 0
    352c:	e3 57       	subi	r30, 0x73	; 115
    352e:	fb 4f       	sbci	r31, 0xFB	; 251
    3530:	80 83       	st	Z, r24
	if (twi_sendStop)
    3532:	80 91 b2 04 	lds	r24, 0x04B2	; 0x8004b2 <twi_sendStop>
    3536:	81 11       	cpse	r24, r1
    3538:	6a c0       	rjmp	.+212    	; 0x360e <__vector_36+0x234>
          twi_stop();
	else {
	  twi_inRepStart = true;	// we're gonna send the START
    353a:	81 e0       	ldi	r24, 0x01	; 1
    353c:	80 93 b1 04 	sts	0x04B1, r24	; 0x8004b1 <twi_inRepStart>
	  // don't enable the interrupt. We'll generate the start, but we 
	  // avoid handling the interrupt until we're in the next transaction,
	  // at the point where we would normally issue the start.
	  TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    3540:	84 ea       	ldi	r24, 0xA4	; 164
    3542:	5e c0       	rjmp	.+188    	; 0x3600 <__vector_36+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    3544:	83 e0       	ldi	r24, 0x03	; 3
    3546:	80 93 b4 04 	sts	0x04B4, r24	; 0x8004b4 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    354a:	10 92 48 04 	sts	0x0448, r1	; 0x800448 <twi_rxBufferIndex>
    354e:	cf cf       	rjmp	.-98     	; 0x34ee <__vector_36+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    3550:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <twi_rxBufferIndex>
    3554:	80 32       	cpi	r24, 0x20	; 32
    3556:	08 f0       	brcs	.+2      	; 0x355a <__vector_36+0x180>
    3558:	4e c0       	rjmp	.+156    	; 0x35f6 <__vector_36+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    355a:	e0 91 48 04 	lds	r30, 0x0448	; 0x800448 <twi_rxBufferIndex>
    355e:	81 e0       	ldi	r24, 0x01	; 1
    3560:	8e 0f       	add	r24, r30
    3562:	80 93 48 04 	sts	0x0448, r24	; 0x800448 <twi_rxBufferIndex>
    3566:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    356a:	f0 e0       	ldi	r31, 0x00	; 0
    356c:	e7 5b       	subi	r30, 0xB7	; 183
    356e:	fb 4f       	sbci	r31, 0xFB	; 251
    3570:	80 83       	st	Z, r24
    3572:	bd cf       	rjmp	.-134    	; 0x34ee <__vector_36+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    3574:	0e 94 e7 19 	call	0x33ce	; 0x33ce <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    3578:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <twi_rxBufferIndex>
    357c:	80 32       	cpi	r24, 0x20	; 32
    357e:	30 f4       	brcc	.+12     	; 0x358c <__vector_36+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    3580:	e0 91 48 04 	lds	r30, 0x0448	; 0x800448 <twi_rxBufferIndex>
    3584:	f0 e0       	ldi	r31, 0x00	; 0
    3586:	e7 5b       	subi	r30, 0xB7	; 183
    3588:	fb 4f       	sbci	r31, 0xFB	; 251
    358a:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    358c:	60 91 48 04 	lds	r22, 0x0448	; 0x800448 <twi_rxBufferIndex>
    3590:	70 e0       	ldi	r23, 0x00	; 0
    3592:	e0 91 ad 04 	lds	r30, 0x04AD	; 0x8004ad <twi_onSlaveReceive>
    3596:	f0 91 ae 04 	lds	r31, 0x04AE	; 0x8004ae <twi_onSlaveReceive+0x1>
    359a:	89 e4       	ldi	r24, 0x49	; 73
    359c:	94 e0       	ldi	r25, 0x04	; 4
    359e:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    35a0:	10 92 48 04 	sts	0x0448, r1	; 0x800448 <twi_rxBufferIndex>
      break;
    35a4:	36 c0       	rjmp	.+108    	; 0x3612 <__vector_36+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    35a6:	84 e0       	ldi	r24, 0x04	; 4
    35a8:	80 93 b4 04 	sts	0x04B4, r24	; 0x8004b4 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    35ac:	10 92 6a 04 	sts	0x046A, r1	; 0x80046a <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    35b0:	10 92 69 04 	sts	0x0469, r1	; 0x800469 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    35b4:	e0 91 af 04 	lds	r30, 0x04AF	; 0x8004af <twi_onSlaveTransmit>
    35b8:	f0 91 b0 04 	lds	r31, 0x04B0	; 0x8004b0 <twi_onSlaveTransmit+0x1>
    35bc:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    35be:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <twi_txBufferLength>
    35c2:	81 11       	cpse	r24, r1
    35c4:	05 c0       	rjmp	.+10     	; 0x35d0 <__vector_36+0x1f6>
        twi_txBufferLength = 1;
    35c6:	81 e0       	ldi	r24, 0x01	; 1
    35c8:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    35cc:	10 92 6b 04 	sts	0x046B, r1	; 0x80046b <twi_txBuffer>
      }
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    35d0:	e0 91 6a 04 	lds	r30, 0x046A	; 0x80046a <twi_txBufferIndex>
    35d4:	81 e0       	ldi	r24, 0x01	; 1
    35d6:	8e 0f       	add	r24, r30
    35d8:	80 93 6a 04 	sts	0x046A, r24	; 0x80046a <twi_txBufferIndex>
    35dc:	f0 e0       	ldi	r31, 0x00	; 0
    35de:	e5 59       	subi	r30, 0x95	; 149
    35e0:	fb 4f       	sbci	r31, 0xFB	; 251
    35e2:	80 81       	ld	r24, Z
    35e4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    35e8:	90 91 6a 04 	lds	r25, 0x046A	; 0x80046a <twi_txBufferIndex>
    35ec:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <twi_txBufferLength>
    35f0:	98 17       	cp	r25, r24
    35f2:	08 f4       	brcc	.+2      	; 0x35f6 <__vector_36+0x21c>
    35f4:	7c cf       	rjmp	.-264    	; 0x34ee <__vector_36+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
	  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    35f6:	85 e8       	ldi	r24, 0x85	; 133
    35f8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    35fc:	0a c0       	rjmp	.+20     	; 0x3612 <__vector_36+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    35fe:	85 ec       	ldi	r24, 0xC5	; 197
    3600:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    3604:	10 92 b4 04 	sts	0x04B4, r1	; 0x8004b4 <twi_state>
      break;
    3608:	04 c0       	rjmp	.+8      	; 0x3612 <__vector_36+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    360a:	10 92 47 04 	sts	0x0447, r1	; 0x800447 <twi_error>
      twi_stop();
    360e:	0e 94 dd 19 	call	0x33ba	; 0x33ba <twi_stop>
      break;
  }
}
    3612:	ff 91       	pop	r31
    3614:	ef 91       	pop	r30
    3616:	bf 91       	pop	r27
    3618:	af 91       	pop	r26
    361a:	9f 91       	pop	r25
    361c:	8f 91       	pop	r24
    361e:	7f 91       	pop	r23
    3620:	6f 91       	pop	r22
    3622:	5f 91       	pop	r21
    3624:	4f 91       	pop	r20
    3626:	3f 91       	pop	r19
    3628:	2f 91       	pop	r18
    362a:	0f 90       	pop	r0
    362c:	0f be       	out	0x3f, r0	; 63
    362e:	0f 90       	pop	r0
    3630:	1f 90       	pop	r1
    3632:	18 95       	reti

00003634 <__udivmodsi4>:
    3634:	a1 e2       	ldi	r26, 0x21	; 33
    3636:	1a 2e       	mov	r1, r26
    3638:	aa 1b       	sub	r26, r26
    363a:	bb 1b       	sub	r27, r27
    363c:	fd 01       	movw	r30, r26
    363e:	0d c0       	rjmp	.+26     	; 0x365a <__udivmodsi4_ep>

00003640 <__udivmodsi4_loop>:
    3640:	aa 1f       	adc	r26, r26
    3642:	bb 1f       	adc	r27, r27
    3644:	ee 1f       	adc	r30, r30
    3646:	ff 1f       	adc	r31, r31
    3648:	a2 17       	cp	r26, r18
    364a:	b3 07       	cpc	r27, r19
    364c:	e4 07       	cpc	r30, r20
    364e:	f5 07       	cpc	r31, r21
    3650:	20 f0       	brcs	.+8      	; 0x365a <__udivmodsi4_ep>
    3652:	a2 1b       	sub	r26, r18
    3654:	b3 0b       	sbc	r27, r19
    3656:	e4 0b       	sbc	r30, r20
    3658:	f5 0b       	sbc	r31, r21

0000365a <__udivmodsi4_ep>:
    365a:	66 1f       	adc	r22, r22
    365c:	77 1f       	adc	r23, r23
    365e:	88 1f       	adc	r24, r24
    3660:	99 1f       	adc	r25, r25
    3662:	1a 94       	dec	r1
    3664:	69 f7       	brne	.-38     	; 0x3640 <__udivmodsi4_loop>
    3666:	60 95       	com	r22
    3668:	70 95       	com	r23
    366a:	80 95       	com	r24
    366c:	90 95       	com	r25
    366e:	9b 01       	movw	r18, r22
    3670:	ac 01       	movw	r20, r24
    3672:	bd 01       	movw	r22, r26
    3674:	cf 01       	movw	r24, r30
    3676:	08 95       	ret

00003678 <__tablejump2__>:
    3678:	ee 0f       	add	r30, r30
    367a:	ff 1f       	adc	r31, r31
    367c:	05 90       	lpm	r0, Z+
    367e:	f4 91       	lpm	r31, Z
    3680:	e0 2d       	mov	r30, r0
    3682:	09 94       	ijmp

00003684 <_exit>:
    3684:	f8 94       	cli

00003686 <__stop_program>:
    3686:	ff cf       	rjmp	.-2      	; 0x3686 <__stop_program>
