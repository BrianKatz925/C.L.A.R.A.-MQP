
C:\Users\katel\AppData\Local\Temp\arduino_build_860873/SAMI_nonreversed.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__ctors_end>
       4:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
       8:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
       c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      10:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      14:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      18:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      1c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      20:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      24:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      28:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      2c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      30:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      34:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      38:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      3c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      40:	0c 94 0d 08 	jmp	0x101a	; 0x101a <__vector_16>
      44:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      48:	0c 94 20 0a 	jmp	0x1440	; 0x1440 <__vector_18>
      4c:	0c 94 52 0a 	jmp	0x14a4	; 0x14a4 <__vector_19>
      50:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      54:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      58:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      5c:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>
      60:	0c 94 bd 04 	jmp	0x97a	; 0x97a <__vector_24>
      64:	0c 94 91 00 	jmp	0x122	; 0x122 <__bad_interrupt>

00000068 <__trampolines_end>:
__trampolines_start():
      68:	00 00       	nop
      6a:	00 09       	sbc	r16, r0
      6c:	00 03       	mulsu	r16, r16
      6e:	02 00       	.word	0x0002	; ????
      70:	00 04       	cpc	r0, r0
      72:	05 08       	sbc	r0, r5
	...

0000007f <digital_pin_to_bit_mask_PGM>:
      7f:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      8f:	04 08 10 20 40 80 40                                ... @.@

00000096 <digital_pin_to_port_PGM>:
      96:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      a6:	03 03 03 03 02 02 03                                .......

000000ad <port_to_input_PGM>:
      ad:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000000b7 <port_to_output_PGM>:
      b7:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000000c1 <port_to_mode_PGM>:
      c1:	00 00 00 00 24 00 27 00 2a 00 00                    ....$.'.*..

000000cc <__ctors_start>:
__ctors_start():
      cc:	2c 03       	fmul	r18, r20
      ce:	49 04       	cpc	r4, r9
      d0:	82 0a       	sbc	r8, r18

000000d2 <__ctors_end>:
__dtors_end():
      d2:	11 24       	eor	r1, r1
      d4:	1f be       	out	0x3f, r1	; 63
      d6:	cf ef       	ldi	r28, 0xFF	; 255
      d8:	d8 e0       	ldi	r29, 0x08	; 8
      da:	de bf       	out	0x3e, r29	; 62
      dc:	cd bf       	out	0x3d, r28	; 61

000000de <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
      de:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
      e0:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
      e2:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
      e4:	e2 e3       	ldi	r30, 0x32	; 50
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
      e6:	f5 e2       	ldi	r31, 0x25	; 37
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
      e8:	02 c0       	rjmp	.+4      	; 0xee <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
      ea:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
      ec:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
      ee:	a2 35       	cpi	r26, 0x52	; 82
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
      f0:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
      f2:	d9 f7       	brne	.-10     	; 0xea <__do_copy_data+0xc>

000000f4 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
      f4:	23 e0       	ldi	r18, 0x03	; 3
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
      f6:	a2 e5       	ldi	r26, 0x52	; 82
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
      f8:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
      fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
      fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
      fe:	a6 31       	cpi	r26, 0x16	; 22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     100:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>

00000104 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     104:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     106:	c9 e6       	ldi	r28, 0x69	; 105
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     108:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     10a:	04 c0       	rjmp	.+8      	; 0x114 <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     10c:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     10e:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     110:	0e 94 5f 10 	call	0x20be	; 0x20be <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     114:	c6 36       	cpi	r28, 0x66	; 102
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     116:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     118:	c9 f7       	brne	.-14     	; 0x10c <__do_global_ctors+0x8>
     11a:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <main>
     11e:	0c 94 97 12 	jmp	0x252e	; 0x252e <_exit>

00000122 <__bad_interrupt>:
__vector_22():
     122:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000126 <setup>:
setup():
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:260

void homeCables(float currentthreshold) {
  if (motorCurrent >= currentthreshold) {
    reverse(150);
  }
}
     126:	cf 92       	push	r12
     128:	df 92       	push	r13
     12a:	ef 92       	push	r14
     12c:	ff 92       	push	r15
     12e:	0f 93       	push	r16
     130:	1f 93       	push	r17
     132:	60 91 08 01 	lds	r22, 0x0108	; 0x800108 <address>
     136:	89 ea       	ldi	r24, 0xA9	; 169
     138:	91 e0       	ldi	r25, 0x01	; 1
     13a:	0e 94 37 04 	call	0x86e	; 0x86e <TwoWire::begin(unsigned char)>
     13e:	60 e0       	ldi	r22, 0x00	; 0
     140:	81 e1       	ldi	r24, 0x11	; 17
     142:	0e 94 8d 09 	call	0x131a	; 0x131a <pinMode>
     146:	60 e0       	ldi	r22, 0x00	; 0
     148:	82 e0       	ldi	r24, 0x02	; 2
     14a:	0e 94 8d 09 	call	0x131a	; 0x131a <pinMode>
     14e:	60 e0       	ldi	r22, 0x00	; 0
     150:	83 e0       	ldi	r24, 0x03	; 3
     152:	0e 94 8d 09 	call	0x131a	; 0x131a <pinMode>
     156:	60 e3       	ldi	r22, 0x30	; 48
     158:	73 e0       	ldi	r23, 0x03	; 3
     15a:	89 ea       	ldi	r24, 0xA9	; 169
     15c:	91 e0       	ldi	r25, 0x01	; 1
     15e:	0e 94 44 04 	call	0x888	; 0x888 <TwoWire::onRequest(void (*)())>
     162:	6f e4       	ldi	r22, 0x4F	; 79
     164:	73 e0       	ldi	r23, 0x03	; 3
     166:	89 ea       	ldi	r24, 0xA9	; 169
     168:	91 e0       	ldi	r25, 0x01	; 1
     16a:	0e 94 3f 04 	call	0x87e	; 0x87e <TwoWire::onReceive(void (*)(int))>
     16e:	61 e0       	ldi	r22, 0x01	; 1
     170:	85 e0       	ldi	r24, 0x05	; 5
     172:	0e 94 c9 09 	call	0x1392	; 0x1392 <digitalWrite>
     176:	8f e6       	ldi	r24, 0x6F	; 111
     178:	91 e0       	ldi	r25, 0x01	; 1
     17a:	0e 94 de 05 	call	0xbbc	; 0xbbc <PIDController::begin()>
     17e:	8f e6       	ldi	r24, 0x6F	; 111
     180:	c8 2e       	mov	r12, r24
     182:	82 e1       	ldi	r24, 0x12	; 18
     184:	d8 2e       	mov	r13, r24
     186:	83 e0       	ldi	r24, 0x03	; 3
     188:	e8 2e       	mov	r14, r24
     18a:	8a e3       	ldi	r24, 0x3A	; 58
     18c:	f8 2e       	mov	r15, r24
     18e:	0d ec       	ldi	r16, 0xCD	; 205
     190:	1c ec       	ldi	r17, 0xCC	; 204
     192:	2c ec       	ldi	r18, 0xCC	; 204
     194:	3d e3       	ldi	r19, 0x3D	; 61
     196:	40 e0       	ldi	r20, 0x00	; 0
     198:	50 e0       	ldi	r21, 0x00	; 0
     19a:	60 e8       	ldi	r22, 0x80	; 128
     19c:	7f e3       	ldi	r23, 0x3F	; 63
     19e:	8f e6       	ldi	r24, 0x6F	; 111
     1a0:	91 e0       	ldi	r25, 0x01	; 1
     1a2:	0e 94 01 06 	call	0xc02	; 0xc02 <PIDController::tune(double, double, double)>
     1a6:	00 e0       	ldi	r16, 0x00	; 0
     1a8:	10 e0       	ldi	r17, 0x00	; 0
     1aa:	2f e7       	ldi	r18, 0x7F	; 127
     1ac:	33 e4       	ldi	r19, 0x43	; 67
     1ae:	40 e0       	ldi	r20, 0x00	; 0
     1b0:	50 e0       	ldi	r21, 0x00	; 0
     1b2:	ba 01       	movw	r22, r20
     1b4:	8f e6       	ldi	r24, 0x6F	; 111
     1b6:	91 e0       	ldi	r25, 0x01	; 1
     1b8:	0e 94 4e 06 	call	0xc9c	; 0xc9c <PIDController::limit(double, double)>
     1bc:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <address>
     1c0:	84 50       	subi	r24, 0x04	; 4
     1c2:	83 30       	cpi	r24, 0x03	; 3
     1c4:	30 f4       	brcc	.+12     	; 0x1d2 <setup+0xac>
     1c6:	86 e9       	ldi	r24, 0x96	; 150
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <fastSpeed+0x1>
     1ce:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <fastSpeed>
     1d2:	1f 91       	pop	r17
     1d4:	0f 91       	pop	r16
     1d6:	ff 90       	pop	r15
     1d8:	ef 90       	pop	r14
     1da:	df 90       	pop	r13
     1dc:	cf 90       	pop	r12
     1de:	08 95       	ret

000001e0 <readCurrent()>:
_Z11readCurrentv():
     1e0:	81 e1       	ldi	r24, 0x11	; 17
     1e2:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <analogRead>
     1e6:	bc 01       	movw	r22, r24
     1e8:	99 0f       	add	r25, r25
     1ea:	88 0b       	sbc	r24, r24
     1ec:	99 0b       	sbc	r25, r25
     1ee:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <__floatsisf>
     1f2:	60 93 6b 01 	sts	0x016B, r22	; 0x80016b <motorCurrent>
     1f6:	70 93 6c 01 	sts	0x016C, r23	; 0x80016c <motorCurrent+0x1>
     1fa:	80 93 6d 01 	sts	0x016D, r24	; 0x80016d <motorCurrent+0x2>
     1fe:	90 93 6e 01 	sts	0x016E, r25	; 0x80016e <motorCurrent+0x3>
     202:	20 e0       	ldi	r18, 0x00	; 0
     204:	30 e0       	ldi	r19, 0x00	; 0
     206:	a9 01       	movw	r20, r18
     208:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <__gesf2>
     20c:	18 16       	cp	r1, r24
     20e:	24 f4       	brge	.+8      	; 0x218 <readCurrent()+0x38>
     210:	81 e0       	ldi	r24, 0x01	; 1
     212:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <motorstalled>
     216:	08 95       	ret
     218:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <motorstalled>
     21c:	08 95       	ret

0000021e <forward(int)>:
_Z7forwardi():
     21e:	cf 93       	push	r28
     220:	df 93       	push	r29
     222:	ec 01       	movw	r28, r24
     224:	70 e0       	ldi	r23, 0x00	; 0
     226:	60 e0       	ldi	r22, 0x00	; 0
     228:	89 e0       	ldi	r24, 0x09	; 9
     22a:	0e 94 07 09 	call	0x120e	; 0x120e <analogWrite>
     22e:	be 01       	movw	r22, r28
     230:	8a e0       	ldi	r24, 0x0A	; 10
     232:	df 91       	pop	r29
     234:	cf 91       	pop	r28
     236:	0c 94 07 09 	jmp	0x120e	; 0x120e <analogWrite>

0000023a <reverse(int)>:
_Z7reversei():
     23a:	bc 01       	movw	r22, r24
     23c:	89 e0       	ldi	r24, 0x09	; 9
     23e:	0e 94 07 09 	call	0x120e	; 0x120e <analogWrite>
     242:	70 e0       	ldi	r23, 0x00	; 0
     244:	60 e0       	ldi	r22, 0x00	; 0
     246:	8a e0       	ldi	r24, 0x0A	; 10
     248:	0c 94 07 09 	jmp	0x120e	; 0x120e <analogWrite>

0000024c <brake()>:
_Z5brakev():
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:277
  analogWrite(INPUT1, speed);
  analogWrite(INPUT2, 0);
}

void brake() {
  analogWrite(INPUT1, 255);
     24c:	6f ef       	ldi	r22, 0xFF	; 255
     24e:	70 e0       	ldi	r23, 0x00	; 0
     250:	89 e0       	ldi	r24, 0x09	; 9
     252:	0e 94 07 09 	call	0x120e	; 0x120e <analogWrite>
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:278
  analogWrite(INPUT2, 255);
     256:	6f ef       	ldi	r22, 0xFF	; 255
     258:	70 e0       	ldi	r23, 0x00	; 0
     25a:	8a e0       	ldi	r24, 0x0A	; 10
     25c:	0c 94 07 09 	jmp	0x120e	; 0x120e <analogWrite>

00000260 <loop>:
loop():
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:104
int lastcount = 0;
float motSpeed;
int countdiff = 0;
int calcSpeedPID = 0;
int Ngear = 150;
void loop() {
     260:	8f 92       	push	r8
     262:	9f 92       	push	r9
     264:	af 92       	push	r10
     266:	bf 92       	push	r11
     268:	cf 92       	push	r12
     26a:	df 92       	push	r13
     26c:	ef 92       	push	r14
     26e:	ff 92       	push	r15
     270:	0f 93       	push	r16
     272:	1f 93       	push	r17
     274:	cf 93       	push	r28
     276:	df 93       	push	r29
     278:	cd b7       	in	r28, 0x3d	; 61
     27a:	de b7       	in	r29, 0x3e	; 62
     27c:	2c 97       	sbiw	r28, 0x0c	; 12
     27e:	0f b6       	in	r0, 0x3f	; 63
     280:	f8 94       	cli
     282:	de bf       	out	0x3e, r29	; 62
     284:	0f be       	out	0x3f, r0	; 63
     286:	cd bf       	out	0x3d, r28	; 61
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:106

  if ((millis() - lastTime) >= 20) { //if 20 ms passed since the last reading, read the current
     288:	0e 94 57 08 	call	0x10ae	; 0x10ae <millis>
     28c:	00 91 68 01 	lds	r16, 0x0168	; 0x800168 <lastTime>
     290:	10 91 69 01 	lds	r17, 0x0169	; 0x800169 <lastTime+0x1>
     294:	01 2e       	mov	r0, r17
     296:	00 0c       	add	r0, r0
     298:	22 0b       	sbc	r18, r18
     29a:	33 0b       	sbc	r19, r19
     29c:	60 1b       	sub	r22, r16
     29e:	71 0b       	sbc	r23, r17
     2a0:	82 0b       	sbc	r24, r18
     2a2:	93 0b       	sbc	r25, r19
     2a4:	64 31       	cpi	r22, 0x14	; 20
     2a6:	71 05       	cpc	r23, r1
     2a8:	81 05       	cpc	r24, r1
     2aa:	91 05       	cpc	r25, r1
     2ac:	08 f4       	brcc	.+2      	; 0x2b0 <loop+0x50>
     2ae:	a2 c0       	rjmp	.+324    	; 0x3f4 <loop+0x194>
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:108
    //calculate current RPM and compute PID with it
    countdiff = count - lastcount;
     2b0:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <count>
     2b4:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <count+0x1>
     2b8:	20 91 5e 01 	lds	r18, 0x015E	; 0x80015e <lastcount>
     2bc:	30 91 5f 01 	lds	r19, 0x015F	; 0x80015f <lastcount+0x1>
     2c0:	ac 01       	movw	r20, r24
     2c2:	42 1b       	sub	r20, r18
     2c4:	53 0b       	sbc	r21, r19
     2c6:	50 93 59 01 	sts	0x0159, r21	; 0x800159 <countdiff+0x1>
     2ca:	40 93 58 01 	sts	0x0158, r20	; 0x800158 <countdiff>
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:109
    lastcount = count;
     2ce:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <lastcount+0x1>
     2d2:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <lastcount>
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:110
    int oldSpeed = motSpeed;
     2d6:	60 91 5a 01 	lds	r22, 0x015A	; 0x80015a <motSpeed>
     2da:	70 91 5b 01 	lds	r23, 0x015B	; 0x80015b <motSpeed+0x1>
     2de:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <motSpeed+0x2>
     2e2:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <motSpeed+0x3>
     2e6:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <__fixsfsi>
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:112
    motSpeed = (countdiff / 12) * (1 / 20) * (1000 / 1) * (60 / 1) *  (1 / Ngear);
    if (abs(motSpeed - oldSpeed) >= 5) { //throwing out the shitty readings
     2ea:	07 2e       	mov	r0, r23
     2ec:	00 0c       	add	r0, r0
     2ee:	88 0b       	sbc	r24, r24
     2f0:	99 0b       	sbc	r25, r25
     2f2:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <__floatsisf>
     2f6:	4b 01       	movw	r8, r22
     2f8:	5c 01       	movw	r10, r24
     2fa:	ac 01       	movw	r20, r24
     2fc:	9b 01       	movw	r18, r22
     2fe:	60 e0       	ldi	r22, 0x00	; 0
     300:	70 e0       	ldi	r23, 0x00	; 0
     302:	cb 01       	movw	r24, r22
     304:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <__subsf3>
     308:	6b 01       	movw	r12, r22
     30a:	7c 01       	movw	r14, r24
     30c:	20 e0       	ldi	r18, 0x00	; 0
     30e:	30 e0       	ldi	r19, 0x00	; 0
     310:	a9 01       	movw	r20, r18
     312:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <__gesf2>
     316:	18 16       	cp	r1, r24
     318:	24 f0       	brlt	.+8      	; 0x322 <loop+0xc2>
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:112 (discriminator 2)
     31a:	f7 fa       	bst	r15, 7
     31c:	f0 94       	com	r15
     31e:	f7 f8       	bld	r15, 7
     320:	f0 94       	com	r15
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:112 (discriminator 4)
     322:	20 e0       	ldi	r18, 0x00	; 0
     324:	30 e0       	ldi	r19, 0x00	; 0
     326:	40 ea       	ldi	r20, 0xA0	; 160
     328:	50 e4       	ldi	r21, 0x40	; 64
     32a:	c7 01       	movw	r24, r14
     32c:	b6 01       	movw	r22, r12
     32e:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <__gesf2>
     332:	87 ff       	sbrs	r24, 7
     334:	9b c0       	rjmp	.+310    	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:111
  if ((millis() - lastTime) >= 20) { //if 20 ms passed since the last reading, read the current
    //calculate current RPM and compute PID with it
    countdiff = count - lastcount;
    lastcount = count;
    int oldSpeed = motSpeed;
    motSpeed = (countdiff / 12) * (1 / 20) * (1000 / 1) * (60 / 1) *  (1 / Ngear);
     336:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <motSpeed>
     33a:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <motSpeed+0x1>
     33e:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <motSpeed+0x2>
     342:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <motSpeed+0x3>
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:115
    if (abs(motSpeed - oldSpeed) >= 5) { //throwing out the shitty readings
      motSpeed = oldSpeed;
    }
    calcSpeedPID += max(min(pidSpeed.compute(motSpeed), 255), 0);
     346:	6b e0       	ldi	r22, 0x0B	; 11
     348:	71 e0       	ldi	r23, 0x01	; 1
     34a:	ce 01       	movw	r24, r28
     34c:	01 96       	adiw	r24, 0x01	; 1
     34e:	0e 94 c4 0c 	call	0x1988	; 0x1988 <String::String(char const*)>
     352:	65 e1       	ldi	r22, 0x15	; 21
     354:	71 e0       	ldi	r23, 0x01	; 1
     356:	ce 01       	movw	r24, r28
     358:	07 96       	adiw	r24, 0x07	; 7
     35a:	0e 94 c4 0c 	call	0x1988	; 0x1988 <String::String(char const*)>
     35e:	40 91 5a 01 	lds	r20, 0x015A	; 0x80015a <motSpeed>
     362:	50 91 5b 01 	lds	r21, 0x015B	; 0x80015b <motSpeed+0x1>
     366:	60 91 5c 01 	lds	r22, 0x015C	; 0x80015c <motSpeed+0x2>
     36a:	70 91 5d 01 	lds	r23, 0x015D	; 0x80015d <motSpeed+0x3>
     36e:	8e 01       	movw	r16, r28
     370:	0f 5f       	subi	r16, 0xFF	; 255
     372:	1f 4f       	sbci	r17, 0xFF	; 255
     374:	9e 01       	movw	r18, r28
     376:	29 5f       	subi	r18, 0xF9	; 249
     378:	3f 4f       	sbci	r19, 0xFF	; 255
     37a:	8f e6       	ldi	r24, 0x6F	; 111
     37c:	91 e0       	ldi	r25, 0x01	; 1
     37e:	0e 94 95 06 	call	0xd2a	; 0xd2a <PIDController::compute(double, String, String)>
     382:	6b 01       	movw	r12, r22
     384:	7c 01       	movw	r14, r24
     386:	ce 01       	movw	r24, r28
     388:	07 96       	adiw	r24, 0x07	; 7
     38a:	0e 94 55 0c 	call	0x18aa	; 0x18aa <String::~String()>
     38e:	c8 01       	movw	r24, r16
     390:	0e 94 55 0c 	call	0x18aa	; 0x18aa <String::~String()>
     394:	20 e0       	ldi	r18, 0x00	; 0
     396:	30 e0       	ldi	r19, 0x00	; 0
     398:	4f e7       	ldi	r20, 0x7F	; 127
     39a:	53 e4       	ldi	r21, 0x43	; 67
     39c:	c7 01       	movw	r24, r14
     39e:	b6 01       	movw	r22, r12
     3a0:	0e 94 67 0e 	call	0x1cce	; 0x1cce <__cmpsf2>
     3a4:	87 ff       	sbrs	r24, 7
     3a6:	6b c0       	rjmp	.+214    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:115 (discriminator 4)
     3a8:	20 e0       	ldi	r18, 0x00	; 0
     3aa:	30 e0       	ldi	r19, 0x00	; 0
     3ac:	a9 01       	movw	r20, r18
     3ae:	c7 01       	movw	r24, r14
     3b0:	b6 01       	movw	r22, r12
     3b2:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <__gesf2>
     3b6:	18 16       	cp	r1, r24
     3b8:	1c f0       	brlt	.+6      	; 0x3c0 <loop+0x160>
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:115
     3ba:	c1 2c       	mov	r12, r1
     3bc:	d1 2c       	mov	r13, r1
     3be:	76 01       	movw	r14, r12
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:115 (discriminator 8)
     3c0:	60 91 56 01 	lds	r22, 0x0156	; 0x800156 <calcSpeedPID>
     3c4:	70 91 57 01 	lds	r23, 0x0157	; 0x800157 <calcSpeedPID+0x1>
     3c8:	07 2e       	mov	r0, r23
     3ca:	00 0c       	add	r0, r0
     3cc:	88 0b       	sbc	r24, r24
     3ce:	99 0b       	sbc	r25, r25
     3d0:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <__floatsisf>
     3d4:	a7 01       	movw	r20, r14
     3d6:	96 01       	movw	r18, r12
     3d8:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <__addsf3>
     3dc:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <__fixsfsi>
     3e0:	70 93 57 01 	sts	0x0157, r23	; 0x800157 <calcSpeedPID+0x1>
     3e4:	60 93 56 01 	sts	0x0156, r22	; 0x800156 <calcSpeedPID>
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:116 (discriminator 8)
    lastTime = millis();
     3e8:	0e 94 57 08 	call	0x10ae	; 0x10ae <millis>
     3ec:	70 93 69 01 	sts	0x0169, r23	; 0x800169 <lastTime+0x1>
     3f0:	60 93 68 01 	sts	0x0168, r22	; 0x800168 <lastTime>
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:120
  }

  //check the currentsensor
  readCurrent();
     3f4:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <readCurrent()>
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:124


  //increment encoders without ISR
  newValue = (digitalRead(enc1) << 1) | digitalRead(enc2);
     3f8:	82 e0       	ldi	r24, 0x02	; 2
     3fa:	0e 94 f7 09 	call	0x13ee	; 0x13ee <digitalRead>
     3fe:	8c 01       	movw	r16, r24
     400:	83 e0       	ldi	r24, 0x03	; 3
     402:	0e 94 f7 09 	call	0x13ee	; 0x13ee <digitalRead>
     406:	00 0f       	add	r16, r16
     408:	11 1f       	adc	r17, r17
     40a:	80 2b       	or	r24, r16
     40c:	91 2b       	or	r25, r17
     40e:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <newValue+0x1>
     412:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <newValue>
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:125
  switch (oldValue)
     416:	20 91 62 01 	lds	r18, 0x0162	; 0x800162 <oldValue>
     41a:	30 91 63 01 	lds	r19, 0x0163	; 0x800163 <oldValue+0x1>
     41e:	21 30       	cpi	r18, 0x01	; 1
     420:	31 05       	cpc	r19, r1
     422:	09 f4       	brne	.+2      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     424:	63 c0       	rjmp	.+198    	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
     426:	0c f0       	brlt	.+2      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     428:	31 c0       	rjmp	.+98     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
     42a:	23 2b       	or	r18, r19
     42c:	09 f4       	brne	.+2      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     42e:	49 c0       	rjmp	.+146    	; 0x4c2 <__LOCK_REGION_LENGTH__+0xc2>
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:164
        case 2: count--; break;
        case 3: break;
      }
      break;
  }
  oldValue = newValue;
     430:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <oldValue+0x1>
     434:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <oldValue>
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:170

  float slowRPM = 25;
  float fastRPM = 50;

  //switch statement given i2c input command from command line or controller
  switch (I2Cstatus) {
     438:	e0 91 09 01 	lds	r30, 0x0109	; 0x800109 <I2Cstatus>
     43c:	ee 30       	cpi	r30, 0x0E	; 14
     43e:	08 f0       	brcs	.+2      	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
     440:	71 c0       	rjmp	.+226    	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
     442:	0e 2e       	mov	r0, r30
     444:	00 0c       	add	r0, r0
     446:	ff 0b       	sbc	r31, r31
     448:	e8 5d       	subi	r30, 0xD8	; 216
     44a:	fd 4f       	sbci	r31, 0xFD	; 253
     44c:	0c 94 5f 10 	jmp	0x20be	; 0x20be <__tablejump2__>
     450:	90 02       	muls	r25, r16
     452:	a5 02       	muls	r26, r21
     454:	b0 02       	muls	r27, r16
     456:	bb 02       	muls	r27, r27
     458:	92 02       	muls	r25, r18
     45a:	92 02       	muls	r25, r18
     45c:	92 02       	muls	r25, r18
     45e:	92 02       	muls	r25, r18
     460:	de 02       	muls	r29, r30
     462:	cf 02       	muls	r28, r31
     464:	00 03       	mulsu	r16, r16
     466:	ef 02       	muls	r30, r31
     468:	12 03       	mulsu	r17, r18
     46a:	1f 03       	fmul	r17, r23
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:113
    countdiff = count - lastcount;
    lastcount = count;
    int oldSpeed = motSpeed;
    motSpeed = (countdiff / 12) * (1 / 20) * (1000 / 1) * (60 / 1) *  (1 / Ngear);
    if (abs(motSpeed - oldSpeed) >= 5) { //throwing out the shitty readings
      motSpeed = oldSpeed;
     46c:	80 92 5a 01 	sts	0x015A, r8	; 0x80015a <motSpeed>
     470:	90 92 5b 01 	sts	0x015B, r9	; 0x80015b <motSpeed+0x1>
     474:	a0 92 5c 01 	sts	0x015C, r10	; 0x80015c <motSpeed+0x2>
     478:	b0 92 5d 01 	sts	0x015D, r11	; 0x80015d <motSpeed+0x3>
     47c:	64 cf       	rjmp	.-312    	; 0x346 <loop+0xe6>
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:115
    }
    calcSpeedPID += max(min(pidSpeed.compute(motSpeed), 255), 0);
     47e:	c1 2c       	mov	r12, r1
     480:	d1 2c       	mov	r13, r1
     482:	3f e7       	ldi	r19, 0x7F	; 127
     484:	e3 2e       	mov	r14, r19
     486:	33 e4       	ldi	r19, 0x43	; 67
     488:	f3 2e       	mov	r15, r19
     48a:	9a cf       	rjmp	.-204    	; 0x3c0 <loop+0x160>
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:125
  readCurrent();


  //increment encoders without ISR
  newValue = (digitalRead(enc1) << 1) | digitalRead(enc2);
  switch (oldValue)
     48c:	22 30       	cpi	r18, 0x02	; 2
     48e:	31 05       	cpc	r19, r1
     490:	e9 f1       	breq	.+122    	; 0x50c <__LOCK_REGION_LENGTH__+0x10c>
     492:	23 30       	cpi	r18, 0x03	; 3
     494:	31 05       	cpc	r19, r1
     496:	09 f0       	breq	.+2      	; 0x49a <__LOCK_REGION_LENGTH__+0x9a>
     498:	cb cf       	rjmp	.-106    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:155
        case 2: break;
        case 3: count++; break;
      }
      break;
    case 3:
      switch (newValue)
     49a:	81 30       	cpi	r24, 0x01	; 1
     49c:	91 05       	cpc	r25, r1
     49e:	79 f1       	breq	.+94     	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	91 05       	cpc	r25, r1
     4a4:	c1 f0       	breq	.+48     	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
     4a6:	00 97       	sbiw	r24, 0x00	; 0
     4a8:	09 f0       	breq	.+2      	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
     4aa:	c2 cf       	rjmp	.-124    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:133
      switch (newValue)
      {
        case 0: break;
        case 1: count--; break;
        case 2: count++; break;
        case 3: error++; break;
     4ac:	20 91 64 01 	lds	r18, 0x0164	; 0x800164 <error>
     4b0:	30 91 65 01 	lds	r19, 0x0165	; 0x800165 <error+0x1>
     4b4:	2f 5f       	subi	r18, 0xFF	; 255
     4b6:	3f 4f       	sbci	r19, 0xFF	; 255
     4b8:	30 93 65 01 	sts	0x0165, r19	; 0x800165 <error+0x1>
     4bc:	20 93 64 01 	sts	0x0164, r18	; 0x800164 <error>
     4c0:	b7 cf       	rjmp	.-146    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:128
  //increment encoders without ISR
  newValue = (digitalRead(enc1) << 1) | digitalRead(enc2);
  switch (oldValue)
  {
    case 0:
      switch (newValue)
     4c2:	82 30       	cpi	r24, 0x02	; 2
     4c4:	91 05       	cpc	r25, r1
     4c6:	d9 f0       	breq	.+54     	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
     4c8:	83 30       	cpi	r24, 0x03	; 3
     4ca:	91 05       	cpc	r25, r1
     4cc:	79 f3       	breq	.-34     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
     4ce:	81 30       	cpi	r24, 0x01	; 1
     4d0:	91 05       	cpc	r25, r1
     4d2:	09 f0       	breq	.+2      	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
     4d4:	ad cf       	rjmp	.-166    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:131
      {
        case 0: break;
        case 1: count--; break;
     4d6:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <count>
     4da:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <count+0x1>
     4de:	21 50       	subi	r18, 0x01	; 1
     4e0:	31 09       	sbc	r19, r1
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:132
        case 2: count++; break;
     4e2:	30 93 61 01 	sts	0x0161, r19	; 0x800161 <count+0x1>
     4e6:	20 93 60 01 	sts	0x0160, r18	; 0x800160 <count>
     4ea:	a2 cf       	rjmp	.-188    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:137
        case 3: error++; break;
      }
      break;
    case 1:
      switch (newValue)
     4ec:	82 30       	cpi	r24, 0x02	; 2
     4ee:	91 05       	cpc	r25, r1
     4f0:	e9 f2       	breq	.-70     	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
     4f2:	83 30       	cpi	r24, 0x03	; 3
     4f4:	91 05       	cpc	r25, r1
     4f6:	79 f3       	breq	.-34     	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
     4f8:	00 97       	sbiw	r24, 0x00	; 0
     4fa:	09 f0       	breq	.+2      	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
     4fc:	99 cf       	rjmp	.-206    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:132
    case 0:
      switch (newValue)
      {
        case 0: break;
        case 1: count--; break;
        case 2: count++; break;
     4fe:	20 91 60 01 	lds	r18, 0x0160	; 0x800160 <count>
     502:	30 91 61 01 	lds	r19, 0x0161	; 0x800161 <count+0x1>
     506:	2f 5f       	subi	r18, 0xFF	; 255
     508:	3f 4f       	sbci	r19, 0xFF	; 255
     50a:	eb cf       	rjmp	.-42     	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:146
        case 2: error++; break;
        case 3: count--; break;
      }
      break;
    case 2:
      switch (newValue)
     50c:	81 30       	cpi	r24, 0x01	; 1
     50e:	91 05       	cpc	r25, r1
     510:	69 f2       	breq	.-102    	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
     512:	83 30       	cpi	r24, 0x03	; 3
     514:	91 05       	cpc	r25, r1
     516:	99 f3       	breq	.-26     	; 0x4fe <__LOCK_REGION_LENGTH__+0xfe>
     518:	00 97       	sbiw	r24, 0x00	; 0
     51a:	09 f0       	breq	.+2      	; 0x51e <__LOCK_REGION_LENGTH__+0x11e>
     51c:	89 cf       	rjmp	.-238    	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
     51e:	db cf       	rjmp	.-74     	; 0x4d6 <__LOCK_REGION_LENGTH__+0xd6>
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:174
  //switch statement given i2c input command from command line or controller
  switch (I2Cstatus) {
    default: //no message- status defaults to zero
      break;
    case 0: //motor stop
      brake();
     520:	0e 94 26 01 	call	0x24c	; 0x24c <brake()>
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:237
      pidSpeed.setpoint(fastSpeed);
      reverse(150);
      break;
  }

}
     524:	2c 96       	adiw	r28, 0x0c	; 12
     526:	0f b6       	in	r0, 0x3f	; 63
     528:	f8 94       	cli
     52a:	de bf       	out	0x3e, r29	; 62
     52c:	0f be       	out	0x3f, r0	; 63
     52e:	cd bf       	out	0x3d, r28	; 61
     530:	df 91       	pop	r29
     532:	cf 91       	pop	r28
     534:	1f 91       	pop	r17
     536:	0f 91       	pop	r16
     538:	ff 90       	pop	r15
     53a:	ef 90       	pop	r14
     53c:	df 90       	pop	r13
     53e:	cf 90       	pop	r12
     540:	bf 90       	pop	r11
     542:	af 90       	pop	r10
     544:	9f 90       	pop	r9
     546:	8f 90       	pop	r8
     548:	08 95       	ret
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:177
      break;
    case 0: //motor stop
      brake();
      break;
    case 1: //lead screw up speed
      pidSpeed.setpoint(slowRPM); //check all the signs
     54a:	40 e0       	ldi	r20, 0x00	; 0
     54c:	50 e0       	ldi	r21, 0x00	; 0
     54e:	68 ec       	ldi	r22, 0xC8	; 200
     550:	71 e4       	ldi	r23, 0x41	; 65
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:232
    case 12: //cable down speed
      pidSpeed.setpoint(fastSpeed);
      forward(150);
      break;
    case 13: //cable down speed
      pidSpeed.setpoint(fastSpeed);
     552:	8f e6       	ldi	r24, 0x6F	; 111
     554:	91 e0       	ldi	r25, 0x01	; 1
     556:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <PIDController::setpoint(double)>
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:233
      reverse(150);
     55a:	86 e9       	ldi	r24, 0x96	; 150
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	3c c0       	rjmp	.+120    	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:181
    case 1: //lead screw up speed
      pidSpeed.setpoint(slowRPM); //check all the signs
      reverse(150);
      break;
    case 2: //lead screw down speed
      pidSpeed.setpoint(slowRPM);
     560:	40 e0       	ldi	r20, 0x00	; 0
     562:	50 e0       	ldi	r21, 0x00	; 0
     564:	68 ec       	ldi	r22, 0xC8	; 200
     566:	71 e4       	ldi	r23, 0x41	; 65
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:228
        forward(calcSpeedPID);
      }
      break;

    case 12: //cable down speed
      pidSpeed.setpoint(fastSpeed);
     568:	8f e6       	ldi	r24, 0x6F	; 111
     56a:	91 e0       	ldi	r25, 0x01	; 1
     56c:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <PIDController::setpoint(double)>
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:229
      forward(150);
     570:	86 e9       	ldi	r24, 0x96	; 150
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	11 c0       	rjmp	.+34     	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:185
    case 2: //lead screw down speed
      pidSpeed.setpoint(slowRPM);
      forward(150);
      break;
    case 3:
      if (motorstalled) {
     576:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <motorstalled>
     57a:	88 23       	and	r24, r24
     57c:	59 f0       	breq	.+22     	; 0x594 <__LOCK_REGION_LENGTH__+0x194>
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:186
        brake();
     57e:	0e 94 26 01 	call	0x24c	; 0x24c <brake()>
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:187
        delay(200);
     582:	68 ec       	ldi	r22, 0xC8	; 200
     584:	70 e0       	ldi	r23, 0x00	; 0
     586:	80 e0       	ldi	r24, 0x00	; 0
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	0e 94 88 08 	call	0x1110	; 0x1110 <delay>
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:188
        I2Cstatus = 0;
     58e:	10 92 09 01 	sts	0x0109, r1	; 0x800109 <I2Cstatus>
     592:	c8 cf       	rjmp	.-112    	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:191

      } else {
        forward(130);
     594:	82 e8       	ldi	r24, 0x82	; 130
     596:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:229
      }
      break;

    case 12: //cable down speed
      pidSpeed.setpoint(fastSpeed);
      forward(150);
     598:	0e 94 0f 01 	call	0x21e	; 0x21e <forward(int)>
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:230
      break;
     59c:	c3 cf       	rjmp	.-122    	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:195
      } else {
        forward(130);
      }
      break;
    case 9:
      pidSpeed.setpoint(-fastRPM);
     59e:	40 e0       	ldi	r20, 0x00	; 0
     5a0:	50 e0       	ldi	r21, 0x00	; 0
     5a2:	68 e4       	ldi	r22, 0x48	; 72
     5a4:	72 ec       	ldi	r23, 0xC2	; 194
     5a6:	8f e6       	ldi	r24, 0x6F	; 111
     5a8:	91 e0       	ldi	r25, 0x01	; 1
     5aa:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <PIDController::setpoint(double)>
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:196
      if (address == 0x01) {
     5ae:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <address>
     5b2:	81 30       	cpi	r24, 0x01	; 1
     5b4:	79 f4       	brne	.+30     	; 0x5d4 <__LOCK_REGION_LENGTH__+0x1d4>
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:197
        forward(255);
     5b6:	8f ef       	ldi	r24, 0xFF	; 255
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	ee cf       	rjmp	.-36     	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:203
      } else {
        reverse(255);
      }
      break;
    case 8:
      pidSpeed.setpoint(fastRPM);
     5bc:	40 e0       	ldi	r20, 0x00	; 0
     5be:	50 e0       	ldi	r21, 0x00	; 0
     5c0:	68 e4       	ldi	r22, 0x48	; 72
     5c2:	72 e4       	ldi	r23, 0x42	; 66
     5c4:	8f e6       	ldi	r24, 0x6F	; 111
     5c6:	91 e0       	ldi	r25, 0x01	; 1
     5c8:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <PIDController::setpoint(double)>
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:204
      if (address == 0x01) {
     5cc:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <address>
     5d0:	81 30       	cpi	r24, 0x01	; 1
     5d2:	89 f7       	brne	.-30     	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:199
    case 9:
      pidSpeed.setpoint(-fastRPM);
      if (address == 0x01) {
        forward(255);
      } else {
        reverse(255);
     5d4:	8f ef       	ldi	r24, 0xFF	; 255
     5d6:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:233
      pidSpeed.setpoint(fastSpeed);
      forward(150);
      break;
    case 13: //cable down speed
      pidSpeed.setpoint(fastSpeed);
      reverse(150);
     5d8:	0e 94 1d 01 	call	0x23a	; 0x23a <reverse(int)>
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:237
      break;
  }

}
     5dc:	a3 cf       	rjmp	.-186    	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:211
      } else {
        forward(255);
      }
      break;
    case 11:
      pidSpeed.setpoint(-slowRPM);
     5de:	40 e0       	ldi	r20, 0x00	; 0
     5e0:	50 e0       	ldi	r21, 0x00	; 0
     5e2:	68 ec       	ldi	r22, 0xC8	; 200
     5e4:	71 ec       	ldi	r23, 0xC1	; 193
     5e6:	8f e6       	ldi	r24, 0x6F	; 111
     5e8:	91 e0       	ldi	r25, 0x01	; 1
     5ea:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <PIDController::setpoint(double)>
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:212
      if (address == 0x01) {
     5ee:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <address>
     5f2:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <calcSpeedPID>
     5f6:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <calcSpeedPID+0x1>
     5fa:	21 30       	cpi	r18, 0x01	; 1
     5fc:	69 f7       	brne	.-38     	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
     5fe:	cc cf       	rjmp	.-104    	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:219
      } else {
        reverse(calcSpeedPID);
      }
      break;
    case 10:
      pidSpeed.setpoint(slowRPM);
     600:	40 e0       	ldi	r20, 0x00	; 0
     602:	50 e0       	ldi	r21, 0x00	; 0
     604:	68 ec       	ldi	r22, 0xC8	; 200
     606:	71 e4       	ldi	r23, 0x41	; 65
     608:	8f e6       	ldi	r24, 0x6F	; 111
     60a:	91 e0       	ldi	r25, 0x01	; 1
     60c:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <PIDController::setpoint(double)>
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:220
      if (address == 0x01) {
     610:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <address>
     614:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <calcSpeedPID>
     618:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <calcSpeedPID+0x1>
     61c:	21 30       	cpi	r18, 0x01	; 1
     61e:	09 f0       	breq	.+2      	; 0x622 <__LOCK_REGION_LENGTH__+0x222>
     620:	bb cf       	rjmp	.-138    	; 0x598 <__LOCK_REGION_LENGTH__+0x198>
     622:	da cf       	rjmp	.-76     	; 0x5d8 <__LOCK_REGION_LENGTH__+0x1d8>
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:228
        forward(calcSpeedPID);
      }
      break;

    case 12: //cable down speed
      pidSpeed.setpoint(fastSpeed);
     624:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <fastSpeed>
     628:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <fastSpeed+0x1>
     62c:	07 2e       	mov	r0, r23
     62e:	00 0c       	add	r0, r0
     630:	88 0b       	sbc	r24, r24
     632:	99 0b       	sbc	r25, r25
     634:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <__floatsisf>
     638:	ab 01       	movw	r20, r22
     63a:	bc 01       	movw	r22, r24
     63c:	95 cf       	rjmp	.-214    	; 0x568 <__LOCK_REGION_LENGTH__+0x168>
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:232
      forward(150);
      break;
    case 13: //cable down speed
      pidSpeed.setpoint(fastSpeed);
     63e:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <fastSpeed>
     642:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <fastSpeed+0x1>
     646:	07 2e       	mov	r0, r23
     648:	00 0c       	add	r0, r0
     64a:	88 0b       	sbc	r24, r24
     64c:	99 0b       	sbc	r25, r25
     64e:	0e 94 16 0f 	call	0x1e2c	; 0x1e2c <__floatsisf>
     652:	ab 01       	movw	r20, r22
     654:	bc 01       	movw	r22, r24
     656:	7d cf       	rjmp	.-262    	; 0x552 <__LOCK_REGION_LENGTH__+0x152>

00000658 <_GLOBAL__sub_I_pidSpeed>:
_GLOBAL__sub_I_pidSpeed():
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:39
#define INPUT2 10
#define currentRead 17 //26
#define enc1 2 //32
#define enc2 3 //1 

PIDController pidSpeed;
     658:	8f e6       	ldi	r24, 0x6F	; 111
     65a:	91 e0       	ldi	r25, 0x01	; 1
     65c:	0c 94 dd 05 	jmp	0xbba	; 0xbba <PIDController::PIDController()>

00000660 <requestEvent()>:
_Z12requestEventv():
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:287
/**
   Callback function upon receiving a request for data via I2C from master
   This will request a set number of bytes as a message that will be formed when its time
*/
byte data[4];
void requestEvent() {
     660:	cf 93       	push	r28
     662:	df 93       	push	r29
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:289
  //split the int encoder count into multiple bytes
  data[0] = (count >> 8) & 0xFF;
     664:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <count>
     668:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <count+0x1>
     66c:	c2 e5       	ldi	r28, 0x52	; 82
     66e:	d1 e0       	ldi	r29, 0x01	; 1
     670:	98 83       	st	Y, r25
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:290
  data[1] = count & 0xFF;
     672:	89 83       	std	Y+1, r24	; 0x01
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:291
  data[2] = motorCurrent;
     674:	60 91 6b 01 	lds	r22, 0x016B	; 0x80016b <motorCurrent>
     678:	70 91 6c 01 	lds	r23, 0x016C	; 0x80016c <motorCurrent+0x1>
     67c:	80 91 6d 01 	lds	r24, 0x016D	; 0x80016d <motorCurrent+0x2>
     680:	90 91 6e 01 	lds	r25, 0x016E	; 0x80016e <motorCurrent+0x3>
     684:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <__fixunssfsi>
     688:	6a 83       	std	Y+2, r22	; 0x02
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:292
  data[3] = motorCurrent;
     68a:	6b 83       	std	Y+3, r22	; 0x03
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:294
  //Write encoder count and current values along i2C for a request
  Wire.write(data, 4);
     68c:	44 e0       	ldi	r20, 0x04	; 4
     68e:	50 e0       	ldi	r21, 0x00	; 0
     690:	be 01       	movw	r22, r28
     692:	89 ea       	ldi	r24, 0xA9	; 169
     694:	91 e0       	ldi	r25, 0x01	; 1
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:295
}
     696:	df 91       	pop	r29
     698:	cf 91       	pop	r28
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:294
  data[0] = (count >> 8) & 0xFF;
  data[1] = count & 0xFF;
  data[2] = motorCurrent;
  data[3] = motorCurrent;
  //Write encoder count and current values along i2C for a request
  Wire.write(data, 4);
     69a:	0c 94 f8 03 	jmp	0x7f0	; 0x7f0 <TwoWire::write(unsigned char const*, unsigned int)>

0000069e <msgEvent(int)>:
_Z8msgEventi():
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:302
/**
   callback function for recieving messages and setting the appropriate status
*/
void msgEvent(int numBytes) {
  // I2CFlag = true;
  while (Wire.available() > 0) { // loop through all but the last
     69e:	89 ea       	ldi	r24, 0xA9	; 169
     6a0:	91 e0       	ldi	r25, 0x01	; 1
     6a2:	0e 94 69 03 	call	0x6d2	; 0x6d2 <TwoWire::available()>
     6a6:	18 16       	cp	r1, r24
     6a8:	19 06       	cpc	r1, r25
     6aa:	3c f4       	brge	.+14     	; 0x6ba <msgEvent(int)+0x1c>
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:303
    int x = Wire.read(); // receive byte as a character
     6ac:	89 ea       	ldi	r24, 0xA9	; 169
     6ae:	91 e0       	ldi	r25, 0x01	; 1
     6b0:	0e 94 70 03 	call	0x6e0	; 0x6e0 <TwoWire::read()>
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:308
    //    if (x>127){
    //      x = 256-x;
    //      x*=-1;
    //    }
    I2Cstatus = x;
     6b4:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <I2Cstatus>
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:302
/**
   callback function for recieving messages and setting the appropriate status
*/
void msgEvent(int numBytes) {
  // I2CFlag = true;
  while (Wire.available() > 0) { // loop through all but the last
     6b8:	f2 cf       	rjmp	.-28     	; 0x69e <msgEvent(int)>
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:310
    //      x = 256-x;
    //      x*=-1;
    //    }
    I2Cstatus = x;
  }
  count = 0;
     6ba:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <count+0x1>
     6be:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <count>
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:311
  lastcount = 0;
     6c2:	10 92 5f 01 	sts	0x015F, r1	; 0x80015f <lastcount+0x1>
     6c6:	10 92 5e 01 	sts	0x015E, r1	; 0x80015e <lastcount>
C:\Users\katel\OneDrive\Desktop\i2c stuff\C.L.A.R.A.-MQP\robotcode\SAMI_nonreversed/SAMI_nonreversed.ino:313

}
     6ca:	08 95       	ret

000006cc <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:190
//  This provides backwards compatibility with the original
//  definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	80 e0       	ldi	r24, 0x00	; 0
     6d0:	08 95       	ret

000006d2 <TwoWire::available()>:
_ZN7TwoWire9availableEv():
     6d2:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <TwoWire::rxBufferLength>
     6d6:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <TwoWire::rxBufferIndex>
     6da:	89 1b       	sub	r24, r25
     6dc:	99 0b       	sbc	r25, r25
     6de:	08 95       	ret

000006e0 <TwoWire::read()>:
_ZN7TwoWire4readEv():
     6e0:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <TwoWire::rxBufferIndex>
     6e4:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <TwoWire::rxBufferLength>
     6e8:	2f ef       	ldi	r18, 0xFF	; 255
     6ea:	3f ef       	ldi	r19, 0xFF	; 255
     6ec:	98 17       	cp	r25, r24
     6ee:	48 f4       	brcc	.+18     	; 0x702 <TwoWire::read()+0x22>
     6f0:	e9 2f       	mov	r30, r25
     6f2:	f0 e0       	ldi	r31, 0x00	; 0
     6f4:	e2 52       	subi	r30, 0x22	; 34
     6f6:	fe 4f       	sbci	r31, 0xFE	; 254
     6f8:	20 81       	ld	r18, Z
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	9f 5f       	subi	r25, 0xFF	; 255
     6fe:	90 93 dd 01 	sts	0x01DD, r25	; 0x8001dd <TwoWire::rxBufferIndex>
     702:	c9 01       	movw	r24, r18
     704:	08 95       	ret

00000706 <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
     706:	e0 91 dd 01 	lds	r30, 0x01DD	; 0x8001dd <TwoWire::rxBufferIndex>
     70a:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <TwoWire::rxBufferLength>
     70e:	e8 17       	cp	r30, r24
     710:	30 f4       	brcc	.+12     	; 0x71e <TwoWire::peek()+0x18>
     712:	f0 e0       	ldi	r31, 0x00	; 0
     714:	e2 52       	subi	r30, 0x22	; 34
     716:	fe 4f       	sbci	r31, 0xFE	; 254
     718:	80 81       	ld	r24, Z
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	08 95       	ret
     71e:	8f ef       	ldi	r24, 0xFF	; 255
     720:	9f ef       	ldi	r25, 0xFF	; 255
     722:	08 95       	ret

00000724 <TwoWire::flush()>:
_ZN7TwoWire5flushEv():
     724:	08 95       	ret

00000726 <TwoWire::onReceiveService(unsigned char*, int)>:
_ZN7TwoWire16onReceiveServiceEPhi():
     726:	cf 93       	push	r28
     728:	df 93       	push	r29
     72a:	ec 01       	movw	r28, r24
     72c:	e0 91 b5 01 	lds	r30, 0x01B5	; 0x8001b5 <TwoWire::user_onReceive>
     730:	f0 91 b6 01 	lds	r31, 0x01B6	; 0x8001b6 <TwoWire::user_onReceive+0x1>
     734:	30 97       	sbiw	r30, 0x00	; 0
     736:	f1 f0       	breq	.+60     	; 0x774 <TwoWire::onReceiveService(unsigned char*, int)+0x4e>
     738:	90 91 dd 01 	lds	r25, 0x01DD	; 0x8001dd <TwoWire::rxBufferIndex>
     73c:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <TwoWire::rxBufferLength>
     740:	98 17       	cp	r25, r24
     742:	c0 f0       	brcs	.+48     	; 0x774 <TwoWire::onReceiveService(unsigned char*, int)+0x4e>
     744:	90 e0       	ldi	r25, 0x00	; 0
     746:	29 2f       	mov	r18, r25
     748:	30 e0       	ldi	r19, 0x00	; 0
     74a:	26 17       	cp	r18, r22
     74c:	37 07       	cpc	r19, r23
     74e:	54 f4       	brge	.+20     	; 0x764 <TwoWire::onReceiveService(unsigned char*, int)+0x3e>
     750:	de 01       	movw	r26, r28
     752:	a2 0f       	add	r26, r18
     754:	b3 1f       	adc	r27, r19
     756:	4c 91       	ld	r20, X
     758:	22 52       	subi	r18, 0x22	; 34
     75a:	3e 4f       	sbci	r19, 0xFE	; 254
     75c:	d9 01       	movw	r26, r18
     75e:	4c 93       	st	X, r20
     760:	9f 5f       	subi	r25, 0xFF	; 255
     762:	f1 cf       	rjmp	.-30     	; 0x746 <TwoWire::onReceiveService(unsigned char*, int)+0x20>
     764:	10 92 dd 01 	sts	0x01DD, r1	; 0x8001dd <TwoWire::rxBufferIndex>
     768:	60 93 dc 01 	sts	0x01DC, r22	; 0x8001dc <TwoWire::rxBufferLength>
     76c:	cb 01       	movw	r24, r22
     76e:	df 91       	pop	r29
     770:	cf 91       	pop	r28
     772:	09 94       	ijmp
     774:	df 91       	pop	r29
     776:	cf 91       	pop	r28
     778:	08 95       	ret

0000077a <TwoWire::onRequestService()>:
_ZN7TwoWire16onRequestServiceEv():
     77a:	e0 91 b7 01 	lds	r30, 0x01B7	; 0x8001b7 <TwoWire::user_onRequest>
     77e:	f0 91 b8 01 	lds	r31, 0x01B8	; 0x8001b8 <TwoWire::user_onRequest+0x1>
     782:	30 97       	sbiw	r30, 0x00	; 0
     784:	29 f0       	breq	.+10     	; 0x790 <TwoWire::onRequestService()+0x16>
     786:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <TwoWire::txBufferIndex>
     78a:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <TwoWire::txBufferLength>
     78e:	09 94       	ijmp
     790:	08 95       	ret

00000792 <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
     792:	cf 93       	push	r28
     794:	df 93       	push	r29
     796:	1f 92       	push	r1
     798:	cd b7       	in	r28, 0x3d	; 61
     79a:	de b7       	in	r29, 0x3e	; 62
     79c:	69 83       	std	Y+1, r22	; 0x01
     79e:	20 91 b9 01 	lds	r18, 0x01B9	; 0x8001b9 <TwoWire::transmitting>
     7a2:	22 23       	and	r18, r18
     7a4:	f9 f0       	breq	.+62     	; 0x7e4 <TwoWire::write(unsigned char)+0x52>
     7a6:	20 91 ba 01 	lds	r18, 0x01BA	; 0x8001ba <TwoWire::txBufferLength>
     7aa:	20 32       	cpi	r18, 0x20	; 32
     7ac:	58 f0       	brcs	.+22     	; 0x7c4 <TwoWire::write(unsigned char)+0x32>
_ZN5Print13setWriteErrorEi():
     7ae:	21 e0       	ldi	r18, 0x01	; 1
     7b0:	30 e0       	ldi	r19, 0x00	; 0
     7b2:	fc 01       	movw	r30, r24
     7b4:	33 83       	std	Z+3, r19	; 0x03
     7b6:	22 83       	std	Z+2, r18	; 0x02
_ZN7TwoWire5writeEh():
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	80 e0       	ldi	r24, 0x00	; 0
     7bc:	0f 90       	pop	r0
     7be:	df 91       	pop	r29
     7c0:	cf 91       	pop	r28
     7c2:	08 95       	ret
     7c4:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <TwoWire::txBufferIndex>
     7c8:	e8 2f       	mov	r30, r24
     7ca:	f0 e0       	ldi	r31, 0x00	; 0
     7cc:	e4 54       	subi	r30, 0x44	; 68
     7ce:	fe 4f       	sbci	r31, 0xFE	; 254
     7d0:	99 81       	ldd	r25, Y+1	; 0x01
     7d2:	90 83       	st	Z, r25
     7d4:	8f 5f       	subi	r24, 0xFF	; 255
     7d6:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <TwoWire::txBufferIndex>
     7da:	80 93 ba 01 	sts	0x01BA, r24	; 0x8001ba <TwoWire::txBufferLength>
     7de:	81 e0       	ldi	r24, 0x01	; 1
     7e0:	90 e0       	ldi	r25, 0x00	; 0
     7e2:	ec cf       	rjmp	.-40     	; 0x7bc <TwoWire::write(unsigned char)+0x2a>
     7e4:	61 e0       	ldi	r22, 0x01	; 1
     7e6:	ce 01       	movw	r24, r28
     7e8:	01 96       	adiw	r24, 0x01	; 1
     7ea:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <twi_transmit>
     7ee:	f7 cf       	rjmp	.-18     	; 0x7de <TwoWire::write(unsigned char)+0x4c>

000007f0 <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
     7f0:	cf 92       	push	r12
     7f2:	df 92       	push	r13
     7f4:	ef 92       	push	r14
     7f6:	ff 92       	push	r15
     7f8:	0f 93       	push	r16
     7fa:	1f 93       	push	r17
     7fc:	cf 93       	push	r28
     7fe:	df 93       	push	r29
     800:	7c 01       	movw	r14, r24
     802:	cb 01       	movw	r24, r22
     804:	8a 01       	movw	r16, r20
     806:	20 91 b9 01 	lds	r18, 0x01B9	; 0x8001b9 <TwoWire::transmitting>
     80a:	22 23       	and	r18, r18
     80c:	89 f0       	breq	.+34     	; 0x830 <TwoWire::write(unsigned char const*, unsigned int)+0x40>
     80e:	eb 01       	movw	r28, r22
     810:	6b 01       	movw	r12, r22
     812:	c4 0e       	add	r12, r20
     814:	d5 1e       	adc	r13, r21
     816:	cc 15       	cp	r28, r12
     818:	dd 05       	cpc	r29, r13
     81a:	69 f0       	breq	.+26     	; 0x836 <TwoWire::write(unsigned char const*, unsigned int)+0x46>
     81c:	69 91       	ld	r22, Y+
     81e:	d7 01       	movw	r26, r14
     820:	ed 91       	ld	r30, X+
     822:	fc 91       	ld	r31, X
     824:	01 90       	ld	r0, Z+
     826:	f0 81       	ld	r31, Z
     828:	e0 2d       	mov	r30, r0
     82a:	c7 01       	movw	r24, r14
     82c:	09 95       	icall
     82e:	f3 cf       	rjmp	.-26     	; 0x816 <TwoWire::write(unsigned char const*, unsigned int)+0x26>
     830:	64 2f       	mov	r22, r20
     832:	0e 94 7c 04 	call	0x8f8	; 0x8f8 <twi_transmit>
     836:	c8 01       	movw	r24, r16
     838:	df 91       	pop	r29
     83a:	cf 91       	pop	r28
     83c:	1f 91       	pop	r17
     83e:	0f 91       	pop	r16
     840:	ff 90       	pop	r15
     842:	ef 90       	pop	r14
     844:	df 90       	pop	r13
     846:	cf 90       	pop	r12
     848:	08 95       	ret

0000084a <TwoWire::begin()>:
_ZN7TwoWire5beginEv():
     84a:	10 92 dd 01 	sts	0x01DD, r1	; 0x8001dd <TwoWire::rxBufferIndex>
     84e:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <TwoWire::rxBufferLength>
     852:	10 92 bb 01 	sts	0x01BB, r1	; 0x8001bb <TwoWire::txBufferIndex>
     856:	10 92 ba 01 	sts	0x01BA, r1	; 0x8001ba <TwoWire::txBufferLength>
     85a:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <twi_init>
     85e:	8d eb       	ldi	r24, 0xBD	; 189
     860:	93 e0       	ldi	r25, 0x03	; 3
     862:	0e 94 a8 04 	call	0x950	; 0x950 <twi_attachSlaveTxEvent>
     866:	83 e9       	ldi	r24, 0x93	; 147
     868:	93 e0       	ldi	r25, 0x03	; 3
     86a:	0c 94 a3 04 	jmp	0x946	; 0x946 <twi_attachSlaveRxEvent>

0000086e <TwoWire::begin(unsigned char)>:
_ZN7TwoWire5beginEh():
     86e:	cf 93       	push	r28
     870:	c6 2f       	mov	r28, r22
     872:	0e 94 25 04 	call	0x84a	; 0x84a <TwoWire::begin()>
     876:	8c 2f       	mov	r24, r28
     878:	cf 91       	pop	r28
     87a:	0c 94 78 04 	jmp	0x8f0	; 0x8f0 <twi_setAddress>

0000087e <TwoWire::onReceive(void (*)(int))>:
_ZN7TwoWire9onReceiveEPFviE():
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:322
}

// sets function called on slave write
void TwoWire::onReceive( void (*function)(int) )
{
  user_onReceive = function;
     87e:	70 93 b6 01 	sts	0x01B6, r23	; 0x8001b6 <TwoWire::user_onReceive+0x1>
     882:	60 93 b5 01 	sts	0x01B5, r22	; 0x8001b5 <TwoWire::user_onReceive>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:323
}
     886:	08 95       	ret

00000888 <TwoWire::onRequest(void (*)())>:
_ZN7TwoWire9onRequestEPFvvE():
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:328

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
     888:	70 93 b8 01 	sts	0x01B8, r23	; 0x8001b8 <TwoWire::user_onRequest+0x1>
     88c:	60 93 b7 01 	sts	0x01B7, r22	; 0x8001b7 <TwoWire::user_onRequest>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:329
}
     890:	08 95       	ret

00000892 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
_ZN5PrintC4Ev():
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     892:	e9 ea       	ldi	r30, 0xA9	; 169
     894:	f1 e0       	ldi	r31, 0x01	; 1
     896:	13 82       	std	Z+3, r1	; 0x03
     898:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
     89a:	88 ee       	ldi	r24, 0xE8	; 232
     89c:	93 e0       	ldi	r25, 0x03	; 3
     89e:	a0 e0       	ldi	r26, 0x00	; 0
     8a0:	b0 e0       	ldi	r27, 0x00	; 0
     8a2:	84 83       	std	Z+4, r24	; 0x04
     8a4:	95 83       	std	Z+5, r25	; 0x05
     8a6:	a6 83       	std	Z+6, r26	; 0x06
     8a8:	b7 83       	std	Z+7, r27	; 0x07
_ZN7TwoWireC4Ev():
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:52
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
     8aa:	81 e2       	ldi	r24, 0x21	; 33
     8ac:	91 e0       	ldi	r25, 0x01	; 1
     8ae:	91 83       	std	Z+1, r25	; 0x01
     8b0:	80 83       	st	Z, r24
_GLOBAL__sub_I__ZN7TwoWire8rxBufferE():
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:333
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
     8b2:	08 95       	ret

000008b4 <twi_init>:
twi_init():
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     8b4:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <twi_state>
     8b8:	81 e0       	ldi	r24, 0x01	; 1
     8ba:	80 93 69 02 	sts	0x0269, r24	; 0x800269 <twi_sendStop>
     8be:	10 92 68 02 	sts	0x0268, r1	; 0x800268 <twi_inRepStart>
     8c2:	61 e0       	ldi	r22, 0x01	; 1
     8c4:	82 e1       	ldi	r24, 0x12	; 18
     8c6:	0e 94 c9 09 	call	0x1392	; 0x1392 <digitalWrite>
     8ca:	61 e0       	ldi	r22, 0x01	; 1
     8cc:	83 e1       	ldi	r24, 0x13	; 19
     8ce:	0e 94 c9 09 	call	0x1392	; 0x1392 <digitalWrite>
     8d2:	e9 eb       	ldi	r30, 0xB9	; 185
     8d4:	f0 e0       	ldi	r31, 0x00	; 0
     8d6:	80 81       	ld	r24, Z
     8d8:	8e 7f       	andi	r24, 0xFE	; 254
     8da:	80 83       	st	Z, r24
     8dc:	80 81       	ld	r24, Z
     8de:	8d 7f       	andi	r24, 0xFD	; 253
     8e0:	80 83       	st	Z, r24
     8e2:	88 e4       	ldi	r24, 0x48	; 72
     8e4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
     8e8:	85 e4       	ldi	r24, 0x45	; 69
     8ea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     8ee:	08 95       	ret

000008f0 <twi_setAddress>:
twi_setAddress():
     8f0:	88 0f       	add	r24, r24
     8f2:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__DATA_REGION_ORIGIN__+0x5a>
     8f6:	08 95       	ret

000008f8 <twi_transmit>:
twi_transmit():
     8f8:	20 91 20 02 	lds	r18, 0x0220	; 0x800220 <twi_txBufferLength>
     8fc:	26 0f       	add	r18, r22
     8fe:	33 27       	eor	r19, r19
     900:	33 1f       	adc	r19, r19
     902:	21 32       	cpi	r18, 0x21	; 33
     904:	31 05       	cpc	r19, r1
     906:	ec f4       	brge	.+58     	; 0x942 <__stack+0x43>
     908:	20 91 6b 02 	lds	r18, 0x026B	; 0x80026b <twi_state>
     90c:	fc 01       	movw	r30, r24
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	24 30       	cpi	r18, 0x04	; 4
     914:	69 f0       	breq	.+26     	; 0x930 <__stack+0x31>
     916:	82 e0       	ldi	r24, 0x02	; 2
     918:	08 95       	ret
     91a:	a0 91 20 02 	lds	r26, 0x0220	; 0x800220 <twi_txBufferLength>
     91e:	21 91       	ld	r18, Z+
     920:	ac 01       	movw	r20, r24
     922:	4e 5d       	subi	r20, 0xDE	; 222
     924:	5d 4f       	sbci	r21, 0xFD	; 253
     926:	a4 0f       	add	r26, r20
     928:	b5 2f       	mov	r27, r21
     92a:	b1 1d       	adc	r27, r1
     92c:	2c 93       	st	X, r18
     92e:	01 96       	adiw	r24, 0x01	; 1
     930:	86 17       	cp	r24, r22
     932:	98 f3       	brcs	.-26     	; 0x91a <__stack+0x1b>
     934:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <twi_txBufferLength>
     938:	68 0f       	add	r22, r24
     93a:	60 93 20 02 	sts	0x0220, r22	; 0x800220 <twi_txBufferLength>
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	08 95       	ret
     942:	81 e0       	ldi	r24, 0x01	; 1
     944:	08 95       	ret

00000946 <twi_attachSlaveRxEvent>:
twi_attachSlaveRxEvent():
     946:	90 93 65 02 	sts	0x0265, r25	; 0x800265 <twi_onSlaveReceive+0x1>
     94a:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <twi_onSlaveReceive>
     94e:	08 95       	ret

00000950 <twi_attachSlaveTxEvent>:
twi_attachSlaveTxEvent():
     950:	90 93 67 02 	sts	0x0267, r25	; 0x800267 <twi_onSlaveTransmit+0x1>
     954:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <twi_onSlaveTransmit>
     958:	08 95       	ret

0000095a <twi_stop>:
twi_stop():
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:372
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
     95a:	85 ed       	ldi	r24, 0xD5	; 213
     95c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:376

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
     960:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     964:	84 fd       	sbrc	r24, 4
     966:	fc cf       	rjmp	.-8      	; 0x960 <twi_stop+0x6>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:381
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
     968:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <twi_state>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:382
}
     96c:	08 95       	ret

0000096e <twi_releaseBus>:
twi_releaseBus():
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:393
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
     96e:	85 ec       	ldi	r24, 0xC5	; 197
     970:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:396

  // update twi state
  twi_state = TWI_READY;
     974:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <twi_state>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:397
}
     978:	08 95       	ret

0000097a <__vector_24>:
__vector_24():
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:400

ISR(TWI_vect)
{
     97a:	1f 92       	push	r1
     97c:	0f 92       	push	r0
     97e:	0f b6       	in	r0, 0x3f	; 63
     980:	0f 92       	push	r0
     982:	11 24       	eor	r1, r1
     984:	2f 93       	push	r18
     986:	3f 93       	push	r19
     988:	4f 93       	push	r20
     98a:	5f 93       	push	r21
     98c:	6f 93       	push	r22
     98e:	7f 93       	push	r23
     990:	8f 93       	push	r24
     992:	9f 93       	push	r25
     994:	af 93       	push	r26
     996:	bf 93       	push	r27
     998:	ef 93       	push	r30
     99a:	ff 93       	push	r31
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  switch(TW_STATUS){
     99c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     9a0:	88 7f       	andi	r24, 0xF8	; 248
     9a2:	80 36       	cpi	r24, 0x60	; 96
     9a4:	09 f4       	brne	.+2      	; 0x9a8 <__vector_24+0x2e>
     9a6:	4c c0       	rjmp	.+152    	; 0xa40 <__vector_24+0xc6>
     9a8:	08 f0       	brcs	.+2      	; 0x9ac <__vector_24+0x32>
     9aa:	3f c0       	rjmp	.+126    	; 0xa2a <__vector_24+0xb0>
     9ac:	88 32       	cpi	r24, 0x28	; 40
     9ae:	09 f4       	brne	.+2      	; 0x9b2 <__vector_24+0x38>
     9b0:	a8 c0       	rjmp	.+336    	; 0xb02 <__vector_24+0x188>
     9b2:	18 f5       	brcc	.+70     	; 0x9fa <__vector_24+0x80>
     9b4:	80 31       	cpi	r24, 0x10	; 16
     9b6:	09 f4       	brne	.+2      	; 0x9ba <__vector_24+0x40>
     9b8:	9c c0       	rjmp	.+312    	; 0xaf2 <__vector_24+0x178>
     9ba:	b8 f4       	brcc	.+46     	; 0x9ea <__vector_24+0x70>
     9bc:	88 23       	and	r24, r24
     9be:	09 f4       	brne	.+2      	; 0x9c2 <__vector_24+0x48>
     9c0:	f9 c0       	rjmp	.+498    	; 0xbb4 <__vector_24+0x23a>
     9c2:	88 30       	cpi	r24, 0x08	; 8
     9c4:	09 f4       	brne	.+2      	; 0x9c8 <__vector_24+0x4e>
     9c6:	95 c0       	rjmp	.+298    	; 0xaf2 <__vector_24+0x178>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:562
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
     9c8:	ff 91       	pop	r31
     9ca:	ef 91       	pop	r30
     9cc:	bf 91       	pop	r27
     9ce:	af 91       	pop	r26
     9d0:	9f 91       	pop	r25
     9d2:	8f 91       	pop	r24
     9d4:	7f 91       	pop	r23
     9d6:	6f 91       	pop	r22
     9d8:	5f 91       	pop	r21
     9da:	4f 91       	pop	r20
     9dc:	3f 91       	pop	r19
     9de:	2f 91       	pop	r18
     9e0:	0f 90       	pop	r0
     9e2:	0f be       	out	0x3f, r0	; 63
     9e4:	0f 90       	pop	r0
     9e6:	1f 90       	pop	r1
     9e8:	18 95       	reti
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     9ea:	88 31       	cpi	r24, 0x18	; 24
     9ec:	09 f4       	brne	.+2      	; 0x9f0 <__vector_24+0x76>
     9ee:	89 c0       	rjmp	.+274    	; 0xb02 <__vector_24+0x188>
     9f0:	80 32       	cpi	r24, 0x20	; 32
     9f2:	51 f7       	brne	.-44     	; 0x9c8 <__vector_24+0x4e>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:436
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
     9f4:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <twi_error>
     9f8:	15 c0       	rjmp	.+42     	; 0xa24 <__vector_24+0xaa>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     9fa:	80 34       	cpi	r24, 0x40	; 64
     9fc:	09 f4       	brne	.+2      	; 0xa00 <__vector_24+0x86>
     9fe:	9e c0       	rjmp	.+316    	; 0xb3c <__vector_24+0x1c2>
     a00:	48 f4       	brcc	.+18     	; 0xa14 <__vector_24+0x9a>
     a02:	80 33       	cpi	r24, 0x30	; 48
     a04:	b9 f3       	breq	.-18     	; 0x9f4 <__vector_24+0x7a>
     a06:	88 33       	cpi	r24, 0x38	; 56
     a08:	f9 f6       	brne	.-66     	; 0x9c8 <__vector_24+0x4e>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:440
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
     a0a:	80 93 fe 01 	sts	0x01FE, r24	; 0x8001fe <twi_error>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:441
      twi_releaseBus();
     a0e:	0e 94 b7 04 	call	0x96e	; 0x96e <twi_releaseBus>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:442
      break;
     a12:	da cf       	rjmp	.-76     	; 0x9c8 <__vector_24+0x4e>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     a14:	80 35       	cpi	r24, 0x50	; 80
     a16:	09 f4       	brne	.+2      	; 0xa1a <__vector_24+0xa0>
     a18:	85 c0       	rjmp	.+266    	; 0xb24 <__vector_24+0x1aa>
     a1a:	88 35       	cpi	r24, 0x58	; 88
     a1c:	09 f4       	brne	.+2      	; 0xa20 <__vector_24+0xa6>
     a1e:	96 c0       	rjmp	.+300    	; 0xb4c <__vector_24+0x1d2>
     a20:	88 34       	cpi	r24, 0x48	; 72
     a22:	91 f6       	brne	.-92     	; 0x9c8 <__vector_24+0x4e>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:559
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
     a24:	0e 94 ad 04 	call	0x95a	; 0x95a <twi_stop>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:562
      break;
  }
}
     a28:	cf cf       	rjmp	.-98     	; 0x9c8 <__vector_24+0x4e>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     a2a:	88 39       	cpi	r24, 0x98	; 152
     a2c:	09 f4       	brne	.+2      	; 0xa30 <__vector_24+0xb6>
     a2e:	8c c0       	rjmp	.+280    	; 0xb48 <__vector_24+0x1ce>
     a30:	38 f5       	brcc	.+78     	; 0xa80 <__vector_24+0x106>
     a32:	88 37       	cpi	r24, 0x78	; 120
     a34:	29 f0       	breq	.+10     	; 0xa40 <__vector_24+0xc6>
     a36:	50 f4       	brcc	.+20     	; 0xa4c <__vector_24+0xd2>
     a38:	88 36       	cpi	r24, 0x68	; 104
     a3a:	11 f0       	breq	.+4      	; 0xa40 <__vector_24+0xc6>
     a3c:	80 37       	cpi	r24, 0x70	; 112
     a3e:	21 f6       	brne	.-120    	; 0x9c8 <__vector_24+0x4e>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:482
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
     a40:	83 e0       	ldi	r24, 0x03	; 3
     a42:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <twi_state>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:484
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
     a46:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <twi_rxBufferIndex>
     a4a:	57 c0       	rjmp	.+174    	; 0xafa <__vector_24+0x180>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     a4c:	88 38       	cpi	r24, 0x88	; 136
     a4e:	09 f4       	brne	.+2      	; 0xa52 <__vector_24+0xd8>
     a50:	7b c0       	rjmp	.+246    	; 0xb48 <__vector_24+0x1ce>
     a52:	80 39       	cpi	r24, 0x90	; 144
     a54:	19 f0       	breq	.+6      	; 0xa5c <__vector_24+0xe2>
     a56:	80 38       	cpi	r24, 0x80	; 128
     a58:	09 f0       	breq	.+2      	; 0xa5c <__vector_24+0xe2>
     a5a:	b6 cf       	rjmp	.-148    	; 0x9c8 <__vector_24+0x4e>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:490
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
     a5c:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <twi_rxBufferIndex>
     a60:	80 32       	cpi	r24, 0x20	; 32
     a62:	08 f0       	brcs	.+2      	; 0xa66 <__vector_24+0xec>
     a64:	71 c0       	rjmp	.+226    	; 0xb48 <__vector_24+0x1ce>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:492
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
     a66:	e0 91 ff 01 	lds	r30, 0x01FF	; 0x8001ff <twi_rxBufferIndex>
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	8e 0f       	add	r24, r30
     a6e:	80 93 ff 01 	sts	0x01FF, r24	; 0x8001ff <twi_rxBufferIndex>
     a72:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
     a76:	f0 e0       	ldi	r31, 0x00	; 0
     a78:	e0 50       	subi	r30, 0x00	; 0
     a7a:	fe 4f       	sbci	r31, 0xFE	; 254
     a7c:	80 83       	st	Z, r24
     a7e:	3d c0       	rjmp	.+122    	; 0xafa <__vector_24+0x180>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     a80:	80 3b       	cpi	r24, 0xB0	; 176
     a82:	39 f0       	breq	.+14     	; 0xa92 <__vector_24+0x118>
     a84:	e0 f4       	brcc	.+56     	; 0xabe <__vector_24+0x144>
     a86:	80 3a       	cpi	r24, 0xA0	; 160
     a88:	09 f4       	brne	.+2      	; 0xa8c <__vector_24+0x112>
     a8a:	79 c0       	rjmp	.+242    	; 0xb7e <__vector_24+0x204>
     a8c:	88 3a       	cpi	r24, 0xA8	; 168
     a8e:	09 f0       	breq	.+2      	; 0xa92 <__vector_24+0x118>
     a90:	9b cf       	rjmp	.-202    	; 0x9c8 <__vector_24+0x4e>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:521
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
     a92:	84 e0       	ldi	r24, 0x04	; 4
     a94:	80 93 6b 02 	sts	0x026B, r24	; 0x80026b <twi_state>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:523
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
     a98:	10 92 21 02 	sts	0x0221, r1	; 0x800221 <twi_txBufferIndex>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:525
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
     a9c:	10 92 20 02 	sts	0x0220, r1	; 0x800220 <twi_txBufferLength>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:528
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
     aa0:	e0 91 66 02 	lds	r30, 0x0266	; 0x800266 <twi_onSlaveTransmit>
     aa4:	f0 91 67 02 	lds	r31, 0x0267	; 0x800267 <twi_onSlaveTransmit+0x1>
     aa8:	09 95       	icall
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:530
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
     aaa:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <twi_txBufferLength>
     aae:	81 11       	cpse	r24, r1
     ab0:	0f c0       	rjmp	.+30     	; 0xad0 <__vector_24+0x156>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:531
        twi_txBufferLength = 1;
     ab2:	81 e0       	ldi	r24, 0x01	; 1
     ab4:	80 93 20 02 	sts	0x0220, r24	; 0x800220 <twi_txBufferLength>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:532
        twi_txBuffer[0] = 0x00;
     ab8:	10 92 22 02 	sts	0x0222, r1	; 0x800222 <twi_txBuffer>
     abc:	09 c0       	rjmp	.+18     	; 0xad0 <__vector_24+0x156>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
     abe:	80 3c       	cpi	r24, 0xC0	; 192
     ac0:	09 f4       	brne	.+2      	; 0xac4 <__vector_24+0x14a>
     ac2:	76 c0       	rjmp	.+236    	; 0xbb0 <__vector_24+0x236>
     ac4:	88 3c       	cpi	r24, 0xC8	; 200
     ac6:	09 f4       	brne	.+2      	; 0xaca <__vector_24+0x150>
     ac8:	73 c0       	rjmp	.+230    	; 0xbb0 <__vector_24+0x236>
     aca:	88 3b       	cpi	r24, 0xB8	; 184
     acc:	09 f0       	breq	.+2      	; 0xad0 <__vector_24+0x156>
     ace:	7c cf       	rjmp	.-264    	; 0x9c8 <__vector_24+0x4e>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:538
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
     ad0:	e0 91 21 02 	lds	r30, 0x0221	; 0x800221 <twi_txBufferIndex>
     ad4:	81 e0       	ldi	r24, 0x01	; 1
     ad6:	8e 0f       	add	r24, r30
     ad8:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <twi_txBufferIndex>
     adc:	f0 e0       	ldi	r31, 0x00	; 0
     ade:	ee 5d       	subi	r30, 0xDE	; 222
     ae0:	fd 4f       	sbci	r31, 0xFD	; 253
     ae2:	80 81       	ld	r24, Z
     ae4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:540
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
     ae8:	90 91 21 02 	lds	r25, 0x0221	; 0x800221 <twi_txBufferIndex>
     aec:	80 91 20 02 	lds	r24, 0x0220	; 0x800220 <twi_txBufferLength>
     af0:	29 c0       	rjmp	.+82     	; 0xb44 <__vector_24+0x1ca>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:406
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
     af2:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <twi_slarw>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:416
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
     af6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
twi_reply():
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     afa:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:359
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     afc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     b00:	63 cf       	rjmp	.-314    	; 0x9c8 <__vector_24+0x4e>
__vector_24():
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:414

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
     b02:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <twi_masterBufferIndex>
     b06:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <twi_masterBufferLength>
     b0a:	98 17       	cp	r25, r24
     b0c:	58 f5       	brcc	.+86     	; 0xb64 <__vector_24+0x1ea>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:416
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
     b0e:	e0 91 43 02 	lds	r30, 0x0243	; 0x800243 <twi_masterBufferIndex>
     b12:	81 e0       	ldi	r24, 0x01	; 1
     b14:	8e 0f       	add	r24, r30
     b16:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <twi_masterBufferIndex>
     b1a:	f0 e0       	ldi	r31, 0x00	; 0
     b1c:	ec 5b       	subi	r30, 0xBC	; 188
     b1e:	fd 4f       	sbci	r31, 0xFD	; 253
     b20:	80 81       	ld	r24, Z
     b22:	e9 cf       	rjmp	.-46     	; 0xaf6 <__vector_24+0x17c>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:447
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     b24:	e0 91 43 02 	lds	r30, 0x0243	; 0x800243 <twi_masterBufferIndex>
     b28:	81 e0       	ldi	r24, 0x01	; 1
     b2a:	8e 0f       	add	r24, r30
     b2c:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <twi_masterBufferIndex>
     b30:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
     b34:	f0 e0       	ldi	r31, 0x00	; 0
     b36:	ec 5b       	subi	r30, 0xBC	; 188
     b38:	fd 4f       	sbci	r31, 0xFD	; 253
     b3a:	80 83       	st	Z, r24
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:451
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
     b3c:	90 91 43 02 	lds	r25, 0x0243	; 0x800243 <twi_masterBufferIndex>
     b40:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <twi_masterBufferLength>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:540
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
     b44:	98 17       	cp	r25, r24
     b46:	c8 f2       	brcs	.-78     	; 0xafa <__vector_24+0x180>
twi_reply():
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
     b48:	85 e8       	ldi	r24, 0x85	; 133
     b4a:	d8 cf       	rjmp	.-80     	; 0xafc <__vector_24+0x182>
__vector_24():
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:459
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
     b4c:	e0 91 43 02 	lds	r30, 0x0243	; 0x800243 <twi_masterBufferIndex>
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	8e 0f       	add	r24, r30
     b54:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <twi_masterBufferIndex>
     b58:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
     b5c:	f0 e0       	ldi	r31, 0x00	; 0
     b5e:	ec 5b       	subi	r30, 0xBC	; 188
     b60:	fd 4f       	sbci	r31, 0xFD	; 253
     b62:	80 83       	st	Z, r24
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:460
  if (twi_sendStop)
     b64:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <twi_sendStop>
     b68:	81 11       	cpse	r24, r1
     b6a:	5c cf       	rjmp	.-328    	; 0xa24 <__vector_24+0xaa>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:463
          twi_stop();
  else {
    twi_inRepStart = true;  // we're gonna send the START
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <twi_inRepStart>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:467
    // don't enable the interrupt. We'll generate the start, but we 
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
     b72:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     b74:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
__vector_24():
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:551
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
     b78:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <twi_state>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:552
      break;
     b7c:	25 cf       	rjmp	.-438    	; 0x9c8 <__vector_24+0x4e>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:501
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
     b7e:	0e 94 b7 04 	call	0x96e	; 0x96e <twi_releaseBus>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:503
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
     b82:	80 91 ff 01 	lds	r24, 0x01FF	; 0x8001ff <twi_rxBufferIndex>
     b86:	80 32       	cpi	r24, 0x20	; 32
     b88:	30 f4       	brcc	.+12     	; 0xb96 <__vector_24+0x21c>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:504
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
     b8a:	e0 91 ff 01 	lds	r30, 0x01FF	; 0x8001ff <twi_rxBufferIndex>
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	e0 50       	subi	r30, 0x00	; 0
     b92:	fe 4f       	sbci	r31, 0xFE	; 254
     b94:	10 82       	st	Z, r1
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:507
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
     b96:	60 91 ff 01 	lds	r22, 0x01FF	; 0x8001ff <twi_rxBufferIndex>
     b9a:	70 e0       	ldi	r23, 0x00	; 0
     b9c:	e0 91 64 02 	lds	r30, 0x0264	; 0x800264 <twi_onSlaveReceive>
     ba0:	f0 91 65 02 	lds	r31, 0x0265	; 0x800265 <twi_onSlaveReceive+0x1>
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	92 e0       	ldi	r25, 0x02	; 2
     ba8:	09 95       	icall
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:509
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
     baa:	10 92 ff 01 	sts	0x01FF, r1	; 0x8001ff <twi_rxBufferIndex>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:510
      break;
     bae:	0c cf       	rjmp	.-488    	; 0x9c8 <__vector_24+0x4e>
twi_reply():
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
     bb0:	85 ec       	ldi	r24, 0xC5	; 197
     bb2:	e0 cf       	rjmp	.-64     	; 0xb74 <__vector_24+0x1fa>
__vector_24():
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:558

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
     bb4:	10 92 fe 01 	sts	0x01FE, r1	; 0x8001fe <twi_error>
     bb8:	35 cf       	rjmp	.-406    	; 0xa24 <__vector_24+0xaa>

00000bba <PIDController::PIDController()>:
_ZN13PIDControllerC2Ev():
C:\Users\katel\OneDrive\Documents\Arduino\libraries\PIDController\src/PIDController.cpp:70
}

// Getters
double PIDController::getOutput () {
  return output;
}
     bba:	08 95       	ret

00000bbc <PIDController::begin()>:
_ZN13PIDController5beginEv():
     bbc:	fc 01       	movw	r30, r24
     bbe:	80 e0       	ldi	r24, 0x00	; 0
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	a0 e8       	ldi	r26, 0x80	; 128
     bc4:	bf e3       	ldi	r27, 0x3F	; 63
     bc6:	86 8f       	std	Z+30, r24	; 0x1e
     bc8:	97 8f       	std	Z+31, r25	; 0x1f
     bca:	a0 a3       	std	Z+32, r26	; 0x20
     bcc:	b1 a3       	std	Z+33, r27	; 0x21
     bce:	82 a3       	std	Z+34, r24	; 0x22
     bd0:	93 a3       	std	Z+35, r25	; 0x23
     bd2:	a4 a3       	std	Z+36, r26	; 0x24
     bd4:	b5 a3       	std	Z+37, r27	; 0x25
     bd6:	86 a3       	std	Z+38, r24	; 0x26
     bd8:	97 a3       	std	Z+39, r25	; 0x27
     bda:	a0 a7       	std	Z+40, r26	; 0x28
     bdc:	b1 a7       	std	Z+41, r27	; 0x29
     bde:	80 e0       	ldi	r24, 0x00	; 0
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	a0 e2       	ldi	r26, 0x20	; 32
     be4:	b1 e4       	ldi	r27, 0x41	; 65
     be6:	82 a7       	std	Z+42, r24	; 0x2a
     be8:	93 a7       	std	Z+43, r25	; 0x2b
     bea:	a4 a7       	std	Z+44, r26	; 0x2c
     bec:	b5 a7       	std	Z+45, r27	; 0x2d
     bee:	14 8e       	std	Z+28, r1	; 0x1c
     bf0:	81 e0       	ldi	r24, 0x01	; 1
     bf2:	85 8f       	std	Z+29, r24	; 0x1d
     bf4:	08 95       	ret

00000bf6 <PIDController::setpoint(double)>:
_ZN13PIDController8setpointEd():
     bf6:	fc 01       	movw	r30, r24
     bf8:	46 ab       	std	Z+54, r20	; 0x36
     bfa:	57 ab       	std	Z+55, r21	; 0x37
     bfc:	60 af       	std	Z+56, r22	; 0x38
     bfe:	71 af       	std	Z+57, r23	; 0x39
     c00:	08 95       	ret

00000c02 <PIDController::tune(double, double, double)>:
_ZN13PIDController4tuneEddd():
     c02:	4f 92       	push	r4
     c04:	5f 92       	push	r5
     c06:	6f 92       	push	r6
     c08:	7f 92       	push	r7
     c0a:	8f 92       	push	r8
     c0c:	9f 92       	push	r9
     c0e:	af 92       	push	r10
     c10:	bf 92       	push	r11
     c12:	cf 92       	push	r12
     c14:	df 92       	push	r13
     c16:	ef 92       	push	r14
     c18:	ff 92       	push	r15
     c1a:	0f 93       	push	r16
     c1c:	1f 93       	push	r17
     c1e:	cf 93       	push	r28
     c20:	df 93       	push	r29
     c22:	ec 01       	movw	r28, r24
     c24:	2a 01       	movw	r4, r20
     c26:	3b 01       	movw	r6, r22
     c28:	48 01       	movw	r8, r16
     c2a:	59 01       	movw	r10, r18
     c2c:	20 e0       	ldi	r18, 0x00	; 0
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	a9 01       	movw	r20, r18
     c32:	cb 01       	movw	r24, r22
     c34:	b2 01       	movw	r22, r4
     c36:	0e 94 67 0e 	call	0x1cce	; 0x1cce <__cmpsf2>
     c3a:	87 fd       	sbrc	r24, 7
     c3c:	1e c0       	rjmp	.+60     	; 0xc7a <PIDController::tune(double, double, double)+0x78>
     c3e:	20 e0       	ldi	r18, 0x00	; 0
     c40:	30 e0       	ldi	r19, 0x00	; 0
     c42:	a9 01       	movw	r20, r18
     c44:	c5 01       	movw	r24, r10
     c46:	b8 01       	movw	r22, r16
     c48:	0e 94 67 0e 	call	0x1cce	; 0x1cce <__cmpsf2>
     c4c:	87 fd       	sbrc	r24, 7
     c4e:	15 c0       	rjmp	.+42     	; 0xc7a <PIDController::tune(double, double, double)+0x78>
     c50:	20 e0       	ldi	r18, 0x00	; 0
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	a9 01       	movw	r20, r18
     c56:	c7 01       	movw	r24, r14
     c58:	b6 01       	movw	r22, r12
     c5a:	0e 94 67 0e 	call	0x1cce	; 0x1cce <__cmpsf2>
     c5e:	87 fd       	sbrc	r24, 7
     c60:	0c c0       	rjmp	.+24     	; 0xc7a <PIDController::tune(double, double, double)+0x78>
     c62:	4e 8e       	std	Y+30, r4	; 0x1e
     c64:	5f 8e       	std	Y+31, r5	; 0x1f
     c66:	68 a2       	std	Y+32, r6	; 0x20
     c68:	79 a2       	std	Y+33, r7	; 0x21
     c6a:	8a a2       	std	Y+34, r8	; 0x22
     c6c:	9b a2       	std	Y+35, r9	; 0x23
     c6e:	ac a2       	std	Y+36, r10	; 0x24
     c70:	bd a2       	std	Y+37, r11	; 0x25
     c72:	ce a2       	std	Y+38, r12	; 0x26
     c74:	df a2       	std	Y+39, r13	; 0x27
     c76:	e8 a6       	std	Y+40, r14	; 0x28
     c78:	f9 a6       	std	Y+41, r15	; 0x29
     c7a:	df 91       	pop	r29
     c7c:	cf 91       	pop	r28
     c7e:	1f 91       	pop	r17
     c80:	0f 91       	pop	r16
     c82:	ff 90       	pop	r15
     c84:	ef 90       	pop	r14
     c86:	df 90       	pop	r13
     c88:	cf 90       	pop	r12
     c8a:	bf 90       	pop	r11
     c8c:	af 90       	pop	r10
     c8e:	9f 90       	pop	r9
     c90:	8f 90       	pop	r8
     c92:	7f 90       	pop	r7
     c94:	6f 90       	pop	r6
     c96:	5f 90       	pop	r5
     c98:	4f 90       	pop	r4
     c9a:	08 95       	ret

00000c9c <PIDController::limit(double, double)>:
_ZN13PIDController5limitEdd():
     c9c:	0f 93       	push	r16
     c9e:	1f 93       	push	r17
     ca0:	fc 01       	movw	r30, r24
     ca2:	46 a7       	std	Z+46, r20	; 0x2e
     ca4:	57 a7       	std	Z+47, r21	; 0x2f
     ca6:	60 ab       	std	Z+48, r22	; 0x30
     ca8:	71 ab       	std	Z+49, r23	; 0x31
     caa:	02 ab       	std	Z+50, r16	; 0x32
     cac:	13 ab       	std	Z+51, r17	; 0x33
     cae:	24 ab       	std	Z+52, r18	; 0x34
     cb0:	35 ab       	std	Z+53, r19	; 0x35
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	84 8f       	std	Z+28, r24	; 0x1c
     cb6:	1f 91       	pop	r17
     cb8:	0f 91       	pop	r16
     cba:	08 95       	ret

00000cbc <PIDController::printGraph(double, String)>:
_ZN13PIDController10printGraphEd6String():
     cbc:	0f 93       	push	r16
     cbe:	1f 93       	push	r17
     cc0:	cf 93       	push	r28
     cc2:	df 93       	push	r29
     cc4:	ec 01       	movw	r28, r24
     cc6:	89 01       	movw	r16, r18
     cc8:	22 e0       	ldi	r18, 0x02	; 2
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	85 e7       	ldi	r24, 0x75	; 117
     cce:	92 e0       	ldi	r25, 0x02	; 2
     cd0:	0e 94 41 0c 	call	0x1882	; 0x1882 <Print::print(double, int)>
_ZNK6StringeqEPKc():
     cd4:	6d e0       	ldi	r22, 0x0D	; 13
     cd6:	71 e0       	ldi	r23, 0x01	; 1
     cd8:	c8 01       	movw	r24, r16
     cda:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <String::equals(char const*) const>
_ZN13PIDController10printGraphEd6String():
     cde:	88 23       	and	r24, r24
     ce0:	81 f0       	breq	.+32     	; 0xd02 <PIDController::printGraph(double, String)+0x46>
     ce2:	6f e2       	ldi	r22, 0x2F	; 47
     ce4:	71 e0       	ldi	r23, 0x01	; 1
     ce6:	85 e7       	ldi	r24, 0x75	; 117
     ce8:	92 e0       	ldi	r25, 0x02	; 2
     cea:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <Print::print(char const*)>
     cee:	4c 81       	ldd	r20, Y+4	; 0x04
     cf0:	5d 81       	ldd	r21, Y+5	; 0x05
     cf2:	6e 81       	ldd	r22, Y+6	; 0x06
     cf4:	7f 81       	ldd	r23, Y+7	; 0x07
     cf6:	22 e0       	ldi	r18, 0x02	; 2
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	85 e7       	ldi	r24, 0x75	; 117
     cfc:	92 e0       	ldi	r25, 0x02	; 2
     cfe:	0e 94 41 0c 	call	0x1882	; 0x1882 <Print::print(double, int)>
     d02:	6f e2       	ldi	r22, 0x2F	; 47
     d04:	71 e0       	ldi	r23, 0x01	; 1
     d06:	85 e7       	ldi	r24, 0x75	; 117
     d08:	92 e0       	ldi	r25, 0x02	; 2
     d0a:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <Print::print(char const*)>
     d0e:	4e a9       	ldd	r20, Y+54	; 0x36
     d10:	5f a9       	ldd	r21, Y+55	; 0x37
     d12:	68 ad       	ldd	r22, Y+56	; 0x38
     d14:	79 ad       	ldd	r23, Y+57	; 0x39
     d16:	22 e0       	ldi	r18, 0x02	; 2
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	85 e7       	ldi	r24, 0x75	; 117
     d1c:	92 e0       	ldi	r25, 0x02	; 2
     d1e:	df 91       	pop	r29
     d20:	cf 91       	pop	r28
     d22:	1f 91       	pop	r17
     d24:	0f 91       	pop	r16
     d26:	0c 94 43 0c 	jmp	0x1886	; 0x1886 <Print::println(double, int)>

00000d2a <PIDController::compute(double, String, String)>:
_ZN13PIDController7computeEd6StringS0_():
C:\Users\katel\OneDrive\Documents\Arduino\libraries\PIDController\src/PIDController.cpp:73


double PIDController::compute (double sensor, String graph, String verbose) {
     d2a:	2f 92       	push	r2
     d2c:	3f 92       	push	r3
     d2e:	4f 92       	push	r4
     d30:	5f 92       	push	r5
     d32:	6f 92       	push	r6
     d34:	7f 92       	push	r7
     d36:	8f 92       	push	r8
     d38:	9f 92       	push	r9
     d3a:	af 92       	push	r10
     d3c:	bf 92       	push	r11
     d3e:	cf 92       	push	r12
     d40:	df 92       	push	r13
     d42:	ef 92       	push	r14
     d44:	ff 92       	push	r15
     d46:	0f 93       	push	r16
     d48:	1f 93       	push	r17
     d4a:	cf 93       	push	r28
     d4c:	df 93       	push	r29
     d4e:	cd b7       	in	r28, 0x3d	; 61
     d50:	de b7       	in	r29, 0x3e	; 62
     d52:	69 97       	sbiw	r28, 0x19	; 25
     d54:	0f b6       	in	r0, 0x3f	; 63
     d56:	f8 94       	cli
     d58:	de bf       	out	0x3e, r29	; 62
     d5a:	0f be       	out	0x3f, r0	; 63
     d5c:	cd bf       	out	0x3d, r28	; 61
C:\Users\katel\OneDrive\Documents\Arduino\libraries\PIDController\src/PIDController.cpp:78
  // Return false if it could not execute;
  // This is the actual PID algorithm executed every loop();

  // Failsafe, return if the begin() method hasn't been called
  if (!init) return 0;
     d5e:	dc 01       	movw	r26, r24
     d60:	5d 96       	adiw	r26, 0x1d	; 29
     d62:	ec 91       	ld	r30, X
     d64:	ee 23       	and	r30, r30
     d66:	09 f4       	brne	.+2      	; 0xd6a <PIDController::compute(double, String, String)+0x40>
     d68:	54 c1       	rjmp	.+680    	; 0x1012 <PIDController::compute(double, String, String)+0x2e8>
     d6a:	19 8f       	std	Y+25, r17	; 0x19
     d6c:	08 8f       	std	Y+24, r16	; 0x18
     d6e:	3f 8b       	std	Y+23, r19	; 0x17
     d70:	2e 8b       	std	Y+22, r18	; 0x16
     d72:	4e 87       	std	Y+14, r20	; 0x0e
     d74:	5f 87       	std	Y+15, r21	; 0x0f
     d76:	68 8b       	std	Y+16, r22	; 0x10
     d78:	79 8b       	std	Y+17, r23	; 0x11
     d7a:	1c 01       	movw	r2, r24
C:\Users\katel\OneDrive\Documents\Arduino\libraries\PIDController\src/PIDController.cpp:81

  // Calculate time difference since last time executed
  unsigned long now = millis();
     d7c:	0e 94 57 08 	call	0x10ae	; 0x10ae <millis>
     d80:	6a 87       	std	Y+10, r22	; 0x0a
     d82:	7b 87       	std	Y+11, r23	; 0x0b
     d84:	8c 87       	std	Y+12, r24	; 0x0c
     d86:	9d 87       	std	Y+13, r25	; 0x0d
C:\Users\katel\OneDrive\Documents\Arduino\libraries\PIDController\src/PIDController.cpp:82
  double timeChange = (double)(now - lastTime);
     d88:	f1 01       	movw	r30, r2
     d8a:	80 81       	ld	r24, Z
     d8c:	91 81       	ldd	r25, Z+1	; 0x01
     d8e:	a2 81       	ldd	r26, Z+2	; 0x02
     d90:	b3 81       	ldd	r27, Z+3	; 0x03
     d92:	2a 85       	ldd	r18, Y+10	; 0x0a
     d94:	3b 85       	ldd	r19, Y+11	; 0x0b
     d96:	4c 85       	ldd	r20, Y+12	; 0x0c
     d98:	5d 85       	ldd	r21, Y+13	; 0x0d
     d9a:	28 1b       	sub	r18, r24
     d9c:	39 0b       	sbc	r19, r25
     d9e:	4a 0b       	sbc	r20, r26
     da0:	5b 0b       	sbc	r21, r27
     da2:	ca 01       	movw	r24, r20
     da4:	b9 01       	movw	r22, r18
     da6:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <__floatunsisf>
     daa:	2b 01       	movw	r4, r22
     dac:	3c 01       	movw	r6, r24
C:\Users\katel\OneDrive\Documents\Arduino\libraries\PIDController\src/PIDController.cpp:85

  // Calculate error (P, I and D)
  double error = setPoint - sensor;
     dae:	2e 85       	ldd	r18, Y+14	; 0x0e
     db0:	3f 85       	ldd	r19, Y+15	; 0x0f
     db2:	48 89       	ldd	r20, Y+16	; 0x10
     db4:	59 89       	ldd	r21, Y+17	; 0x11
     db6:	d1 01       	movw	r26, r2
     db8:	d6 96       	adiw	r26, 0x36	; 54
     dba:	6d 91       	ld	r22, X+
     dbc:	7d 91       	ld	r23, X+
     dbe:	8d 91       	ld	r24, X+
     dc0:	9c 91       	ld	r25, X
     dc2:	d9 97       	sbiw	r26, 0x39	; 57
     dc4:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <__subsf3>
     dc8:	4b 01       	movw	r8, r22
     dca:	5c 01       	movw	r10, r24
C:\Users\katel\OneDrive\Documents\Arduino\libraries\PIDController\src/PIDController.cpp:86
  errSum += error * timeChange;
     dcc:	ac 01       	movw	r20, r24
     dce:	9b 01       	movw	r18, r22
     dd0:	c3 01       	movw	r24, r6
     dd2:	b2 01       	movw	r22, r4
     dd4:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <__mulsf3>
     dd8:	f1 01       	movw	r30, r2
     dda:	24 89       	ldd	r18, Z+20	; 0x14
     ddc:	35 89       	ldd	r19, Z+21	; 0x15
     dde:	46 89       	ldd	r20, Z+22	; 0x16
     de0:	57 89       	ldd	r21, Z+23	; 0x17
     de2:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <__addsf3>
     de6:	d6 2e       	mov	r13, r22
     de8:	c7 2e       	mov	r12, r23
     dea:	8f 83       	std	Y+7, r24	; 0x07
     dec:	98 87       	std	Y+8, r25	; 0x08
     dee:	86 2f       	mov	r24, r22
     df0:	9c 2d       	mov	r25, r12
     df2:	af 81       	ldd	r26, Y+7	; 0x07
     df4:	b8 85       	ldd	r27, Y+8	; 0x08
     df6:	f1 01       	movw	r30, r2
     df8:	84 8b       	std	Z+20, r24	; 0x14
     dfa:	95 8b       	std	Z+21, r25	; 0x15
     dfc:	a6 8b       	std	Z+22, r26	; 0x16
     dfe:	b7 8b       	std	Z+23, r27	; 0x17
C:\Users\katel\OneDrive\Documents\Arduino\libraries\PIDController\src/PIDController.cpp:87
  if (doLimit) {
     e00:	f4 8d       	ldd	r31, Z+28	; 0x1c
     e02:	f9 87       	std	Y+9, r31	; 0x09
     e04:	ff 23       	and	r31, r31
     e06:	09 f4       	brne	.+2      	; 0xe0a <PIDController::compute(double, String, String)+0xe0>
     e08:	45 c0       	rjmp	.+138    	; 0xe94 <PIDController::compute(double, String, String)+0x16a>
C:\Users\katel\OneDrive\Documents\Arduino\libraries\PIDController\src/PIDController.cpp:88
    errSum = constrain(errSum, minOut * 1.1, maxOut * 1.1); 
     e0a:	2d ec       	ldi	r18, 0xCD	; 205
     e0c:	3c ec       	ldi	r19, 0xCC	; 204
     e0e:	4c e8       	ldi	r20, 0x8C	; 140
     e10:	5f e3       	ldi	r21, 0x3F	; 63
     e12:	d1 01       	movw	r26, r2
     e14:	9e 96       	adiw	r26, 0x2e	; 46
     e16:	6d 91       	ld	r22, X+
     e18:	7d 91       	ld	r23, X+
     e1a:	8d 91       	ld	r24, X+
     e1c:	9c 91       	ld	r25, X
     e1e:	d1 97       	sbiw	r26, 0x31	; 49
     e20:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <__mulsf3>
     e24:	7b 01       	movw	r14, r22
     e26:	8c 01       	movw	r16, r24
     e28:	d1 01       	movw	r26, r2
     e2a:	d2 96       	adiw	r26, 0x32	; 50
     e2c:	2d 91       	ld	r18, X+
     e2e:	3d 91       	ld	r19, X+
     e30:	4d 91       	ld	r20, X+
     e32:	5c 91       	ld	r21, X
     e34:	d5 97       	sbiw	r26, 0x35	; 53
     e36:	2a 8b       	std	Y+18, r18	; 0x12
     e38:	3b 8b       	std	Y+19, r19	; 0x13
     e3a:	4c 8b       	std	Y+20, r20	; 0x14
     e3c:	5d 8b       	std	Y+21, r21	; 0x15
     e3e:	9b 01       	movw	r18, r22
     e40:	ac 01       	movw	r20, r24
     e42:	6d 2d       	mov	r22, r13
     e44:	7c 2d       	mov	r23, r12
     e46:	8f 81       	ldd	r24, Y+7	; 0x07
     e48:	98 85       	ldd	r25, Y+8	; 0x08
     e4a:	0e 94 67 0e 	call	0x1cce	; 0x1cce <__cmpsf2>
     e4e:	87 fd       	sbrc	r24, 7
     e50:	1a c0       	rjmp	.+52     	; 0xe86 <PIDController::compute(double, String, String)+0x15c>
C:\Users\katel\OneDrive\Documents\Arduino\libraries\PIDController\src/PIDController.cpp:88 (discriminator 2)
     e52:	2d ec       	ldi	r18, 0xCD	; 205
     e54:	3c ec       	ldi	r19, 0xCC	; 204
     e56:	4c e8       	ldi	r20, 0x8C	; 140
     e58:	5f e3       	ldi	r21, 0x3F	; 63
     e5a:	6a 89       	ldd	r22, Y+18	; 0x12
     e5c:	7b 89       	ldd	r23, Y+19	; 0x13
     e5e:	8c 89       	ldd	r24, Y+20	; 0x14
     e60:	9d 89       	ldd	r25, Y+21	; 0x15
     e62:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <__mulsf3>
     e66:	7b 01       	movw	r14, r22
     e68:	8c 01       	movw	r16, r24
     e6a:	9b 01       	movw	r18, r22
     e6c:	ac 01       	movw	r20, r24
     e6e:	6d 2d       	mov	r22, r13
     e70:	7c 2d       	mov	r23, r12
     e72:	8f 81       	ldd	r24, Y+7	; 0x07
     e74:	98 85       	ldd	r25, Y+8	; 0x08
     e76:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <__gesf2>
     e7a:	18 16       	cp	r1, r24
     e7c:	24 f0       	brlt	.+8      	; 0xe86 <PIDController::compute(double, String, String)+0x15c>
C:\Users\katel\OneDrive\Documents\Arduino\libraries\PIDController\src/PIDController.cpp:88
     e7e:	ed 2c       	mov	r14, r13
     e80:	fc 2c       	mov	r15, r12
     e82:	0f 81       	ldd	r16, Y+7	; 0x07
     e84:	18 85       	ldd	r17, Y+8	; 0x08
C:\Users\katel\OneDrive\Documents\Arduino\libraries\PIDController\src/PIDController.cpp:88 (discriminator 8)
     e86:	c7 01       	movw	r24, r14
     e88:	d8 01       	movw	r26, r16
     e8a:	f1 01       	movw	r30, r2
     e8c:	84 8b       	std	Z+20, r24	; 0x14
     e8e:	95 8b       	std	Z+21, r25	; 0x15
     e90:	a6 8b       	std	Z+22, r26	; 0x16
     e92:	b7 8b       	std	Z+23, r27	; 0x17
C:\Users\katel\OneDrive\Documents\Arduino\libraries\PIDController\src/PIDController.cpp:93
  }
  double dErr = (error - lastErr) / timeChange;

  // Calculate the new output by adding all three elements together
  double newOutput = (Kp * error + Ki * errSum + Kd * dErr) / divisor;
     e94:	d1 01       	movw	r26, r2
     e96:	54 96       	adiw	r26, 0x14	; 20
     e98:	2d 91       	ld	r18, X+
     e9a:	3d 91       	ld	r19, X+
     e9c:	4d 91       	ld	r20, X+
     e9e:	5c 91       	ld	r21, X
     ea0:	57 97       	sbiw	r26, 0x17	; 23
     ea2:	92 96       	adiw	r26, 0x22	; 34
     ea4:	6d 91       	ld	r22, X+
     ea6:	7d 91       	ld	r23, X+
     ea8:	8d 91       	ld	r24, X+
     eaa:	9c 91       	ld	r25, X
     eac:	95 97       	sbiw	r26, 0x25	; 37
     eae:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <__mulsf3>
     eb2:	6b 01       	movw	r12, r22
     eb4:	7c 01       	movw	r14, r24
     eb6:	f1 01       	movw	r30, r2
     eb8:	26 8d       	ldd	r18, Z+30	; 0x1e
     eba:	37 8d       	ldd	r19, Z+31	; 0x1f
     ebc:	40 a1       	ldd	r20, Z+32	; 0x20
     ebe:	51 a1       	ldd	r21, Z+33	; 0x21
     ec0:	c5 01       	movw	r24, r10
     ec2:	b4 01       	movw	r22, r8
     ec4:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <__mulsf3>
     ec8:	9b 01       	movw	r18, r22
     eca:	ac 01       	movw	r20, r24
     ecc:	c7 01       	movw	r24, r14
     ece:	b6 01       	movw	r22, r12
     ed0:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <__addsf3>
     ed4:	6b 01       	movw	r12, r22
     ed6:	7c 01       	movw	r14, r24
C:\Users\katel\OneDrive\Documents\Arduino\libraries\PIDController\src/PIDController.cpp:90
  double error = setPoint - sensor;
  errSum += error * timeChange;
  if (doLimit) {
    errSum = constrain(errSum, minOut * 1.1, maxOut * 1.1); 
  }
  double dErr = (error - lastErr) / timeChange;
     ed8:	d1 01       	movw	r26, r2
     eda:	18 96       	adiw	r26, 0x08	; 8
     edc:	2d 91       	ld	r18, X+
     ede:	3d 91       	ld	r19, X+
     ee0:	4d 91       	ld	r20, X+
     ee2:	5c 91       	ld	r21, X
     ee4:	1b 97       	sbiw	r26, 0x0b	; 11
     ee6:	c5 01       	movw	r24, r10
     ee8:	b4 01       	movw	r22, r8
     eea:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <__subsf3>
     eee:	a3 01       	movw	r20, r6
     ef0:	92 01       	movw	r18, r4
     ef2:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <__divsf3>
C:\Users\katel\OneDrive\Documents\Arduino\libraries\PIDController\src/PIDController.cpp:93

  // Calculate the new output by adding all three elements together
  double newOutput = (Kp * error + Ki * errSum + Kd * dErr) / divisor;
     ef6:	f1 01       	movw	r30, r2
     ef8:	26 a1       	ldd	r18, Z+38	; 0x26
     efa:	37 a1       	ldd	r19, Z+39	; 0x27
     efc:	40 a5       	ldd	r20, Z+40	; 0x28
     efe:	51 a5       	ldd	r21, Z+41	; 0x29
     f00:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <__mulsf3>
     f04:	9b 01       	movw	r18, r22
     f06:	ac 01       	movw	r20, r24
     f08:	c7 01       	movw	r24, r14
     f0a:	b6 01       	movw	r22, r12
     f0c:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <__addsf3>
     f10:	d1 01       	movw	r26, r2
     f12:	9a 96       	adiw	r26, 0x2a	; 42
     f14:	2d 91       	ld	r18, X+
     f16:	3d 91       	ld	r19, X+
     f18:	4d 91       	ld	r20, X+
     f1a:	5c 91       	ld	r21, X
     f1c:	9d 97       	sbiw	r26, 0x2d	; 45
     f1e:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <__divsf3>
     f22:	7b 01       	movw	r14, r22
     f24:	8c 01       	movw	r16, r24
C:\Users\katel\OneDrive\Documents\Arduino\libraries\PIDController\src/PIDController.cpp:96

  // If limit is specifyed, limit the output
  if (doLimit) {
     f26:	b9 85       	ldd	r27, Y+9	; 0x09
     f28:	bb 23       	and	r27, r27
     f2a:	09 f4       	brne	.+2      	; 0xf2e <PIDController::compute(double, String, String)+0x204>
     f2c:	6f c0       	rjmp	.+222    	; 0x100c <PIDController::compute(double, String, String)+0x2e2>
C:\Users\katel\OneDrive\Documents\Arduino\libraries\PIDController\src/PIDController.cpp:97
    output = constrain(newOutput, minOut, maxOut);
     f2e:	f1 01       	movw	r30, r2
     f30:	66 a4       	ldd	r6, Z+46	; 0x2e
     f32:	77 a4       	ldd	r7, Z+47	; 0x2f
     f34:	c0 a8       	ldd	r12, Z+48	; 0x30
     f36:	d1 a8       	ldd	r13, Z+49	; 0x31
     f38:	f2 a9       	ldd	r31, Z+50	; 0x32
     f3a:	ff 83       	std	Y+7, r31	; 0x07
     f3c:	d1 01       	movw	r26, r2
     f3e:	d3 96       	adiw	r26, 0x33	; 51
     f40:	bc 91       	ld	r27, X
     f42:	b8 87       	std	Y+8, r27	; 0x08
     f44:	f1 01       	movw	r30, r2
     f46:	44 a8       	ldd	r4, Z+52	; 0x34
     f48:	55 a8       	ldd	r5, Z+53	; 0x35
     f4a:	93 01       	movw	r18, r6
     f4c:	a6 01       	movw	r20, r12
     f4e:	0e 94 67 0e 	call	0x1cce	; 0x1cce <__cmpsf2>
     f52:	87 fd       	sbrc	r24, 7
     f54:	0e c0       	rjmp	.+28     	; 0xf72 <PIDController::compute(double, String, String)+0x248>
C:\Users\katel\OneDrive\Documents\Arduino\libraries\PIDController\src/PIDController.cpp:97 (discriminator 2)
     f56:	2f 81       	ldd	r18, Y+7	; 0x07
     f58:	38 85       	ldd	r19, Y+8	; 0x08
     f5a:	a2 01       	movw	r20, r4
     f5c:	b7 01       	movw	r22, r14
     f5e:	c8 01       	movw	r24, r16
     f60:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <__gesf2>
     f64:	37 01       	movw	r6, r14
     f66:	68 01       	movw	r12, r16
     f68:	18 16       	cp	r1, r24
     f6a:	1c f4       	brge	.+6      	; 0xf72 <PIDController::compute(double, String, String)+0x248>
C:\Users\katel\OneDrive\Documents\Arduino\libraries\PIDController\src/PIDController.cpp:97
     f6c:	6f 80       	ldd	r6, Y+7	; 0x07
     f6e:	78 84       	ldd	r7, Y+8	; 0x08
     f70:	62 01       	movw	r12, r4
C:\Users\katel\OneDrive\Documents\Arduino\libraries\PIDController\src/PIDController.cpp:97 (discriminator 8)
     f72:	c3 01       	movw	r24, r6
     f74:	d6 01       	movw	r26, r12
C:\Users\katel\OneDrive\Documents\Arduino\libraries\PIDController\src/PIDController.cpp:99
  } else {
    output = newOutput;  
     f76:	f1 01       	movw	r30, r2
     f78:	84 83       	std	Z+4, r24	; 0x04
     f7a:	95 83       	std	Z+5, r25	; 0x05
     f7c:	a6 83       	std	Z+6, r26	; 0x06
     f7e:	b7 83       	std	Z+7, r27	; 0x07
C:\Users\katel\OneDrive\Documents\Arduino\libraries\PIDController\src/PIDController.cpp:103
  }

  // Update lastErr and lastTime to current values for use in next execution
  lastErr = error;
     f80:	80 86       	std	Z+8, r8	; 0x08
     f82:	91 86       	std	Z+9, r9	; 0x09
     f84:	a2 86       	std	Z+10, r10	; 0x0a
     f86:	b3 86       	std	Z+11, r11	; 0x0b
C:\Users\katel\OneDrive\Documents\Arduino\libraries\PIDController\src/PIDController.cpp:104
  lastTime = now;
     f88:	2a 85       	ldd	r18, Y+10	; 0x0a
     f8a:	3b 85       	ldd	r19, Y+11	; 0x0b
     f8c:	4c 85       	ldd	r20, Y+12	; 0x0c
     f8e:	5d 85       	ldd	r21, Y+13	; 0x0d
     f90:	20 83       	st	Z, r18
     f92:	31 83       	std	Z+1, r19	; 0x01
     f94:	42 83       	std	Z+2, r20	; 0x02
     f96:	53 83       	std	Z+3, r21	; 0x03
_ZNK6StringeqEPKc():
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.h:143
  operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
  int compareTo(const String &s) const;
  unsigned char equals(const String &s) const;
  unsigned char equals(const char *cstr) const;
  unsigned char operator == (const String &rhs) const {return equals(rhs);}
  unsigned char operator == (const char *cstr) const {return equals(cstr);}
     f98:	67 e1       	ldi	r22, 0x17	; 23
     f9a:	71 e0       	ldi	r23, 0x01	; 1
     f9c:	8e 89       	ldd	r24, Y+22	; 0x16
     f9e:	9f 89       	ldd	r25, Y+23	; 0x17
     fa0:	0e 94 f9 0c 	call	0x19f2	; 0x19f2 <String::equals(char const*) const>
_ZN13PIDController7computeEd6StringS0_():
C:\Users\katel\OneDrive\Documents\Arduino\libraries\PIDController\src/PIDController.cpp:107

  // Draw the garph if GRAPH mode
  if (graph == GRAPH) {
     fa4:	88 23       	and	r24, r24
     fa6:	a1 f0       	breq	.+40     	; 0xfd0 <PIDController::compute(double, String, String)+0x2a6>
C:\Users\katel\OneDrive\Documents\Arduino\libraries\PIDController\src/PIDController.cpp:108
    printGraph(sensor, verbose);
     fa8:	68 8d       	ldd	r22, Y+24	; 0x18
     faa:	79 8d       	ldd	r23, Y+25	; 0x19
     fac:	ce 01       	movw	r24, r28
     fae:	01 96       	adiw	r24, 0x01	; 1
     fb0:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <String::String(String const&)>
     fb4:	9e 01       	movw	r18, r28
     fb6:	2f 5f       	subi	r18, 0xFF	; 255
     fb8:	3f 4f       	sbci	r19, 0xFF	; 255
     fba:	4e 85       	ldd	r20, Y+14	; 0x0e
     fbc:	5f 85       	ldd	r21, Y+15	; 0x0f
     fbe:	68 89       	ldd	r22, Y+16	; 0x10
     fc0:	79 89       	ldd	r23, Y+17	; 0x11
     fc2:	c1 01       	movw	r24, r2
     fc4:	0e 94 5e 06 	call	0xcbc	; 0xcbc <PIDController::printGraph(double, String)>
     fc8:	ce 01       	movw	r24, r28
     fca:	01 96       	adiw	r24, 0x01	; 1
     fcc:	0e 94 55 0c 	call	0x18aa	; 0x18aa <String::~String()>
C:\Users\katel\OneDrive\Documents\Arduino\libraries\PIDController\src/PIDController.cpp:112
  }

  // Return the current output
  return output;
     fd0:	f1 01       	movw	r30, r2
     fd2:	64 81       	ldd	r22, Z+4	; 0x04
     fd4:	75 81       	ldd	r23, Z+5	; 0x05
     fd6:	86 81       	ldd	r24, Z+6	; 0x06
     fd8:	97 81       	ldd	r25, Z+7	; 0x07
C:\Users\katel\OneDrive\Documents\Arduino\libraries\PIDController\src/PIDController.cpp:113
}
     fda:	69 96       	adiw	r28, 0x19	; 25
     fdc:	0f b6       	in	r0, 0x3f	; 63
     fde:	f8 94       	cli
     fe0:	de bf       	out	0x3e, r29	; 62
     fe2:	0f be       	out	0x3f, r0	; 63
     fe4:	cd bf       	out	0x3d, r28	; 61
     fe6:	df 91       	pop	r29
     fe8:	cf 91       	pop	r28
     fea:	1f 91       	pop	r17
     fec:	0f 91       	pop	r16
     fee:	ff 90       	pop	r15
     ff0:	ef 90       	pop	r14
     ff2:	df 90       	pop	r13
     ff4:	cf 90       	pop	r12
     ff6:	bf 90       	pop	r11
     ff8:	af 90       	pop	r10
     ffa:	9f 90       	pop	r9
     ffc:	8f 90       	pop	r8
     ffe:	7f 90       	pop	r7
    1000:	6f 90       	pop	r6
    1002:	5f 90       	pop	r5
    1004:	4f 90       	pop	r4
    1006:	3f 90       	pop	r3
    1008:	2f 90       	pop	r2
    100a:	08 95       	ret
C:\Users\katel\OneDrive\Documents\Arduino\libraries\PIDController\src/PIDController.cpp:99

  // If limit is specifyed, limit the output
  if (doLimit) {
    output = constrain(newOutput, minOut, maxOut);
  } else {
    output = newOutput;  
    100c:	cb 01       	movw	r24, r22
    100e:	d8 01       	movw	r26, r16
    1010:	b2 cf       	rjmp	.-156    	; 0xf76 <PIDController::compute(double, String, String)+0x24c>
C:\Users\katel\OneDrive\Documents\Arduino\libraries\PIDController\src/PIDController.cpp:78
double PIDController::compute (double sensor, String graph, String verbose) {
  // Return false if it could not execute;
  // This is the actual PID algorithm executed every loop();

  // Failsafe, return if the begin() method hasn't been called
  if (!init) return 0;
    1012:	60 e0       	ldi	r22, 0x00	; 0
    1014:	70 e0       	ldi	r23, 0x00	; 0
    1016:	cb 01       	movw	r24, r22
    1018:	e0 cf       	rjmp	.-64     	; 0xfda <PIDController::compute(double, String, String)+0x2b0>

0000101a <__vector_16>:
__vector_16():
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
    101a:	1f 92       	push	r1
    101c:	0f 92       	push	r0
    101e:	0f b6       	in	r0, 0x3f	; 63
    1020:	0f 92       	push	r0
    1022:	11 24       	eor	r1, r1
    1024:	2f 93       	push	r18
    1026:	3f 93       	push	r19
    1028:	8f 93       	push	r24
    102a:	9f 93       	push	r25
    102c:	af 93       	push	r26
    102e:	bf 93       	push	r27
    1030:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <timer0_millis>
    1034:	90 91 72 02 	lds	r25, 0x0272	; 0x800272 <timer0_millis+0x1>
    1038:	a0 91 73 02 	lds	r26, 0x0273	; 0x800273 <timer0_millis+0x2>
    103c:	b0 91 74 02 	lds	r27, 0x0274	; 0x800274 <timer0_millis+0x3>
    1040:	30 91 70 02 	lds	r19, 0x0270	; 0x800270 <timer0_fract>
    1044:	23 e0       	ldi	r18, 0x03	; 3
    1046:	23 0f       	add	r18, r19
    1048:	2d 37       	cpi	r18, 0x7D	; 125
    104a:	68 f1       	brcs	.+90     	; 0x10a6 <__vector_16+0x8c>
    104c:	26 e8       	ldi	r18, 0x86	; 134
    104e:	23 0f       	add	r18, r19
    1050:	02 96       	adiw	r24, 0x02	; 2
    1052:	a1 1d       	adc	r26, r1
    1054:	b1 1d       	adc	r27, r1
    1056:	20 93 70 02 	sts	0x0270, r18	; 0x800270 <timer0_fract>
    105a:	80 93 71 02 	sts	0x0271, r24	; 0x800271 <timer0_millis>
    105e:	90 93 72 02 	sts	0x0272, r25	; 0x800272 <timer0_millis+0x1>
    1062:	a0 93 73 02 	sts	0x0273, r26	; 0x800273 <timer0_millis+0x2>
    1066:	b0 93 74 02 	sts	0x0274, r27	; 0x800274 <timer0_millis+0x3>
    106a:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <timer0_overflow_count>
    106e:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <timer0_overflow_count+0x1>
    1072:	a0 91 6e 02 	lds	r26, 0x026E	; 0x80026e <timer0_overflow_count+0x2>
    1076:	b0 91 6f 02 	lds	r27, 0x026F	; 0x80026f <timer0_overflow_count+0x3>
    107a:	01 96       	adiw	r24, 0x01	; 1
    107c:	a1 1d       	adc	r26, r1
    107e:	b1 1d       	adc	r27, r1
    1080:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <timer0_overflow_count>
    1084:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <timer0_overflow_count+0x1>
    1088:	a0 93 6e 02 	sts	0x026E, r26	; 0x80026e <timer0_overflow_count+0x2>
    108c:	b0 93 6f 02 	sts	0x026F, r27	; 0x80026f <timer0_overflow_count+0x3>
    1090:	bf 91       	pop	r27
    1092:	af 91       	pop	r26
    1094:	9f 91       	pop	r25
    1096:	8f 91       	pop	r24
    1098:	3f 91       	pop	r19
    109a:	2f 91       	pop	r18
    109c:	0f 90       	pop	r0
    109e:	0f be       	out	0x3f, r0	; 63
    10a0:	0f 90       	pop	r0
    10a2:	1f 90       	pop	r1
    10a4:	18 95       	reti
    10a6:	01 96       	adiw	r24, 0x01	; 1
    10a8:	a1 1d       	adc	r26, r1
    10aa:	b1 1d       	adc	r27, r1
    10ac:	d4 cf       	rjmp	.-88     	; 0x1056 <__vector_16+0x3c>

000010ae <millis>:
millis():
    10ae:	2f b7       	in	r18, 0x3f	; 63
    10b0:	f8 94       	cli
    10b2:	60 91 71 02 	lds	r22, 0x0271	; 0x800271 <timer0_millis>
    10b6:	70 91 72 02 	lds	r23, 0x0272	; 0x800272 <timer0_millis+0x1>
    10ba:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <timer0_millis+0x2>
    10be:	90 91 74 02 	lds	r25, 0x0274	; 0x800274 <timer0_millis+0x3>
    10c2:	2f bf       	out	0x3f, r18	; 63
    10c4:	08 95       	ret

000010c6 <micros>:
micros():
    10c6:	3f b7       	in	r19, 0x3f	; 63
    10c8:	f8 94       	cli
    10ca:	80 91 6c 02 	lds	r24, 0x026C	; 0x80026c <timer0_overflow_count>
    10ce:	90 91 6d 02 	lds	r25, 0x026D	; 0x80026d <timer0_overflow_count+0x1>
    10d2:	a0 91 6e 02 	lds	r26, 0x026E	; 0x80026e <timer0_overflow_count+0x2>
    10d6:	b0 91 6f 02 	lds	r27, 0x026F	; 0x80026f <timer0_overflow_count+0x3>
    10da:	26 b5       	in	r18, 0x26	; 38
    10dc:	a8 9b       	sbis	0x15, 0	; 21
    10de:	05 c0       	rjmp	.+10     	; 0x10ea <micros+0x24>
    10e0:	2f 3f       	cpi	r18, 0xFF	; 255
    10e2:	19 f0       	breq	.+6      	; 0x10ea <micros+0x24>
    10e4:	01 96       	adiw	r24, 0x01	; 1
    10e6:	a1 1d       	adc	r26, r1
    10e8:	b1 1d       	adc	r27, r1
    10ea:	3f bf       	out	0x3f, r19	; 63
    10ec:	ba 2f       	mov	r27, r26
    10ee:	a9 2f       	mov	r26, r25
    10f0:	98 2f       	mov	r25, r24
    10f2:	88 27       	eor	r24, r24
    10f4:	bc 01       	movw	r22, r24
    10f6:	cd 01       	movw	r24, r26
    10f8:	62 0f       	add	r22, r18
    10fa:	71 1d       	adc	r23, r1
    10fc:	81 1d       	adc	r24, r1
    10fe:	91 1d       	adc	r25, r1
    1100:	42 e0       	ldi	r20, 0x02	; 2
    1102:	66 0f       	add	r22, r22
    1104:	77 1f       	adc	r23, r23
    1106:	88 1f       	adc	r24, r24
    1108:	99 1f       	adc	r25, r25
    110a:	4a 95       	dec	r20
    110c:	d1 f7       	brne	.-12     	; 0x1102 <micros+0x3c>
    110e:	08 95       	ret

00001110 <delay>:
delay():
    1110:	8f 92       	push	r8
    1112:	9f 92       	push	r9
    1114:	af 92       	push	r10
    1116:	bf 92       	push	r11
    1118:	cf 92       	push	r12
    111a:	df 92       	push	r13
    111c:	ef 92       	push	r14
    111e:	ff 92       	push	r15
    1120:	6b 01       	movw	r12, r22
    1122:	7c 01       	movw	r14, r24
    1124:	0e 94 63 08 	call	0x10c6	; 0x10c6 <micros>
    1128:	4b 01       	movw	r8, r22
    112a:	5c 01       	movw	r10, r24
    112c:	c1 14       	cp	r12, r1
    112e:	d1 04       	cpc	r13, r1
    1130:	e1 04       	cpc	r14, r1
    1132:	f1 04       	cpc	r15, r1
    1134:	e9 f0       	breq	.+58     	; 0x1170 <delay+0x60>
    1136:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <yield>
    113a:	0e 94 63 08 	call	0x10c6	; 0x10c6 <micros>
    113e:	68 19       	sub	r22, r8
    1140:	79 09       	sbc	r23, r9
    1142:	8a 09       	sbc	r24, r10
    1144:	9b 09       	sbc	r25, r11
    1146:	68 3e       	cpi	r22, 0xE8	; 232
    1148:	73 40       	sbci	r23, 0x03	; 3
    114a:	81 05       	cpc	r24, r1
    114c:	91 05       	cpc	r25, r1
    114e:	70 f3       	brcs	.-36     	; 0x112c <delay+0x1c>
    1150:	21 e0       	ldi	r18, 0x01	; 1
    1152:	c2 1a       	sub	r12, r18
    1154:	d1 08       	sbc	r13, r1
    1156:	e1 08       	sbc	r14, r1
    1158:	f1 08       	sbc	r15, r1
    115a:	88 ee       	ldi	r24, 0xE8	; 232
    115c:	88 0e       	add	r8, r24
    115e:	83 e0       	ldi	r24, 0x03	; 3
    1160:	98 1e       	adc	r9, r24
    1162:	a1 1c       	adc	r10, r1
    1164:	b1 1c       	adc	r11, r1
    1166:	c1 14       	cp	r12, r1
    1168:	d1 04       	cpc	r13, r1
    116a:	e1 04       	cpc	r14, r1
    116c:	f1 04       	cpc	r15, r1
    116e:	29 f7       	brne	.-54     	; 0x113a <delay+0x2a>
    1170:	ff 90       	pop	r15
    1172:	ef 90       	pop	r14
    1174:	df 90       	pop	r13
    1176:	cf 90       	pop	r12
    1178:	bf 90       	pop	r11
    117a:	af 90       	pop	r10
    117c:	9f 90       	pop	r9
    117e:	8f 90       	pop	r8
    1180:	08 95       	ret

00001182 <init>:
init():
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    1182:	78 94       	sei
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    1184:	84 b5       	in	r24, 0x24	; 36
    1186:	83 60       	ori	r24, 0x03	; 3
    1188:	84 bd       	out	0x24, r24	; 36
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    118a:	85 b5       	in	r24, 0x25	; 37
    118c:	83 60       	ori	r24, 0x03	; 3
    118e:	85 bd       	out	0x25, r24	; 37
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    1190:	ee e6       	ldi	r30, 0x6E	; 110
    1192:	f0 e0       	ldi	r31, 0x00	; 0
    1194:	80 81       	ld	r24, Z
    1196:	81 60       	ori	r24, 0x01	; 1
    1198:	80 83       	st	Z, r24
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    119a:	e1 e8       	ldi	r30, 0x81	; 129
    119c:	f0 e0       	ldi	r31, 0x00	; 0
    119e:	82 e0       	ldi	r24, 0x02	; 2
    11a0:	80 83       	st	Z, r24
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    11a2:	80 81       	ld	r24, Z
    11a4:	81 60       	ori	r24, 0x01	; 1
    11a6:	80 83       	st	Z, r24
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    11a8:	e0 e8       	ldi	r30, 0x80	; 128
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	81 60       	ori	r24, 0x01	; 1
    11b0:	80 83       	st	Z, r24
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    11b2:	e1 eb       	ldi	r30, 0xB1	; 177
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	80 81       	ld	r24, Z
    11b8:	84 60       	ori	r24, 0x04	; 4
    11ba:	80 83       	st	Z, r24
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    11bc:	e0 eb       	ldi	r30, 0xB0	; 176
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	81 60       	ori	r24, 0x01	; 1
    11c4:	80 83       	st	Z, r24
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
    11c6:	87 e8       	ldi	r24, 0x87	; 135
    11c8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    11cc:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1072
#endif
}
    11d0:	08 95       	ret

000011d2 <analogRead>:
analogRead():
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:50
{
  uint8_t low, high;

// Macro located in the pins_arduino.h file
#ifdef analogPinToChannel
  pin = analogPinToChannel(pin);
    11d2:	88 30       	cpi	r24, 0x08	; 8
    11d4:	20 f0       	brcs	.+8      	; 0x11de <analogRead+0xc>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:50 (discriminator 1)
    11d6:	8d 30       	cpi	r24, 0x0D	; 13
    11d8:	08 f4       	brcc	.+2      	; 0x11dc <analogRead+0xa>
    11da:	8d e0       	ldi	r24, 0x0D	; 13
    11dc:	8e 50       	subi	r24, 0x0E	; 14
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:69 (discriminator 4)
  
  // set the analog reference (high two bits of ADMUX) and select the
  // channel (low 4 bits).  this also sets ADLAR (left-adjust result)
  // to 0 (the default).
#if defined(ADMUX)
  ADMUX = (analog_reference << 6) | (pin & 0x07);
    11de:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <analog_reference>
    11e2:	90 e4       	ldi	r25, 0x40	; 64
    11e4:	29 9f       	mul	r18, r25
    11e6:	90 01       	movw	r18, r0
    11e8:	11 24       	eor	r1, r1
    11ea:	87 70       	andi	r24, 0x07	; 7
    11ec:	82 2b       	or	r24, r18
    11ee:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:77 (discriminator 4)
  // without a delay, we seem to read from the wrong channel
  //delay(1);

#if defined(ADCSRA) && defined(ADCL)
  // start the conversion
  ADCSRA |= _BV(ADSC);
    11f2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    11f6:	80 64       	ori	r24, 0x40	; 64
    11f8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:80 (discriminator 1)

  // ADSC is cleared when the conversion finishes
  while (ADCSRA & _BV(ADSC));
    11fc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
    1200:	86 fd       	sbrc	r24, 6
    1202:	fc cf       	rjmp	.-8      	; 0x11fc <analogRead+0x2a>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:86

  // we have to read ADCL first; doing so locks both ADCL
  // and ADCH until ADCH is read.  reading ADCL second would
  // cause the results of each conversion to be discarded,
  // as ADCL and ADCH would be locked when it completed.
  low  = ADCL;
    1204:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:87
  high = ADCH;
    1208:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:96
  high = 0;
#endif

  // combine the two bytes
  return (high << 8) | low;
}
    120c:	08 95       	ret

0000120e <analogWrite>:
analogWrite():
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:104
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    120e:	1f 93       	push	r17
    1210:	cf 93       	push	r28
    1212:	df 93       	push	r29
    1214:	18 2f       	mov	r17, r24
    1216:	eb 01       	movw	r28, r22
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:110
  // We need to make sure the PWM output is enabled for those pins
  // that support it, as we turn it off when digitally reading or
  // writing with them.  Also, make sure the pin is in output mode
  // for consistenty with Wiring, which doesn't require a pinMode
  // call for the analog output pins.
  pinMode(pin, OUTPUT);
    1218:	61 e0       	ldi	r22, 0x01	; 1
    121a:	0e 94 8d 09 	call	0x131a	; 0x131a <pinMode>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:111
  if (val == 0)
    121e:	20 97       	sbiw	r28, 0x00	; 0
    1220:	39 f4       	brne	.+14     	; 0x1230 <analogWrite+0x22>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:113
  {
    digitalWrite(pin, LOW);
    1222:	60 e0       	ldi	r22, 0x00	; 0
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:117
  }
  else if (val == 255)
  {
    digitalWrite(pin, HIGH);
    1224:	81 2f       	mov	r24, r17
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:308
        } else {
          digitalWrite(pin, HIGH);
        }
    }
  }
}
    1226:	df 91       	pop	r29
    1228:	cf 91       	pop	r28
    122a:	1f 91       	pop	r17
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:117
  {
    digitalWrite(pin, LOW);
  }
  else if (val == 255)
  {
    digitalWrite(pin, HIGH);
    122c:	0c 94 c9 09 	jmp	0x1392	; 0x1392 <digitalWrite>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:115
  pinMode(pin, OUTPUT);
  if (val == 0)
  {
    digitalWrite(pin, LOW);
  }
  else if (val == 255)
    1230:	cf 3f       	cpi	r28, 0xFF	; 255
    1232:	d1 05       	cpc	r29, r1
    1234:	11 f4       	brne	.+4      	; 0x123a <analogWrite+0x2c>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:117
  {
    digitalWrite(pin, HIGH);
    1236:	61 e0       	ldi	r22, 0x01	; 1
    1238:	f5 cf       	rjmp	.-22     	; 0x1224 <analogWrite+0x16>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:121
  }
  else
  {
    switch(digitalPinToTimer(pin))
    123a:	e1 2f       	mov	r30, r17
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	e8 59       	subi	r30, 0x98	; 152
    1240:	ff 4f       	sbci	r31, 0xFF	; 255
    1242:	e4 91       	lpm	r30, Z
    1244:	e4 30       	cpi	r30, 0x04	; 4
    1246:	31 f1       	breq	.+76     	; 0x1294 <analogWrite+0x86>
    1248:	40 f4       	brcc	.+16     	; 0x125a <analogWrite+0x4c>
    124a:	e2 30       	cpi	r30, 0x02	; 2
    124c:	b1 f0       	breq	.+44     	; 0x127a <analogWrite+0x6c>
    124e:	e3 30       	cpi	r30, 0x03	; 3
    1250:	e1 f0       	breq	.+56     	; 0x128a <analogWrite+0x7c>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:301
        break;
      #endif

      case NOT_ON_TIMER:
      default:
        if (val < 128) {
    1252:	c0 38       	cpi	r28, 0x80	; 128
    1254:	d1 05       	cpc	r29, r1
    1256:	7c f7       	brge	.-34     	; 0x1236 <analogWrite+0x28>
    1258:	e4 cf       	rjmp	.-56     	; 0x1222 <analogWrite+0x14>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:121
  {
    digitalWrite(pin, HIGH);
  }
  else
  {
    switch(digitalPinToTimer(pin))
    125a:	e8 30       	cpi	r30, 0x08	; 8
    125c:	29 f1       	breq	.+74     	; 0x12a8 <analogWrite+0x9a>
    125e:	e9 30       	cpi	r30, 0x09	; 9
    1260:	59 f1       	breq	.+86     	; 0x12b8 <analogWrite+0xaa>
    1262:	e5 30       	cpi	r30, 0x05	; 5
    1264:	b1 f7       	brne	.-20     	; 0x1252 <analogWrite+0x44>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:165
      #endif

      #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        // connect pwm to pin on timer 1, channel B
        TCCR1A |= _BV(COM1B1);
    1266:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    126a:	80 62       	ori	r24, 0x20	; 32
    126c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:166
        OCR1B = val; // set pwm duty
    1270:	d0 93 8b 00 	sts	0x008B, r29	; 0x80008b <__DATA_REGION_ORIGIN__+0x2b>
    1274:	c0 93 8a 00 	sts	0x008A, r28	; 0x80008a <__DATA_REGION_ORIGIN__+0x2a>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:167
        break;
    1278:	04 c0       	rjmp	.+8      	; 0x1282 <analogWrite+0x74>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:141
      #endif

      #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        // connect pwm to pin on timer 0, channel A
        TCCR0A |= _BV(COM0A1);
    127a:	84 b5       	in	r24, 0x24	; 36
    127c:	80 68       	ori	r24, 0x80	; 128
    127e:	84 bd       	out	0x24, r24	; 36
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:142
        OCR0A = val; // set pwm duty
    1280:	c7 bd       	out	0x27, r28	; 39
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:308
        } else {
          digitalWrite(pin, HIGH);
        }
    }
  }
}
    1282:	df 91       	pop	r29
    1284:	cf 91       	pop	r28
    1286:	1f 91       	pop	r17
    1288:	08 95       	ret
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:149
      #endif

      #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        // connect pwm to pin on timer 0, channel B
        TCCR0A |= _BV(COM0B1);
    128a:	84 b5       	in	r24, 0x24	; 36
    128c:	80 62       	ori	r24, 0x20	; 32
    128e:	84 bd       	out	0x24, r24	; 36
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:150
        OCR0B = val; // set pwm duty
    1290:	c8 bd       	out	0x28, r28	; 40
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:151
        break;
    1292:	f7 cf       	rjmp	.-18     	; 0x1282 <analogWrite+0x74>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:157
      #endif

      #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        // connect pwm to pin on timer 1, channel A
        TCCR1A |= _BV(COM1A1);
    1294:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    1298:	80 68       	ori	r24, 0x80	; 128
    129a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:158
        OCR1A = val; // set pwm duty
    129e:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__DATA_REGION_ORIGIN__+0x29>
    12a2:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__DATA_REGION_ORIGIN__+0x28>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:159
        break;
    12a6:	ed cf       	rjmp	.-38     	; 0x1282 <analogWrite+0x74>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:189
      #endif

      #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        // connect pwm to pin on timer 2, channel A
        TCCR2A |= _BV(COM2A1);
    12a8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    12ac:	80 68       	ori	r24, 0x80	; 128
    12ae:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:190
        OCR2A = val; // set pwm duty
    12b2:	c0 93 b3 00 	sts	0x00B3, r28	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:191
        break;
    12b6:	e5 cf       	rjmp	.-54     	; 0x1282 <analogWrite+0x74>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:197
      #endif

      #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        // connect pwm to pin on timer 2, channel B
        TCCR2A |= _BV(COM2B1);
    12b8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    12bc:	80 62       	ori	r24, 0x20	; 32
    12be:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:198
        OCR2B = val; // set pwm duty
    12c2:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_analog.c:199
        break;
    12c6:	dd cf       	rjmp	.-70     	; 0x1282 <analogWrite+0x74>

000012c8 <turnOffPWM>:
turnOffPWM():
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
    12c8:	84 30       	cpi	r24, 0x04	; 4
    12ca:	81 f0       	breq	.+32     	; 0x12ec <turnOffPWM+0x24>
    12cc:	28 f4       	brcc	.+10     	; 0x12d8 <turnOffPWM+0x10>
    12ce:	82 30       	cpi	r24, 0x02	; 2
    12d0:	e9 f0       	breq	.+58     	; 0x130c <turnOffPWM+0x44>
    12d2:	83 30       	cpi	r24, 0x03	; 3
    12d4:	f9 f0       	breq	.+62     	; 0x1314 <turnOffPWM+0x4c>
    12d6:	08 95       	ret
    12d8:	88 30       	cpi	r24, 0x08	; 8
    12da:	71 f0       	breq	.+28     	; 0x12f8 <turnOffPWM+0x30>
    12dc:	89 30       	cpi	r24, 0x09	; 9
    12de:	91 f0       	breq	.+36     	; 0x1304 <turnOffPWM+0x3c>
    12e0:	85 30       	cpi	r24, 0x05	; 5
    12e2:	b9 f4       	brne	.+46     	; 0x1312 <turnOffPWM+0x4a>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    12e4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    12e8:	8f 7d       	andi	r24, 0xDF	; 223
    12ea:	03 c0       	rjmp	.+6      	; 0x12f2 <turnOffPWM+0x2a>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:82
  switch (timer)
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
    12ec:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
    12f0:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    12f2:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:88
        break;
    12f6:	08 95       	ret
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
    12f8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    12fc:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    12fe:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:110
        break;
    1302:	08 95       	ret
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:109
        TCCR2A &= ~_BV(COM2A1);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    1304:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
    1308:	8f 7d       	andi	r24, 0xDF	; 223
    130a:	f9 cf       	rjmp	.-14     	; 0x12fe <turnOffPWM+0x36>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
    130c:	84 b5       	in	r24, 0x24	; 36
    130e:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    1310:	84 bd       	out	0x24, r24	; 36
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
    1312:	08 95       	ret
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    1314:	84 b5       	in	r24, 0x24	; 36
    1316:	8f 7d       	andi	r24, 0xDF	; 223
    1318:	fb cf       	rjmp	.-10     	; 0x1310 <turnOffPWM+0x48>

0000131a <pinMode>:
pinMode():
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    131a:	cf 93       	push	r28
    131c:	df 93       	push	r29
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	fc 01       	movw	r30, r24
    1322:	e1 58       	subi	r30, 0x81	; 129
    1324:	ff 4f       	sbci	r31, 0xFF	; 255
    1326:	24 91       	lpm	r18, Z
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
    1328:	8a 56       	subi	r24, 0x6A	; 106
    132a:	9f 4f       	sbci	r25, 0xFF	; 255
    132c:	fc 01       	movw	r30, r24
    132e:	84 91       	lpm	r24, Z
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
    1330:	88 23       	and	r24, r24
    1332:	c9 f0       	breq	.+50     	; 0x1366 <pinMode+0x4c>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	88 0f       	add	r24, r24
    1338:	99 1f       	adc	r25, r25
    133a:	fc 01       	movw	r30, r24
    133c:	ef 53       	subi	r30, 0x3F	; 63
    133e:	ff 4f       	sbci	r31, 0xFF	; 255
    1340:	a5 91       	lpm	r26, Z+
    1342:	b4 91       	lpm	r27, Z
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
    1344:	fc 01       	movw	r30, r24
    1346:	e9 54       	subi	r30, 0x49	; 73
    1348:	ff 4f       	sbci	r31, 0xFF	; 255
    134a:	c5 91       	lpm	r28, Z+
    134c:	d4 91       	lpm	r29, Z
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
    134e:	61 11       	cpse	r22, r1
    1350:	0d c0       	rjmp	.+26     	; 0x136c <pinMode+0x52>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
    1352:	9f b7       	in	r25, 0x3f	; 63
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
    1354:	f8 94       	cli
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
    1356:	8c 91       	ld	r24, X
    1358:	20 95       	com	r18
    135a:	82 23       	and	r24, r18
    135c:	8c 93       	st	X, r24
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
    135e:	88 81       	ld	r24, Y
    1360:	28 23       	and	r18, r24
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
    1362:	28 83       	st	Y, r18
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
    1364:	9f bf       	out	0x3f, r25	; 63
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
    1366:	df 91       	pop	r29
    1368:	cf 91       	pop	r28
    136a:	08 95       	ret
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    136c:	62 30       	cpi	r22, 0x02	; 2
    136e:	51 f4       	brne	.+20     	; 0x1384 <pinMode+0x6a>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
    1370:	9f b7       	in	r25, 0x3f	; 63
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:49
    cli();
    1372:	f8 94       	cli
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
    1374:	3c 91       	ld	r19, X
    1376:	82 2f       	mov	r24, r18
    1378:	80 95       	com	r24
    137a:	83 23       	and	r24, r19
    137c:	8c 93       	st	X, r24
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
    137e:	e8 81       	ld	r30, Y
    1380:	2e 2b       	or	r18, r30
    1382:	ef cf       	rjmp	.-34     	; 0x1362 <pinMode+0x48>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    1384:	8f b7       	in	r24, 0x3f	; 63
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
    1386:	f8 94       	cli
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
    1388:	ec 91       	ld	r30, X
    138a:	2e 2b       	or	r18, r30
    138c:	2c 93       	st	X, r18
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
    138e:	8f bf       	out	0x3f, r24	; 63
    1390:	ea cf       	rjmp	.-44     	; 0x1366 <pinMode+0x4c>

00001392 <digitalWrite>:
digitalWrite():
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    1392:	1f 93       	push	r17
    1394:	cf 93       	push	r28
    1396:	df 93       	push	r29
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
    1398:	28 2f       	mov	r18, r24
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	f9 01       	movw	r30, r18
    139e:	e8 59       	subi	r30, 0x98	; 152
    13a0:	ff 4f       	sbci	r31, 0xFF	; 255
    13a2:	84 91       	lpm	r24, Z
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
    13a4:	f9 01       	movw	r30, r18
    13a6:	e1 58       	subi	r30, 0x81	; 129
    13a8:	ff 4f       	sbci	r31, 0xFF	; 255
    13aa:	d4 91       	lpm	r29, Z
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
    13ac:	f9 01       	movw	r30, r18
    13ae:	ea 56       	subi	r30, 0x6A	; 106
    13b0:	ff 4f       	sbci	r31, 0xFF	; 255
    13b2:	c4 91       	lpm	r28, Z
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
    13b4:	cc 23       	and	r28, r28
    13b6:	a9 f0       	breq	.+42     	; 0x13e2 <digitalWrite+0x50>
    13b8:	16 2f       	mov	r17, r22
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    13ba:	81 11       	cpse	r24, r1
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
    13bc:	0e 94 64 09 	call	0x12c8	; 0x12c8 <turnOffPWM>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
    13c0:	ec 2f       	mov	r30, r28
    13c2:	f0 e0       	ldi	r31, 0x00	; 0
    13c4:	ee 0f       	add	r30, r30
    13c6:	ff 1f       	adc	r31, r31
    13c8:	e9 54       	subi	r30, 0x49	; 73
    13ca:	ff 4f       	sbci	r31, 0xFF	; 255
    13cc:	a5 91       	lpm	r26, Z+
    13ce:	b4 91       	lpm	r27, Z
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
    13d0:	8f b7       	in	r24, 0x3f	; 63
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
    13d2:	f8 94       	cli
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
    13d4:	ec 91       	ld	r30, X
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
    13d6:	11 11       	cpse	r17, r1
    13d8:	08 c0       	rjmp	.+16     	; 0x13ea <digitalWrite+0x58>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
    13da:	d0 95       	com	r29
    13dc:	de 23       	and	r29, r30
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
    13de:	dc 93       	st	X, r29
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
    13e0:	8f bf       	out	0x3f, r24	; 63
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:212
}
    13e2:	df 91       	pop	r29
    13e4:	cf 91       	pop	r28
    13e6:	1f 91       	pop	r17
    13e8:	08 95       	ret
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
    13ea:	de 2b       	or	r29, r30
    13ec:	f8 cf       	rjmp	.-16     	; 0x13de <digitalWrite+0x4c>

000013ee <digitalRead>:
digitalRead():
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
    13ee:	cf 93       	push	r28
    13f0:	df 93       	push	r29
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
    13f2:	28 2f       	mov	r18, r24
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	f9 01       	movw	r30, r18
    13f8:	e8 59       	subi	r30, 0x98	; 152
    13fa:	ff 4f       	sbci	r31, 0xFF	; 255
    13fc:	84 91       	lpm	r24, Z
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
    13fe:	f9 01       	movw	r30, r18
    1400:	e1 58       	subi	r30, 0x81	; 129
    1402:	ff 4f       	sbci	r31, 0xFF	; 255
    1404:	d4 91       	lpm	r29, Z
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
    1406:	f9 01       	movw	r30, r18
    1408:	ea 56       	subi	r30, 0x6A	; 106
    140a:	ff 4f       	sbci	r31, 0xFF	; 255
    140c:	c4 91       	lpm	r28, Z
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
    140e:	cc 23       	and	r28, r28
    1410:	a1 f0       	breq	.+40     	; 0x143a <digitalRead+0x4c>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1412:	81 11       	cpse	r24, r1
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:224 (discriminator 1)
    1414:	0e 94 64 09 	call	0x12c8	; 0x12c8 <turnOffPWM>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
    1418:	ec 2f       	mov	r30, r28
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	ee 0f       	add	r30, r30
    141e:	ff 1f       	adc	r31, r31
    1420:	e3 55       	subi	r30, 0x53	; 83
    1422:	ff 4f       	sbci	r31, 0xFF	; 255
    1424:	a5 91       	lpm	r26, Z+
    1426:	b4 91       	lpm	r27, Z
    1428:	ec 91       	ld	r30, X
    142a:	ed 23       	and	r30, r29
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	09 f4       	brne	.+2      	; 0x1434 <digitalRead+0x46>
    1432:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
    1434:	df 91       	pop	r29
    1436:	cf 91       	pop	r28
    1438:	08 95       	ret
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
    143a:	80 e0       	ldi	r24, 0x00	; 0
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	fa cf       	rjmp	.-12     	; 0x1434 <digitalRead+0x46>

00001440 <__vector_18>:
__vector_18():
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    1440:	1f 92       	push	r1
    1442:	0f 92       	push	r0
    1444:	0f b6       	in	r0, 0x3f	; 63
    1446:	0f 92       	push	r0
    1448:	11 24       	eor	r1, r1
    144a:	2f 93       	push	r18
    144c:	8f 93       	push	r24
    144e:	9f 93       	push	r25
    1450:	ef 93       	push	r30
    1452:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:103

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    1454:	e0 91 85 02 	lds	r30, 0x0285	; 0x800285 <Serial+0x10>
    1458:	f0 91 86 02 	lds	r31, 0x0286	; 0x800286 <Serial+0x11>
    145c:	80 81       	ld	r24, Z
    145e:	e0 91 8b 02 	lds	r30, 0x028B	; 0x80028b <Serial+0x16>
    1462:	f0 91 8c 02 	lds	r31, 0x028C	; 0x80028c <Serial+0x17>
    1466:	82 fd       	sbrc	r24, 2
    1468:	1b c0       	rjmp	.+54     	; 0x14a0 <__vector_18+0x60>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:106
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    146a:	90 81       	ld	r25, Z
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:107
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    146c:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <Serial+0x19>
    1470:	8f 5f       	subi	r24, 0xFF	; 255
    1472:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:113

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    1474:	20 91 8f 02 	lds	r18, 0x028F	; 0x80028f <Serial+0x1a>
    1478:	82 17       	cp	r24, r18
    147a:	41 f0       	breq	.+16     	; 0x148c <__vector_18+0x4c>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:114
      _rx_buffer[_rx_buffer_head] = c;
    147c:	e0 91 8e 02 	lds	r30, 0x028E	; 0x80028e <Serial+0x19>
    1480:	f0 e0       	ldi	r31, 0x00	; 0
    1482:	eb 58       	subi	r30, 0x8B	; 139
    1484:	fd 4f       	sbci	r31, 0xFD	; 253
    1486:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:115
      _rx_buffer_head = i;
    1488:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <Serial+0x19>
__vector_18():
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
    148c:	ff 91       	pop	r31
    148e:	ef 91       	pop	r30
    1490:	9f 91       	pop	r25
    1492:	8f 91       	pop	r24
    1494:	2f 91       	pop	r18
    1496:	0f 90       	pop	r0
    1498:	0f be       	out	0x3f, r0	; 63
    149a:	0f 90       	pop	r0
    149c:	1f 90       	pop	r1
    149e:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:119
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    14a0:	80 81       	ld	r24, Z
__vector_18():
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    14a2:	f4 cf       	rjmp	.-24     	; 0x148c <__vector_18+0x4c>

000014a4 <__vector_19>:
__vector_19():
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    14a4:	1f 92       	push	r1
    14a6:	0f 92       	push	r0
    14a8:	0f b6       	in	r0, 0x3f	; 63
    14aa:	0f 92       	push	r0
    14ac:	11 24       	eor	r1, r1
    14ae:	2f 93       	push	r18
    14b0:	3f 93       	push	r19
    14b2:	4f 93       	push	r20
    14b4:	5f 93       	push	r21
    14b6:	6f 93       	push	r22
    14b8:	7f 93       	push	r23
    14ba:	8f 93       	push	r24
    14bc:	9f 93       	push	r25
    14be:	af 93       	push	r26
    14c0:	bf 93       	push	r27
    14c2:	ef 93       	push	r30
    14c4:	ff 93       	push	r31
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    14c6:	85 e7       	ldi	r24, 0x75	; 117
    14c8:	92 e0       	ldi	r25, 0x02	; 2
    14ca:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:65
}
    14ce:	ff 91       	pop	r31
    14d0:	ef 91       	pop	r30
    14d2:	bf 91       	pop	r27
    14d4:	af 91       	pop	r26
    14d6:	9f 91       	pop	r25
    14d8:	8f 91       	pop	r24
    14da:	7f 91       	pop	r23
    14dc:	6f 91       	pop	r22
    14de:	5f 91       	pop	r21
    14e0:	4f 91       	pop	r20
    14e2:	3f 91       	pop	r19
    14e4:	2f 91       	pop	r18
    14e6:	0f 90       	pop	r0
    14e8:	0f be       	out	0x3f, r0	; 63
    14ea:	0f 90       	pop	r0
    14ec:	1f 90       	pop	r1
    14ee:	18 95       	reti

000014f0 <Serial0_available()>:
_Z17Serial0_availablev():
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    14f0:	85 e7       	ldi	r24, 0x75	; 117
    14f2:	92 e0       	ldi	r25, 0x02	; 2
    14f4:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <HardwareSerial::available()>
    14f8:	21 e0       	ldi	r18, 0x01	; 1
    14fa:	89 2b       	or	r24, r25
    14fc:	09 f4       	brne	.+2      	; 0x1500 <Serial0_available()+0x10>
    14fe:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
}
    1500:	82 2f       	mov	r24, r18
    1502:	08 95       	ret

00001504 <_GLOBAL__sub_I___vector_18>:
_ZN5PrintC4Ev():
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:46
    1504:	e5 e7       	ldi	r30, 0x75	; 117
    1506:	f2 e0       	ldi	r31, 0x02	; 2
    1508:	13 82       	std	Z+3, r1	; 0x03
    150a:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Stream.h:63
    150c:	88 ee       	ldi	r24, 0xE8	; 232
    150e:	93 e0       	ldi	r25, 0x03	; 3
    1510:	a0 e0       	ldi	r26, 0x00	; 0
    1512:	b0 e0       	ldi	r27, 0x00	; 0
    1514:	84 83       	std	Z+4, r24	; 0x04
    1516:	95 83       	std	Z+5, r25	; 0x05
    1518:	a6 83       	std	Z+6, r26	; 0x06
    151a:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:95
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    151c:	84 e4       	ldi	r24, 0x44	; 68
    151e:	91 e0       	ldi	r25, 0x01	; 1
    1520:	91 83       	std	Z+1, r25	; 0x01
    1522:	80 83       	st	Z, r24
    1524:	85 ec       	ldi	r24, 0xC5	; 197
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	95 87       	std	Z+13, r25	; 0x0d
    152a:	84 87       	std	Z+12, r24	; 0x0c
    152c:	84 ec       	ldi	r24, 0xC4	; 196
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	97 87       	std	Z+15, r25	; 0x0f
    1532:	86 87       	std	Z+14, r24	; 0x0e
    1534:	80 ec       	ldi	r24, 0xC0	; 192
    1536:	90 e0       	ldi	r25, 0x00	; 0
    1538:	91 8b       	std	Z+17, r25	; 0x11
    153a:	80 8b       	std	Z+16, r24	; 0x10
    153c:	81 ec       	ldi	r24, 0xC1	; 193
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	93 8b       	std	Z+19, r25	; 0x13
    1542:	82 8b       	std	Z+18, r24	; 0x12
    1544:	82 ec       	ldi	r24, 0xC2	; 194
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	95 8b       	std	Z+21, r25	; 0x15
    154a:	84 8b       	std	Z+20, r24	; 0x14
    154c:	86 ec       	ldi	r24, 0xC6	; 198
    154e:	90 e0       	ldi	r25, 0x00	; 0
    1550:	97 8b       	std	Z+23, r25	; 0x17
    1552:	86 8b       	std	Z+22, r24	; 0x16
    1554:	11 8e       	std	Z+25, r1	; 0x19
    1556:	12 8e       	std	Z+26, r1	; 0x1a
    1558:	13 8e       	std	Z+27, r1	; 0x1b
    155a:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_18():
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
    155c:	08 95       	ret

0000155e <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:185
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    155e:	af 92       	push	r10
    1560:	bf 92       	push	r11
    1562:	cf 92       	push	r12
    1564:	df 92       	push	r13
    1566:	ef 92       	push	r14
    1568:	ff 92       	push	r15
    156a:	0f 93       	push	r16
    156c:	1f 93       	push	r17
    156e:	cf 93       	push	r28
    1570:	df 93       	push	r29
    1572:	6c 01       	movw	r12, r24
    1574:	7b 01       	movw	r14, r22
    1576:	8b 01       	movw	r16, r22
    1578:	04 0f       	add	r16, r20
    157a:	15 1f       	adc	r17, r21
    157c:	eb 01       	movw	r28, r22
    157e:	5e 01       	movw	r10, r28
    1580:	ae 18       	sub	r10, r14
    1582:	bf 08       	sbc	r11, r15
    1584:	c0 17       	cp	r28, r16
    1586:	d1 07       	cpc	r29, r17
    1588:	59 f0       	breq	.+22     	; 0x15a0 <Print::write(unsigned char const*, unsigned int)+0x42>
    158a:	69 91       	ld	r22, Y+
    158c:	d6 01       	movw	r26, r12
    158e:	ed 91       	ld	r30, X+
    1590:	fc 91       	ld	r31, X
    1592:	01 90       	ld	r0, Z+
    1594:	f0 81       	ld	r31, Z
    1596:	e0 2d       	mov	r30, r0
    1598:	c6 01       	movw	r24, r12
    159a:	09 95       	icall
    159c:	89 2b       	or	r24, r25
    159e:	79 f7       	brne	.-34     	; 0x157e <Print::write(unsigned char const*, unsigned int)+0x20>
    15a0:	c5 01       	movw	r24, r10
    15a2:	df 91       	pop	r29
    15a4:	cf 91       	pop	r28
    15a6:	1f 91       	pop	r17
    15a8:	0f 91       	pop	r16
    15aa:	ff 90       	pop	r15
    15ac:	ef 90       	pop	r14
    15ae:	df 90       	pop	r13
    15b0:	cf 90       	pop	r12
    15b2:	bf 90       	pop	r11
    15b4:	af 90       	pop	r10
    15b6:	08 95       	ret

000015b8 <Print::write(char const*) [clone .part.2]>:
_ZN5Print5writeEPKc():
    15b8:	fb 01       	movw	r30, r22
    15ba:	01 90       	ld	r0, Z+
    15bc:	00 20       	and	r0, r0
    15be:	e9 f7       	brne	.-6      	; 0x15ba <Print::write(char const*) [clone .part.2]+0x2>
    15c0:	31 97       	sbiw	r30, 0x01	; 1
    15c2:	af 01       	movw	r20, r30
    15c4:	46 1b       	sub	r20, r22
    15c6:	57 0b       	sbc	r21, r23
    15c8:	dc 01       	movw	r26, r24
    15ca:	ed 91       	ld	r30, X+
    15cc:	fc 91       	ld	r31, X
    15ce:	02 80       	ldd	r0, Z+2	; 0x02
    15d0:	f3 81       	ldd	r31, Z+3	; 0x03
    15d2:	e0 2d       	mov	r30, r0
    15d4:	09 94       	ijmp

000015d6 <Print::print(char const*)>:
    15d6:	61 15       	cp	r22, r1
    15d8:	71 05       	cpc	r23, r1
    15da:	11 f0       	breq	.+4      	; 0x15e0 <Print::print(char const*)+0xa>
    15dc:	0c 94 dc 0a 	jmp	0x15b8	; 0x15b8 <Print::write(char const*) [clone .part.2]>
_ZN5Print5printEPKc():
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	80 e0       	ldi	r24, 0x00	; 0
    15e4:	08 95       	ret

000015e6 <Print::print(char)>:
_ZN5Print5printEc():
    15e6:	dc 01       	movw	r26, r24
    15e8:	ed 91       	ld	r30, X+
    15ea:	fc 91       	ld	r31, X
    15ec:	01 90       	ld	r0, Z+
    15ee:	f0 81       	ld	r31, Z
    15f0:	e0 2d       	mov	r30, r0
    15f2:	09 94       	ijmp

000015f4 <Print::println()>:
_ZN5Print5writeEPKc():
    15f4:	61 e3       	ldi	r22, 0x31	; 49
    15f6:	71 e0       	ldi	r23, 0x01	; 1
    15f8:	0c 94 dc 0a 	jmp	0x15b8	; 0x15b8 <Print::write(char const*) [clone .part.2]>

000015fc <Print::printNumber(unsigned long, unsigned char)>:
_ZN5Print11printNumberEmh():
    15fc:	8f 92       	push	r8
    15fe:	9f 92       	push	r9
    1600:	af 92       	push	r10
    1602:	bf 92       	push	r11
    1604:	ef 92       	push	r14
    1606:	ff 92       	push	r15
    1608:	0f 93       	push	r16
    160a:	1f 93       	push	r17
    160c:	cf 93       	push	r28
    160e:	df 93       	push	r29
    1610:	cd b7       	in	r28, 0x3d	; 61
    1612:	de b7       	in	r29, 0x3e	; 62
    1614:	a1 97       	sbiw	r28, 0x21	; 33
    1616:	0f b6       	in	r0, 0x3f	; 63
    1618:	f8 94       	cli
    161a:	de bf       	out	0x3e, r29	; 62
    161c:	0f be       	out	0x3f, r0	; 63
    161e:	cd bf       	out	0x3d, r28	; 61
    1620:	7c 01       	movw	r14, r24
    1622:	fa 01       	movw	r30, r20
    1624:	cb 01       	movw	r24, r22
    1626:	19 a2       	std	Y+33, r1	; 0x21
    1628:	22 30       	cpi	r18, 0x02	; 2
    162a:	08 f4       	brcc	.+2      	; 0x162e <Print::printNumber(unsigned long, unsigned char)+0x32>
    162c:	2a e0       	ldi	r18, 0x0A	; 10
    162e:	8e 01       	movw	r16, r28
    1630:	0f 5d       	subi	r16, 0xDF	; 223
    1632:	1f 4f       	sbci	r17, 0xFF	; 255
    1634:	82 2e       	mov	r8, r18
    1636:	91 2c       	mov	r9, r1
    1638:	b1 2c       	mov	r11, r1
    163a:	a1 2c       	mov	r10, r1
    163c:	bf 01       	movw	r22, r30
    163e:	a5 01       	movw	r20, r10
    1640:	94 01       	movw	r18, r8
    1642:	0e 94 3d 10 	call	0x207a	; 0x207a <__udivmodsi4>
    1646:	f9 01       	movw	r30, r18
    1648:	ca 01       	movw	r24, r20
    164a:	6a 30       	cpi	r22, 0x0A	; 10
    164c:	0c f5       	brge	.+66     	; 0x1690 <Print::printNumber(unsigned long, unsigned char)+0x94>
    164e:	60 5d       	subi	r22, 0xD0	; 208
    1650:	d8 01       	movw	r26, r16
    1652:	6e 93       	st	-X, r22
    1654:	8d 01       	movw	r16, r26
    1656:	23 2b       	or	r18, r19
    1658:	24 2b       	or	r18, r20
    165a:	25 2b       	or	r18, r21
    165c:	79 f7       	brne	.-34     	; 0x163c <Print::printNumber(unsigned long, unsigned char)+0x40>
_ZN5Print5writeEPKc():
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	80 e0       	ldi	r24, 0x00	; 0
    1662:	10 97       	sbiw	r26, 0x00	; 0
    1664:	21 f0       	breq	.+8      	; 0x166e <Print::printNumber(unsigned long, unsigned char)+0x72>
    1666:	bd 01       	movw	r22, r26
    1668:	c7 01       	movw	r24, r14
    166a:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <Print::write(char const*) [clone .part.2]>
_ZN5Print11printNumberEmh():
    166e:	a1 96       	adiw	r28, 0x21	; 33
    1670:	0f b6       	in	r0, 0x3f	; 63
    1672:	f8 94       	cli
    1674:	de bf       	out	0x3e, r29	; 62
    1676:	0f be       	out	0x3f, r0	; 63
    1678:	cd bf       	out	0x3d, r28	; 61
    167a:	df 91       	pop	r29
    167c:	cf 91       	pop	r28
    167e:	1f 91       	pop	r17
    1680:	0f 91       	pop	r16
    1682:	ff 90       	pop	r15
    1684:	ef 90       	pop	r14
    1686:	bf 90       	pop	r11
    1688:	af 90       	pop	r10
    168a:	9f 90       	pop	r9
    168c:	8f 90       	pop	r8
    168e:	08 95       	ret
    1690:	69 5c       	subi	r22, 0xC9	; 201
    1692:	de cf       	rjmp	.-68     	; 0x1650 <Print::printNumber(unsigned long, unsigned char)+0x54>

00001694 <Print::print(unsigned long, int)>:
_ZN5Print5printEmi():
    1694:	21 15       	cp	r18, r1
    1696:	31 05       	cpc	r19, r1
    1698:	41 f4       	brne	.+16     	; 0x16aa <Print::print(unsigned long, int)+0x16>
    169a:	dc 01       	movw	r26, r24
    169c:	ed 91       	ld	r30, X+
    169e:	fc 91       	ld	r31, X
    16a0:	01 90       	ld	r0, Z+
    16a2:	f0 81       	ld	r31, Z
    16a4:	e0 2d       	mov	r30, r0
    16a6:	64 2f       	mov	r22, r20
    16a8:	09 94       	ijmp
    16aa:	0c 94 fe 0a 	jmp	0x15fc	; 0x15fc <Print::printNumber(unsigned long, unsigned char)>

000016ae <Print::print(unsigned int, int)>:
_ZN5Print5printEji():
    16ae:	9a 01       	movw	r18, r20
    16b0:	ab 01       	movw	r20, r22
    16b2:	70 e0       	ldi	r23, 0x00	; 0
    16b4:	60 e0       	ldi	r22, 0x00	; 0
    16b6:	0c 94 4a 0b 	jmp	0x1694	; 0x1694 <Print::print(unsigned long, int)>

000016ba <Print::printFloat(double, unsigned char)>:
_ZN5Print10printFloatEdh():
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:253

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    16ba:	2f 92       	push	r2
    16bc:	3f 92       	push	r3
    16be:	4f 92       	push	r4
    16c0:	5f 92       	push	r5
    16c2:	6f 92       	push	r6
    16c4:	7f 92       	push	r7
    16c6:	8f 92       	push	r8
    16c8:	9f 92       	push	r9
    16ca:	af 92       	push	r10
    16cc:	bf 92       	push	r11
    16ce:	cf 92       	push	r12
    16d0:	df 92       	push	r13
    16d2:	ef 92       	push	r14
    16d4:	ff 92       	push	r15
    16d6:	1f 93       	push	r17
    16d8:	cf 93       	push	r28
    16da:	df 93       	push	r29
    16dc:	ec 01       	movw	r28, r24
    16de:	6a 01       	movw	r12, r20
    16e0:	7b 01       	movw	r14, r22
    16e2:	72 2e       	mov	r7, r18
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:256
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    16e4:	ab 01       	movw	r20, r22
    16e6:	96 01       	movw	r18, r12
    16e8:	cb 01       	movw	r24, r22
    16ea:	b6 01       	movw	r22, r12
    16ec:	0e 94 38 10 	call	0x2070	; 0x2070 <__unordsf2>
_ZN5Print5writeEPKc():
    16f0:	64 e3       	ldi	r22, 0x34	; 52
    16f2:	71 e0       	ldi	r23, 0x01	; 1
_ZN5Print10printFloatEdh():
    16f4:	81 11       	cpse	r24, r1
    16f6:	26 c0       	rjmp	.+76     	; 0x1744 <Print::printFloat(double, unsigned char)+0x8a>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:257
  if (isinf(number)) return print("inf");
    16f8:	46 01       	movw	r8, r12
    16fa:	57 01       	movw	r10, r14
    16fc:	e8 94       	clt
    16fe:	b7 f8       	bld	r11, 7
    1700:	2f ef       	ldi	r18, 0xFF	; 255
    1702:	3f ef       	ldi	r19, 0xFF	; 255
    1704:	4f e7       	ldi	r20, 0x7F	; 127
    1706:	5f e7       	ldi	r21, 0x7F	; 127
    1708:	c5 01       	movw	r24, r10
    170a:	b4 01       	movw	r22, r8
    170c:	0e 94 38 10 	call	0x2070	; 0x2070 <__unordsf2>
    1710:	81 11       	cpse	r24, r1
    1712:	0c c0       	rjmp	.+24     	; 0x172c <Print::printFloat(double, unsigned char)+0x72>
    1714:	2f ef       	ldi	r18, 0xFF	; 255
    1716:	3f ef       	ldi	r19, 0xFF	; 255
    1718:	4f e7       	ldi	r20, 0x7F	; 127
    171a:	5f e7       	ldi	r21, 0x7F	; 127
    171c:	c5 01       	movw	r24, r10
    171e:	b4 01       	movw	r22, r8
    1720:	0e 94 67 0e 	call	0x1cce	; 0x1cce <__cmpsf2>
_ZN5Print5writeEPKc():
    1724:	68 e3       	ldi	r22, 0x38	; 56
    1726:	71 e0       	ldi	r23, 0x01	; 1
_ZN5Print10printFloatEdh():
    1728:	18 16       	cp	r1, r24
    172a:	64 f0       	brlt	.+24     	; 0x1744 <Print::printFloat(double, unsigned char)+0x8a>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:258
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    172c:	2f ef       	ldi	r18, 0xFF	; 255
    172e:	3f ef       	ldi	r19, 0xFF	; 255
    1730:	4f e7       	ldi	r20, 0x7F	; 127
    1732:	5f e4       	ldi	r21, 0x4F	; 79
    1734:	c7 01       	movw	r24, r14
    1736:	b6 01       	movw	r22, r12
    1738:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <__gesf2>
    173c:	18 16       	cp	r1, r24
    173e:	b4 f4       	brge	.+44     	; 0x176c <Print::printFloat(double, unsigned char)+0xb2>
_ZN5Print5writeEPKc():
    1740:	6c e3       	ldi	r22, 0x3C	; 60
    1742:	71 e0       	ldi	r23, 0x01	; 1
    1744:	ce 01       	movw	r24, r28
_ZN5Print10printFloatEdh():
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:295
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    1746:	df 91       	pop	r29
    1748:	cf 91       	pop	r28
    174a:	1f 91       	pop	r17
    174c:	ff 90       	pop	r15
    174e:	ef 90       	pop	r14
    1750:	df 90       	pop	r13
    1752:	cf 90       	pop	r12
    1754:	bf 90       	pop	r11
    1756:	af 90       	pop	r10
    1758:	9f 90       	pop	r9
    175a:	8f 90       	pop	r8
    175c:	7f 90       	pop	r7
    175e:	6f 90       	pop	r6
    1760:	5f 90       	pop	r5
    1762:	4f 90       	pop	r4
    1764:	3f 90       	pop	r3
    1766:	2f 90       	pop	r2
_ZN5Print5writeEPKc():
    1768:	0c 94 dc 0a 	jmp	0x15b8	; 0x15b8 <Print::write(char const*) [clone .part.2]>
_ZN5Print10printFloatEdh():
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:259
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    176c:	2f ef       	ldi	r18, 0xFF	; 255
    176e:	3f ef       	ldi	r19, 0xFF	; 255
    1770:	4f e7       	ldi	r20, 0x7F	; 127
    1772:	5f ec       	ldi	r21, 0xCF	; 207
    1774:	c7 01       	movw	r24, r14
    1776:	b6 01       	movw	r22, r12
    1778:	0e 94 67 0e 	call	0x1cce	; 0x1cce <__cmpsf2>
    177c:	87 fd       	sbrc	r24, 7
    177e:	e0 cf       	rjmp	.-64     	; 0x1740 <Print::printFloat(double, unsigned char)+0x86>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:262
  
  // Handle negative numbers
  if (number < 0.0)
    1780:	20 e0       	ldi	r18, 0x00	; 0
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	a9 01       	movw	r20, r18
    1786:	c7 01       	movw	r24, r14
    1788:	b6 01       	movw	r22, r12
    178a:	0e 94 67 0e 	call	0x1cce	; 0x1cce <__cmpsf2>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:254
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    178e:	31 2c       	mov	r3, r1
    1790:	21 2c       	mov	r2, r1
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:262
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
  
  // Handle negative numbers
  if (number < 0.0)
    1792:	87 ff       	sbrs	r24, 7
    1794:	09 c0       	rjmp	.+18     	; 0x17a8 <Print::printFloat(double, unsigned char)+0xee>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:264
  {
     n += print('-');
    1796:	6d e2       	ldi	r22, 0x2D	; 45
    1798:	ce 01       	movw	r24, r28
    179a:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <Print::print(char)>
    179e:	1c 01       	movw	r2, r24
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:265
     number = -number;
    17a0:	f7 fa       	bst	r15, 7
    17a2:	f0 94       	com	r15
    17a4:	f7 f8       	bld	r15, 7
    17a6:	f0 94       	com	r15
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:270
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    17a8:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:269
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    17aa:	60 e0       	ldi	r22, 0x00	; 0
    17ac:	70 e0       	ldi	r23, 0x00	; 0
    17ae:	80 e0       	ldi	r24, 0x00	; 0
    17b0:	9f e3       	ldi	r25, 0x3F	; 63
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:270
  for (uint8_t i=0; i<digits; ++i)
    17b2:	71 16       	cp	r7, r17
    17b4:	41 f0       	breq	.+16     	; 0x17c6 <Print::printFloat(double, unsigned char)+0x10c>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:271
    rounding /= 10.0;
    17b6:	20 e0       	ldi	r18, 0x00	; 0
    17b8:	30 e0       	ldi	r19, 0x00	; 0
    17ba:	40 e2       	ldi	r20, 0x20	; 32
    17bc:	51 e4       	ldi	r21, 0x41	; 65
    17be:	0e 94 6c 0e 	call	0x1cd8	; 0x1cd8 <__divsf3>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:270
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    17c2:	1f 5f       	subi	r17, 0xFF	; 255
    17c4:	f6 cf       	rjmp	.-20     	; 0x17b2 <Print::printFloat(double, unsigned char)+0xf8>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:273
    rounding /= 10.0;
  
  number += rounding;
    17c6:	a7 01       	movw	r20, r14
    17c8:	96 01       	movw	r18, r12
    17ca:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <__addsf3>
    17ce:	2b 01       	movw	r4, r22
    17d0:	3c 01       	movw	r6, r24
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:276

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    17d2:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <__fixunssfsi>
    17d6:	4b 01       	movw	r8, r22
    17d8:	5c 01       	movw	r10, r24
_ZN5Print5printEmi():
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    17da:	2a e0       	ldi	r18, 0x0A	; 10
    17dc:	bc 01       	movw	r22, r24
    17de:	a4 01       	movw	r20, r8
    17e0:	ce 01       	movw	r24, r28
    17e2:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <Print::printNumber(unsigned long, unsigned char)>
_ZN5Print10printFloatEdh():
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:278
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    17e6:	7c 01       	movw	r14, r24
    17e8:	e2 0c       	add	r14, r2
    17ea:	f3 1c       	adc	r15, r3
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:281

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    17ec:	11 23       	and	r17, r17
    17ee:	b1 f1       	breq	.+108    	; 0x185c <Print::printFloat(double, unsigned char)+0x1a2>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:277
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    17f0:	c5 01       	movw	r24, r10
    17f2:	b4 01       	movw	r22, r8
    17f4:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <__floatunsisf>
    17f8:	9b 01       	movw	r18, r22
    17fa:	ac 01       	movw	r20, r24
    17fc:	c3 01       	movw	r24, r6
    17fe:	b2 01       	movw	r22, r4
    1800:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <__subsf3>
    1804:	4b 01       	movw	r8, r22
    1806:	5c 01       	movw	r10, r24
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:282
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    1808:	6e e2       	ldi	r22, 0x2E	; 46
    180a:	ce 01       	movw	r24, r28
    180c:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <Print::print(char)>
    1810:	e8 0e       	add	r14, r24
    1812:	f9 1e       	adc	r15, r25
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:286
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    1814:	11 50       	subi	r17, 0x01	; 1
    1816:	10 f1       	brcs	.+68     	; 0x185c <Print::printFloat(double, unsigned char)+0x1a2>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:288
  {
    remainder *= 10.0;
    1818:	20 e0       	ldi	r18, 0x00	; 0
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	40 e2       	ldi	r20, 0x20	; 32
    181e:	51 e4       	ldi	r21, 0x41	; 65
    1820:	c5 01       	movw	r24, r10
    1822:	b4 01       	movw	r22, r8
    1824:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <__mulsf3>
    1828:	2b 01       	movw	r4, r22
    182a:	3c 01       	movw	r6, r24
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:289
    unsigned int toPrint = (unsigned int)(remainder);
    182c:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <__fixunssfsi>
    1830:	4b 01       	movw	r8, r22
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:290
    n += print(toPrint);
    1832:	4a e0       	ldi	r20, 0x0A	; 10
    1834:	50 e0       	ldi	r21, 0x00	; 0
    1836:	ce 01       	movw	r24, r28
    1838:	0e 94 57 0b 	call	0x16ae	; 0x16ae <Print::print(unsigned int, int)>
    183c:	e8 0e       	add	r14, r24
    183e:	f9 1e       	adc	r15, r25
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:291
    remainder -= toPrint; 
    1840:	b4 01       	movw	r22, r8
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	80 e0       	ldi	r24, 0x00	; 0
    1846:	0e 94 14 0f 	call	0x1e28	; 0x1e28 <__floatunsisf>
    184a:	9b 01       	movw	r18, r22
    184c:	ac 01       	movw	r20, r24
    184e:	c3 01       	movw	r24, r6
    1850:	b2 01       	movw	r22, r4
    1852:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <__subsf3>
    1856:	4b 01       	movw	r8, r22
    1858:	5c 01       	movw	r10, r24
    185a:	dc cf       	rjmp	.-72     	; 0x1814 <Print::printFloat(double, unsigned char)+0x15a>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:295
  } 
  
  return n;
}
    185c:	c7 01       	movw	r24, r14
    185e:	df 91       	pop	r29
    1860:	cf 91       	pop	r28
    1862:	1f 91       	pop	r17
    1864:	ff 90       	pop	r15
    1866:	ef 90       	pop	r14
    1868:	df 90       	pop	r13
    186a:	cf 90       	pop	r12
    186c:	bf 90       	pop	r11
    186e:	af 90       	pop	r10
    1870:	9f 90       	pop	r9
    1872:	8f 90       	pop	r8
    1874:	7f 90       	pop	r7
    1876:	6f 90       	pop	r6
    1878:	5f 90       	pop	r5
    187a:	4f 90       	pop	r4
    187c:	3f 90       	pop	r3
    187e:	2f 90       	pop	r2
    1880:	08 95       	ret

00001882 <Print::print(double, int)>:
_ZN5Print5printEdi():
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:111
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    1882:	0c 94 5d 0b 	jmp	0x16ba	; 0x16ba <Print::printFloat(double, unsigned char)>

00001886 <Print::println(double, int)>:
_ZN5Print7printlnEdi():
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:188
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    1886:	0f 93       	push	r16
    1888:	1f 93       	push	r17
    188a:	cf 93       	push	r28
    188c:	df 93       	push	r29
    188e:	ec 01       	movw	r28, r24
_ZN5Print5printEdi():
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:111
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    1890:	0e 94 5d 0b 	call	0x16ba	; 0x16ba <Print::printFloat(double, unsigned char)>
    1894:	8c 01       	movw	r16, r24
_ZN5Print7printlnEdi():
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:190
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    1896:	ce 01       	movw	r24, r28
    1898:	0e 94 fa 0a 	call	0x15f4	; 0x15f4 <Print::println()>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:192
  return n;
}
    189c:	80 0f       	add	r24, r16
    189e:	91 1f       	adc	r25, r17
    18a0:	df 91       	pop	r29
    18a2:	cf 91       	pop	r28
    18a4:	1f 91       	pop	r17
    18a6:	0f 91       	pop	r16
    18a8:	08 95       	ret

000018aa <String::~String()>:
_ZN6StringD2Ev():
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:447 (discriminator 6)
}

unsigned char String::equals(const String &s2) const
{
  return (len == s2.len && compareTo(s2) == 0);
}
    18aa:	fc 01       	movw	r30, r24
    18ac:	80 81       	ld	r24, Z
    18ae:	91 81       	ldd	r25, Z+1	; 0x01
    18b0:	0c 94 01 11 	jmp	0x2202	; 0x2202 <free>

000018b4 <String::invalidate()>:
_ZN6String10invalidateEv():
    18b4:	cf 93       	push	r28
    18b6:	df 93       	push	r29
    18b8:	ec 01       	movw	r28, r24
    18ba:	88 81       	ld	r24, Y
    18bc:	99 81       	ldd	r25, Y+1	; 0x01
    18be:	00 97       	sbiw	r24, 0x00	; 0
    18c0:	11 f0       	breq	.+4      	; 0x18c6 <String::invalidate()+0x12>
    18c2:	0e 94 01 11 	call	0x2202	; 0x2202 <free>
    18c6:	19 82       	std	Y+1, r1	; 0x01
    18c8:	18 82       	st	Y, r1
    18ca:	1d 82       	std	Y+5, r1	; 0x05
    18cc:	1c 82       	std	Y+4, r1	; 0x04
    18ce:	1b 82       	std	Y+3, r1	; 0x03
    18d0:	1a 82       	std	Y+2, r1	; 0x02
    18d2:	df 91       	pop	r29
    18d4:	cf 91       	pop	r28
    18d6:	08 95       	ret

000018d8 <String::changeBuffer(unsigned int)>:
_ZN6String12changeBufferEj():
    18d8:	0f 93       	push	r16
    18da:	1f 93       	push	r17
    18dc:	cf 93       	push	r28
    18de:	df 93       	push	r29
    18e0:	ec 01       	movw	r28, r24
    18e2:	8b 01       	movw	r16, r22
    18e4:	6f 5f       	subi	r22, 0xFF	; 255
    18e6:	7f 4f       	sbci	r23, 0xFF	; 255
    18e8:	88 81       	ld	r24, Y
    18ea:	99 81       	ldd	r25, Y+1	; 0x01
    18ec:	0e 94 8a 11 	call	0x2314	; 0x2314 <realloc>
    18f0:	00 97       	sbiw	r24, 0x00	; 0
    18f2:	51 f0       	breq	.+20     	; 0x1908 <String::changeBuffer(unsigned int)+0x30>
    18f4:	99 83       	std	Y+1, r25	; 0x01
    18f6:	88 83       	st	Y, r24
    18f8:	1b 83       	std	Y+3, r17	; 0x03
    18fa:	0a 83       	std	Y+2, r16	; 0x02
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	df 91       	pop	r29
    1900:	cf 91       	pop	r28
    1902:	1f 91       	pop	r17
    1904:	0f 91       	pop	r16
    1906:	08 95       	ret
    1908:	80 e0       	ldi	r24, 0x00	; 0
    190a:	f9 cf       	rjmp	.-14     	; 0x18fe <String::changeBuffer(unsigned int)+0x26>

0000190c <String::reserve(unsigned int)>:
_ZN6String7reserveEj():
    190c:	cf 93       	push	r28
    190e:	df 93       	push	r29
    1910:	ec 01       	movw	r28, r24
    1912:	88 81       	ld	r24, Y
    1914:	99 81       	ldd	r25, Y+1	; 0x01
    1916:	89 2b       	or	r24, r25
    1918:	49 f0       	breq	.+18     	; 0x192c <String::reserve(unsigned int)+0x20>
    191a:	8a 81       	ldd	r24, Y+2	; 0x02
    191c:	9b 81       	ldd	r25, Y+3	; 0x03
    191e:	86 17       	cp	r24, r22
    1920:	97 07       	cpc	r25, r23
    1922:	20 f0       	brcs	.+8      	; 0x192c <String::reserve(unsigned int)+0x20>
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	df 91       	pop	r29
    1928:	cf 91       	pop	r28
    192a:	08 95       	ret
    192c:	ce 01       	movw	r24, r28
    192e:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <String::changeBuffer(unsigned int)>
    1932:	88 23       	and	r24, r24
    1934:	c1 f3       	breq	.-16     	; 0x1926 <String::reserve(unsigned int)+0x1a>
    1936:	8c 81       	ldd	r24, Y+4	; 0x04
    1938:	9d 81       	ldd	r25, Y+5	; 0x05
    193a:	89 2b       	or	r24, r25
    193c:	99 f7       	brne	.-26     	; 0x1924 <String::reserve(unsigned int)+0x18>
    193e:	e8 81       	ld	r30, Y
    1940:	f9 81       	ldd	r31, Y+1	; 0x01
    1942:	10 82       	st	Z, r1
    1944:	ef cf       	rjmp	.-34     	; 0x1924 <String::reserve(unsigned int)+0x18>

00001946 <String::copy(char const*, unsigned int)>:
_ZN6String4copyEPKcj():
    1946:	ef 92       	push	r14
    1948:	ff 92       	push	r15
    194a:	0f 93       	push	r16
    194c:	1f 93       	push	r17
    194e:	cf 93       	push	r28
    1950:	df 93       	push	r29
    1952:	ec 01       	movw	r28, r24
    1954:	7b 01       	movw	r14, r22
    1956:	8a 01       	movw	r16, r20
    1958:	ba 01       	movw	r22, r20
    195a:	0e 94 86 0c 	call	0x190c	; 0x190c <String::reserve(unsigned int)>
    195e:	81 11       	cpse	r24, r1
    1960:	0b c0       	rjmp	.+22     	; 0x1978 <String::copy(char const*, unsigned int)+0x32>
    1962:	ce 01       	movw	r24, r28
    1964:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <String::invalidate()>
    1968:	ce 01       	movw	r24, r28
    196a:	df 91       	pop	r29
    196c:	cf 91       	pop	r28
    196e:	1f 91       	pop	r17
    1970:	0f 91       	pop	r16
    1972:	ff 90       	pop	r15
    1974:	ef 90       	pop	r14
    1976:	08 95       	ret
    1978:	1d 83       	std	Y+5, r17	; 0x05
    197a:	0c 83       	std	Y+4, r16	; 0x04
    197c:	b7 01       	movw	r22, r14
    197e:	88 81       	ld	r24, Y
    1980:	99 81       	ldd	r25, Y+1	; 0x01
    1982:	0e 94 59 12 	call	0x24b2	; 0x24b2 <strcpy>
    1986:	f0 cf       	rjmp	.-32     	; 0x1968 <String::copy(char const*, unsigned int)+0x22>

00001988 <String::String(char const*)>:
_ZN6String4initEv():
    1988:	fc 01       	movw	r30, r24
    198a:	11 82       	std	Z+1, r1	; 0x01
    198c:	10 82       	st	Z, r1
    198e:	13 82       	std	Z+3, r1	; 0x03
    1990:	12 82       	std	Z+2, r1	; 0x02
    1992:	15 82       	std	Z+5, r1	; 0x05
    1994:	14 82       	std	Z+4, r1	; 0x04
_ZN6StringC2EPKc():
    1996:	61 15       	cp	r22, r1
    1998:	71 05       	cpc	r23, r1
    199a:	51 f0       	breq	.+20     	; 0x19b0 <String::String(char const*)+0x28>
    199c:	fb 01       	movw	r30, r22
    199e:	01 90       	ld	r0, Z+
    19a0:	00 20       	and	r0, r0
    19a2:	e9 f7       	brne	.-6      	; 0x199e <String::String(char const*)+0x16>
    19a4:	31 97       	sbiw	r30, 0x01	; 1
    19a6:	af 01       	movw	r20, r30
    19a8:	46 1b       	sub	r20, r22
    19aa:	57 0b       	sbc	r21, r23
    19ac:	0c 94 a3 0c 	jmp	0x1946	; 0x1946 <String::copy(char const*, unsigned int)>
    19b0:	08 95       	ret

000019b2 <String::operator=(String const&)>:
_ZN6StringaSERKS_():
    19b2:	cf 93       	push	r28
    19b4:	df 93       	push	r29
    19b6:	ec 01       	movw	r28, r24
    19b8:	fb 01       	movw	r30, r22
    19ba:	86 17       	cp	r24, r22
    19bc:	97 07       	cpc	r25, r23
    19be:	49 f0       	breq	.+18     	; 0x19d2 <String::operator=(String const&)+0x20>
    19c0:	60 81       	ld	r22, Z
    19c2:	71 81       	ldd	r23, Z+1	; 0x01
    19c4:	61 15       	cp	r22, r1
    19c6:	71 05       	cpc	r23, r1
    19c8:	41 f0       	breq	.+16     	; 0x19da <String::operator=(String const&)+0x28>
    19ca:	44 81       	ldd	r20, Z+4	; 0x04
    19cc:	55 81       	ldd	r21, Z+5	; 0x05
    19ce:	0e 94 a3 0c 	call	0x1946	; 0x1946 <String::copy(char const*, unsigned int)>
    19d2:	ce 01       	movw	r24, r28
    19d4:	df 91       	pop	r29
    19d6:	cf 91       	pop	r28
    19d8:	08 95       	ret
    19da:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <String::invalidate()>
    19de:	f9 cf       	rjmp	.-14     	; 0x19d2 <String::operator=(String const&)+0x20>

000019e0 <String::String(String const&)>:
_ZN6String4initEv():
    19e0:	fc 01       	movw	r30, r24
    19e2:	11 82       	std	Z+1, r1	; 0x01
    19e4:	10 82       	st	Z, r1
    19e6:	13 82       	std	Z+3, r1	; 0x03
    19e8:	12 82       	std	Z+2, r1	; 0x02
    19ea:	15 82       	std	Z+5, r1	; 0x05
    19ec:	14 82       	std	Z+4, r1	; 0x04
_ZN6StringC2ERKS_():
    19ee:	0c 94 d9 0c 	jmp	0x19b2	; 0x19b2 <String::operator=(String const&)>

000019f2 <String::equals(char const*) const>:
_ZNK6String6equalsEPKc():
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:451

unsigned char String::equals(const char *cstr) const
{
  if (len == 0) return (cstr == NULL || *cstr == 0);
    19f2:	fc 01       	movw	r30, r24
    19f4:	24 81       	ldd	r18, Z+4	; 0x04
    19f6:	35 81       	ldd	r19, Z+5	; 0x05
    19f8:	23 2b       	or	r18, r19
    19fa:	31 f4       	brne	.+12     	; 0x1a08 <String::equals(char const*) const+0x16>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:451 (discriminator 1)
    19fc:	21 e0       	ldi	r18, 0x01	; 1
    19fe:	fb 01       	movw	r30, r22
    1a00:	67 2b       	or	r22, r23
    1a02:	49 f4       	brne	.+18     	; 0x1a16 <String::equals(char const*) const+0x24>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:454
  if (cstr == NULL) return buffer[0] == 0;
  return strcmp(buffer, cstr) == 0;
}
    1a04:	82 2f       	mov	r24, r18
    1a06:	08 95       	ret
    1a08:	80 81       	ld	r24, Z
    1a0a:	91 81       	ldd	r25, Z+1	; 0x01
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:452
}

unsigned char String::equals(const char *cstr) const
{
  if (len == 0) return (cstr == NULL || *cstr == 0);
  if (cstr == NULL) return buffer[0] == 0;
    1a0c:	61 15       	cp	r22, r1
    1a0e:	71 05       	cpc	r23, r1
    1a10:	39 f4       	brne	.+14     	; 0x1a20 <String::equals(char const*) const+0x2e>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:452 (discriminator 1)
    1a12:	21 e0       	ldi	r18, 0x01	; 1
    1a14:	fc 01       	movw	r30, r24
    1a16:	80 81       	ld	r24, Z
    1a18:	88 23       	and	r24, r24
    1a1a:	a1 f3       	breq	.-24     	; 0x1a04 <String::equals(char const*) const+0x12>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/WString.cpp:453
  return strcmp(buffer, cstr) == 0;
    1a1c:	20 e0       	ldi	r18, 0x00	; 0
    1a1e:	f2 cf       	rjmp	.-28     	; 0x1a04 <String::equals(char const*) const+0x12>
    1a20:	0e 94 50 12 	call	0x24a0	; 0x24a0 <strcmp>
    1a24:	21 e0       	ldi	r18, 0x01	; 1
    1a26:	89 2b       	or	r24, r25
    1a28:	69 f3       	breq	.-38     	; 0x1a04 <String::equals(char const*) const+0x12>
    1a2a:	f8 cf       	rjmp	.-16     	; 0x1a1c <String::equals(char const*) const+0x2a>

00001a2c <initVariant>:
initVariant():
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    1a2c:	08 95       	ret

00001a2e <main>:
main():
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
    1a2e:	0e 94 c1 08 	call	0x1182	; 0x1182 <init>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:37

  initVariant();
    1a32:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <initVariant>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
    1a36:	0e 94 93 00 	call	0x126	; 0x126 <setup>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    1a3a:	c4 e6       	ldi	r28, 0x64	; 100
    1a3c:	dd e0       	ldi	r29, 0x0D	; 13
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
    1a3e:	0e 94 30 01 	call	0x260	; 0x260 <loop>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
    1a42:	20 97       	sbiw	r28, 0x00	; 0
    1a44:	e1 f3       	breq	.-8      	; 0x1a3e <main+0x10>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47 (discriminator 1)
    1a46:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <serialEventRun()>
    1a4a:	f9 cf       	rjmp	.-14     	; 0x1a3e <main+0x10>

00001a4c <yield>:
__empty():
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/hooks.c:30
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
  // Empty
}
    1a4c:	08 95       	ret

00001a4e <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:150
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    1a4e:	fc 01       	movw	r30, r24
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:151
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    1a50:	91 8d       	ldd	r25, Z+25	; 0x19
    1a52:	22 8d       	ldd	r18, Z+26	; 0x1a
    1a54:	89 2f       	mov	r24, r25
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	80 5c       	subi	r24, 0xC0	; 192
    1a5a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a5c:	82 1b       	sub	r24, r18
    1a5e:	91 09       	sbc	r25, r1
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:152
}
    1a60:	8f 73       	andi	r24, 0x3F	; 63
    1a62:	99 27       	eor	r25, r25
    1a64:	08 95       	ret

00001a66 <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:155

int HardwareSerial::peek(void)
{
    1a66:	fc 01       	movw	r30, r24
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:156
  if (_rx_buffer_head == _rx_buffer_tail) {
    1a68:	91 8d       	ldd	r25, Z+25	; 0x19
    1a6a:	82 8d       	ldd	r24, Z+26	; 0x1a
    1a6c:	98 17       	cp	r25, r24
    1a6e:	31 f0       	breq	.+12     	; 0x1a7c <HardwareSerial::peek()+0x16>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:159
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    1a70:	82 8d       	ldd	r24, Z+26	; 0x1a
    1a72:	e8 0f       	add	r30, r24
    1a74:	f1 1d       	adc	r31, r1
    1a76:	85 8d       	ldd	r24, Z+29	; 0x1d
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	08 95       	ret
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:157
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1a7c:	8f ef       	ldi	r24, 0xFF	; 255
    1a7e:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:161
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    1a80:	08 95       	ret

00001a82 <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:164

int HardwareSerial::read(void)
{
    1a82:	fc 01       	movw	r30, r24
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:166
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    1a84:	91 8d       	ldd	r25, Z+25	; 0x19
    1a86:	82 8d       	ldd	r24, Z+26	; 0x1a
    1a88:	98 17       	cp	r25, r24
    1a8a:	61 f0       	breq	.+24     	; 0x1aa4 <HardwareSerial::read()+0x22>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:169
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    1a8c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1a8e:	ae 0f       	add	r26, r30
    1a90:	bf 2f       	mov	r27, r31
    1a92:	b1 1d       	adc	r27, r1
    1a94:	5d 96       	adiw	r26, 0x1d	; 29
    1a96:	8c 91       	ld	r24, X
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:170
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    1a98:	92 8d       	ldd	r25, Z+26	; 0x1a
    1a9a:	9f 5f       	subi	r25, 0xFF	; 255
    1a9c:	9f 73       	andi	r25, 0x3F	; 63
    1a9e:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:171
    return c;
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	08 95       	ret
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:167

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    1aa4:	8f ef       	ldi	r24, 0xFF	; 255
    1aa6:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:173
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    1aa8:	08 95       	ret

00001aaa <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:181
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
    1aaa:	fc 01       	movw	r30, r24
    1aac:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:182
  tx_buffer_index_t tail = _tx_buffer_tail;
    1aae:	44 8d       	ldd	r20, Z+28	; 0x1c
    1ab0:	25 2f       	mov	r18, r21
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	84 2f       	mov	r24, r20
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:186
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    1ab8:	82 1b       	sub	r24, r18
    1aba:	93 0b       	sbc	r25, r19
    1abc:	54 17       	cp	r21, r20
    1abe:	10 f0       	brcs	.+4      	; 0x1ac4 <HardwareSerial::availableForWrite()+0x1a>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:186 (discriminator 1)
    1ac0:	cf 96       	adiw	r24, 0x3f	; 63
    1ac2:	08 95       	ret
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:187
  return tail - head - 1;
    1ac4:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:188
}
    1ac6:	08 95       	ret

00001ac8 <serialEventRun()>:
_Z14serialEventRunv():
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    1ac8:	88 e7       	ldi	r24, 0x78	; 120
    1aca:	9a e0       	ldi	r25, 0x0A	; 10
    1acc:	89 2b       	or	r24, r25
    1ace:	49 f0       	breq	.+18     	; 0x1ae2 <serialEventRun()+0x1a>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 1)
    1ad0:	80 e0       	ldi	r24, 0x00	; 0
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	89 2b       	or	r24, r25
    1ad6:	29 f0       	breq	.+10     	; 0x1ae2 <serialEventRun()+0x1a>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 3)
    1ad8:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <Serial0_available()>
    1adc:	81 11       	cpse	r24, r1
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66
    1ade:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:77
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
    1ae2:	08 95       	ret

00001ae4 <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:82

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    1ae4:	fc 01       	movw	r30, r24
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:85
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    1ae6:	a4 8d       	ldd	r26, Z+28	; 0x1c
    1ae8:	a8 0f       	add	r26, r24
    1aea:	b9 2f       	mov	r27, r25
    1aec:	b1 1d       	adc	r27, r1
    1aee:	a3 5a       	subi	r26, 0xA3	; 163
    1af0:	bf 4f       	sbci	r27, 0xFF	; 255
    1af2:	2c 91       	ld	r18, X
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:86
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    1af4:	84 8d       	ldd	r24, Z+28	; 0x1c
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	01 96       	adiw	r24, 0x01	; 1
    1afa:	8f 73       	andi	r24, 0x3F	; 63
    1afc:	99 27       	eor	r25, r25
    1afe:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:88

  *_udr = c;
    1b00:	a6 89       	ldd	r26, Z+22	; 0x16
    1b02:	b7 89       	ldd	r27, Z+23	; 0x17
    1b04:	2c 93       	st	X, r18
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:93

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  *_ucsra |= _BV(TXC0);
    1b06:	a0 89       	ldd	r26, Z+16	; 0x10
    1b08:	b1 89       	ldd	r27, Z+17	; 0x11
    1b0a:	8c 91       	ld	r24, X
    1b0c:	80 64       	ori	r24, 0x40	; 64
    1b0e:	8c 93       	st	X, r24
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:95

  if (_tx_buffer_head == _tx_buffer_tail) {
    1b10:	93 8d       	ldd	r25, Z+27	; 0x1b
    1b12:	84 8d       	ldd	r24, Z+28	; 0x1c
    1b14:	98 13       	cpse	r25, r24
    1b16:	06 c0       	rjmp	.+12     	; 0x1b24 <HardwareSerial::_tx_udr_empty_irq()+0x40>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:97
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
    1b18:	02 88       	ldd	r0, Z+18	; 0x12
    1b1a:	f3 89       	ldd	r31, Z+19	; 0x13
    1b1c:	e0 2d       	mov	r30, r0
    1b1e:	80 81       	ld	r24, Z
    1b20:	8f 7d       	andi	r24, 0xDF	; 223
    1b22:	80 83       	st	Z, r24
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:99
  }
}
    1b24:	08 95       	ret

00001b26 <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:191
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    1b26:	cf 93       	push	r28
    1b28:	df 93       	push	r29
    1b2a:	ec 01       	movw	r28, r24
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:195
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    1b2c:	88 8d       	ldd	r24, Y+24	; 0x18
    1b2e:	88 23       	and	r24, r24
    1b30:	b9 f0       	breq	.+46     	; 0x1b60 <HardwareSerial::flush()+0x3a>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:198
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    1b32:	aa 89       	ldd	r26, Y+18	; 0x12
    1b34:	bb 89       	ldd	r27, Y+19	; 0x13
    1b36:	e8 89       	ldd	r30, Y+16	; 0x10
    1b38:	f9 89       	ldd	r31, Y+17	; 0x11
    1b3a:	8c 91       	ld	r24, X
    1b3c:	85 fd       	sbrc	r24, 5
    1b3e:	03 c0       	rjmp	.+6      	; 0x1b46 <HardwareSerial::flush()+0x20>
    1b40:	80 81       	ld	r24, Z
    1b42:	86 fd       	sbrc	r24, 6
    1b44:	0d c0       	rjmp	.+26     	; 0x1b60 <HardwareSerial::flush()+0x3a>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:199
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    1b46:	0f b6       	in	r0, 0x3f	; 63
    1b48:	07 fc       	sbrc	r0, 7
    1b4a:	f7 cf       	rjmp	.-18     	; 0x1b3a <HardwareSerial::flush()+0x14>
    1b4c:	8c 91       	ld	r24, X
    1b4e:	85 ff       	sbrs	r24, 5
    1b50:	f2 cf       	rjmp	.-28     	; 0x1b36 <HardwareSerial::flush()+0x10>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:203
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
    1b52:	80 81       	ld	r24, Z
    1b54:	85 ff       	sbrs	r24, 5
    1b56:	ed cf       	rjmp	.-38     	; 0x1b32 <HardwareSerial::flush()+0xc>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:204
        _tx_udr_empty_irq();
    1b58:	ce 01       	movw	r24, r28
    1b5a:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <HardwareSerial::_tx_udr_empty_irq()>
    1b5e:	e9 cf       	rjmp	.-46     	; 0x1b32 <HardwareSerial::flush()+0xc>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:208
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    1b60:	df 91       	pop	r29
    1b62:	cf 91       	pop	r28
    1b64:	08 95       	ret

00001b66 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:211

size_t HardwareSerial::write(uint8_t c)
{
    1b66:	ef 92       	push	r14
    1b68:	ff 92       	push	r15
    1b6a:	0f 93       	push	r16
    1b6c:	1f 93       	push	r17
    1b6e:	cf 93       	push	r28
    1b70:	df 93       	push	r29
    1b72:	ec 01       	movw	r28, r24
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:212
  _written = true;
    1b74:	81 e0       	ldi	r24, 0x01	; 1
    1b76:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:217
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    1b78:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1b7a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1b7c:	98 13       	cpse	r25, r24
    1b7e:	16 c0       	rjmp	.+44     	; 0x1bac <HardwareSerial::write(unsigned char)+0x46>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:217 (discriminator 1)
    1b80:	e8 89       	ldd	r30, Y+16	; 0x10
    1b82:	f9 89       	ldd	r31, Y+17	; 0x11
    1b84:	80 81       	ld	r24, Z
    1b86:	85 ff       	sbrs	r24, 5
    1b88:	11 c0       	rjmp	.+34     	; 0x1bac <HardwareSerial::write(unsigned char)+0x46>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:218
    *_udr = c;
    1b8a:	ee 89       	ldd	r30, Y+22	; 0x16
    1b8c:	ff 89       	ldd	r31, Y+23	; 0x17
    1b8e:	60 83       	st	Z, r22
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:219
    *_ucsra |= _BV(TXC0);
    1b90:	e8 89       	ldd	r30, Y+16	; 0x10
    1b92:	f9 89       	ldd	r31, Y+17	; 0x11
    1b94:	80 81       	ld	r24, Z
    1b96:	80 64       	ori	r24, 0x40	; 64
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:242
  }

  _tx_buffer[_tx_buffer_head] = c;
  _tx_buffer_head = i;

  *_ucsrb |= _BV(UDRIE0);
    1b98:	80 83       	st	Z, r24
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:245
  
  return 1;
}
    1b9a:	81 e0       	ldi	r24, 0x01	; 1
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	df 91       	pop	r29
    1ba0:	cf 91       	pop	r28
    1ba2:	1f 91       	pop	r17
    1ba4:	0f 91       	pop	r16
    1ba6:	ff 90       	pop	r15
    1ba8:	ef 90       	pop	r14
    1baa:	08 95       	ret
    1bac:	f6 2e       	mov	r15, r22
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:222
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    *_ucsra |= _BV(TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    1bae:	0b 8d       	ldd	r16, Y+27	; 0x1b
    1bb0:	10 e0       	ldi	r17, 0x00	; 0
    1bb2:	0f 5f       	subi	r16, 0xFF	; 255
    1bb4:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb6:	0f 73       	andi	r16, 0x3F	; 63
    1bb8:	11 27       	eor	r17, r17
    1bba:	e0 2e       	mov	r14, r16
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:226

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    1bbc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1bbe:	8e 11       	cpse	r24, r14
    1bc0:	0c c0       	rjmp	.+24     	; 0x1bda <HardwareSerial::write(unsigned char)+0x74>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:227
    if (bit_is_clear(SREG, SREG_I)) {
    1bc2:	0f b6       	in	r0, 0x3f	; 63
    1bc4:	07 fc       	sbrc	r0, 7
    1bc6:	fa cf       	rjmp	.-12     	; 0x1bbc <HardwareSerial::write(unsigned char)+0x56>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:232
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    1bc8:	e8 89       	ldd	r30, Y+16	; 0x10
    1bca:	f9 89       	ldd	r31, Y+17	; 0x11
    1bcc:	80 81       	ld	r24, Z
    1bce:	85 ff       	sbrs	r24, 5
    1bd0:	f5 cf       	rjmp	.-22     	; 0x1bbc <HardwareSerial::write(unsigned char)+0x56>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:233
        _tx_udr_empty_irq();
    1bd2:	ce 01       	movw	r24, r28
    1bd4:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <HardwareSerial::_tx_udr_empty_irq()>
    1bd8:	f1 cf       	rjmp	.-30     	; 0x1bbc <HardwareSerial::write(unsigned char)+0x56>
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:239
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    1bda:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1bdc:	ec 0f       	add	r30, r28
    1bde:	fd 2f       	mov	r31, r29
    1be0:	f1 1d       	adc	r31, r1
    1be2:	e3 5a       	subi	r30, 0xA3	; 163
    1be4:	ff 4f       	sbci	r31, 0xFF	; 255
    1be6:	f0 82       	st	Z, r15
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:240
  _tx_buffer_head = i;
    1be8:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\katel\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:242

  *_ucsrb |= _BV(UDRIE0);
    1bea:	ea 89       	ldd	r30, Y+18	; 0x12
    1bec:	fb 89       	ldd	r31, Y+19	; 0x13
    1bee:	80 81       	ld	r24, Z
    1bf0:	80 62       	ori	r24, 0x20	; 32
    1bf2:	d2 cf       	rjmp	.-92     	; 0x1b98 <HardwareSerial::write(unsigned char)+0x32>

00001bf4 <__subsf3>:
__subsf3():
    1bf4:	50 58       	subi	r21, 0x80	; 128

00001bf6 <__addsf3>:
    1bf6:	bb 27       	eor	r27, r27
    1bf8:	aa 27       	eor	r26, r26
    1bfa:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <__addsf3x>
    1bfe:	0c 94 8c 0f 	jmp	0x1f18	; 0x1f18 <__fp_round>
__addsf3():
    1c02:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <__fp_pscA>
    1c06:	38 f0       	brcs	.+14     	; 0x1c16 <__addsf3+0x20>
    1c08:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <__fp_pscB>
    1c0c:	20 f0       	brcs	.+8      	; 0x1c16 <__addsf3+0x20>
    1c0e:	39 f4       	brne	.+14     	; 0x1c1e <__addsf3+0x28>
    1c10:	9f 3f       	cpi	r25, 0xFF	; 255
    1c12:	19 f4       	brne	.+6      	; 0x1c1a <__addsf3+0x24>
    1c14:	26 f4       	brtc	.+8      	; 0x1c1e <__addsf3+0x28>
    1c16:	0c 94 7b 0f 	jmp	0x1ef6	; 0x1ef6 <__fp_nan>
    1c1a:	0e f4       	brtc	.+2      	; 0x1c1e <__addsf3+0x28>
    1c1c:	e0 95       	com	r30
    1c1e:	e7 fb       	bst	r30, 7
    1c20:	0c 94 75 0f 	jmp	0x1eea	; 0x1eea <__fp_inf>

00001c24 <__addsf3x>:
__addsf3x():
    1c24:	e9 2f       	mov	r30, r25
    1c26:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <__fp_split3>
    1c2a:	58 f3       	brcs	.-42     	; 0x1c02 <__addsf3+0xc>
    1c2c:	ba 17       	cp	r27, r26
    1c2e:	62 07       	cpc	r22, r18
    1c30:	73 07       	cpc	r23, r19
    1c32:	84 07       	cpc	r24, r20
    1c34:	95 07       	cpc	r25, r21
    1c36:	20 f0       	brcs	.+8      	; 0x1c40 <__addsf3x+0x1c>
    1c38:	79 f4       	brne	.+30     	; 0x1c58 <__addsf3x+0x34>
    1c3a:	a6 f5       	brtc	.+104    	; 0x1ca4 <__addsf3x+0x80>
    1c3c:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__fp_zero>
    1c40:	0e f4       	brtc	.+2      	; 0x1c44 <__addsf3x+0x20>
    1c42:	e0 95       	com	r30
    1c44:	0b 2e       	mov	r0, r27
    1c46:	ba 2f       	mov	r27, r26
    1c48:	a0 2d       	mov	r26, r0
    1c4a:	0b 01       	movw	r0, r22
    1c4c:	b9 01       	movw	r22, r18
    1c4e:	90 01       	movw	r18, r0
    1c50:	0c 01       	movw	r0, r24
    1c52:	ca 01       	movw	r24, r20
    1c54:	a0 01       	movw	r20, r0
    1c56:	11 24       	eor	r1, r1
    1c58:	ff 27       	eor	r31, r31
    1c5a:	59 1b       	sub	r21, r25
    1c5c:	99 f0       	breq	.+38     	; 0x1c84 <__addsf3x+0x60>
    1c5e:	59 3f       	cpi	r21, 0xF9	; 249
    1c60:	50 f4       	brcc	.+20     	; 0x1c76 <__addsf3x+0x52>
    1c62:	50 3e       	cpi	r21, 0xE0	; 224
    1c64:	68 f1       	brcs	.+90     	; 0x1cc0 <__addsf3x+0x9c>
    1c66:	1a 16       	cp	r1, r26
    1c68:	f0 40       	sbci	r31, 0x00	; 0
    1c6a:	a2 2f       	mov	r26, r18
    1c6c:	23 2f       	mov	r18, r19
    1c6e:	34 2f       	mov	r19, r20
    1c70:	44 27       	eor	r20, r20
    1c72:	58 5f       	subi	r21, 0xF8	; 248
    1c74:	f3 cf       	rjmp	.-26     	; 0x1c5c <__addsf3x+0x38>
    1c76:	46 95       	lsr	r20
    1c78:	37 95       	ror	r19
    1c7a:	27 95       	ror	r18
    1c7c:	a7 95       	ror	r26
    1c7e:	f0 40       	sbci	r31, 0x00	; 0
    1c80:	53 95       	inc	r21
    1c82:	c9 f7       	brne	.-14     	; 0x1c76 <__addsf3x+0x52>
    1c84:	7e f4       	brtc	.+30     	; 0x1ca4 <__addsf3x+0x80>
    1c86:	1f 16       	cp	r1, r31
    1c88:	ba 0b       	sbc	r27, r26
    1c8a:	62 0b       	sbc	r22, r18
    1c8c:	73 0b       	sbc	r23, r19
    1c8e:	84 0b       	sbc	r24, r20
    1c90:	ba f0       	brmi	.+46     	; 0x1cc0 <__addsf3x+0x9c>
    1c92:	91 50       	subi	r25, 0x01	; 1
    1c94:	a1 f0       	breq	.+40     	; 0x1cbe <__addsf3x+0x9a>
    1c96:	ff 0f       	add	r31, r31
    1c98:	bb 1f       	adc	r27, r27
    1c9a:	66 1f       	adc	r22, r22
    1c9c:	77 1f       	adc	r23, r23
    1c9e:	88 1f       	adc	r24, r24
    1ca0:	c2 f7       	brpl	.-16     	; 0x1c92 <__addsf3x+0x6e>
    1ca2:	0e c0       	rjmp	.+28     	; 0x1cc0 <__addsf3x+0x9c>
    1ca4:	ba 0f       	add	r27, r26
    1ca6:	62 1f       	adc	r22, r18
    1ca8:	73 1f       	adc	r23, r19
    1caa:	84 1f       	adc	r24, r20
    1cac:	48 f4       	brcc	.+18     	; 0x1cc0 <__addsf3x+0x9c>
    1cae:	87 95       	ror	r24
    1cb0:	77 95       	ror	r23
    1cb2:	67 95       	ror	r22
    1cb4:	b7 95       	ror	r27
    1cb6:	f7 95       	ror	r31
    1cb8:	9e 3f       	cpi	r25, 0xFE	; 254
    1cba:	08 f0       	brcs	.+2      	; 0x1cbe <__addsf3x+0x9a>
    1cbc:	b0 cf       	rjmp	.-160    	; 0x1c1e <__addsf3+0x28>
    1cbe:	93 95       	inc	r25
    1cc0:	88 0f       	add	r24, r24
    1cc2:	08 f0       	brcs	.+2      	; 0x1cc6 <__addsf3x+0xa2>
    1cc4:	99 27       	eor	r25, r25
    1cc6:	ee 0f       	add	r30, r30
    1cc8:	97 95       	ror	r25
    1cca:	87 95       	ror	r24
    1ccc:	08 95       	ret

00001cce <__cmpsf2>:
    1cce:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <__fp_cmp>
    1cd2:	08 f4       	brcc	.+2      	; 0x1cd6 <__cmpsf2+0x8>
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	08 95       	ret

00001cd8 <__divsf3>:
    1cd8:	0e 94 80 0e 	call	0x1d00	; 0x1d00 <__divsf3x>
    1cdc:	0c 94 8c 0f 	jmp	0x1f18	; 0x1f18 <__fp_round>
    1ce0:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <__fp_pscB>
    1ce4:	58 f0       	brcs	.+22     	; 0x1cfc <__divsf3+0x24>
    1ce6:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <__fp_pscA>
    1cea:	40 f0       	brcs	.+16     	; 0x1cfc <__divsf3+0x24>
    1cec:	29 f4       	brne	.+10     	; 0x1cf8 <__divsf3+0x20>
    1cee:	5f 3f       	cpi	r21, 0xFF	; 255
__divsf3():
    1cf0:	29 f0       	breq	.+10     	; 0x1cfc <__divsf3+0x24>
    1cf2:	0c 94 75 0f 	jmp	0x1eea	; 0x1eea <__fp_inf>
    1cf6:	51 11       	cpse	r21, r1
    1cf8:	0c 94 c0 0f 	jmp	0x1f80	; 0x1f80 <__fp_szero>
    1cfc:	0c 94 7b 0f 	jmp	0x1ef6	; 0x1ef6 <__fp_nan>

00001d00 <__divsf3x>:
__divsf3x():
    1d00:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <__fp_split3>
    1d04:	68 f3       	brcs	.-38     	; 0x1ce0 <__divsf3+0x8>

00001d06 <__divsf3_pse>:
    1d06:	99 23       	and	r25, r25
    1d08:	b1 f3       	breq	.-20     	; 0x1cf6 <__divsf3+0x1e>
    1d0a:	55 23       	and	r21, r21
    1d0c:	91 f3       	breq	.-28     	; 0x1cf2 <__divsf3+0x1a>
    1d0e:	95 1b       	sub	r25, r21
    1d10:	55 0b       	sbc	r21, r21
    1d12:	bb 27       	eor	r27, r27
    1d14:	aa 27       	eor	r26, r26
    1d16:	62 17       	cp	r22, r18
    1d18:	73 07       	cpc	r23, r19
    1d1a:	84 07       	cpc	r24, r20
    1d1c:	38 f0       	brcs	.+14     	; 0x1d2c <__divsf3_pse+0x26>
    1d1e:	9f 5f       	subi	r25, 0xFF	; 255
    1d20:	5f 4f       	sbci	r21, 0xFF	; 255
    1d22:	22 0f       	add	r18, r18
    1d24:	33 1f       	adc	r19, r19
    1d26:	44 1f       	adc	r20, r20
    1d28:	aa 1f       	adc	r26, r26
    1d2a:	a9 f3       	breq	.-22     	; 0x1d16 <__divsf3_pse+0x10>
    1d2c:	35 d0       	rcall	.+106    	; 0x1d98 <__divsf3_pse+0x92>
    1d2e:	0e 2e       	mov	r0, r30
    1d30:	3a f0       	brmi	.+14     	; 0x1d40 <__divsf3_pse+0x3a>
    1d32:	e0 e8       	ldi	r30, 0x80	; 128
    1d34:	32 d0       	rcall	.+100    	; 0x1d9a <__divsf3_pse+0x94>
    1d36:	91 50       	subi	r25, 0x01	; 1
    1d38:	50 40       	sbci	r21, 0x00	; 0
    1d3a:	e6 95       	lsr	r30
    1d3c:	00 1c       	adc	r0, r0
    1d3e:	ca f7       	brpl	.-14     	; 0x1d32 <__divsf3_pse+0x2c>
    1d40:	2b d0       	rcall	.+86     	; 0x1d98 <__divsf3_pse+0x92>
    1d42:	fe 2f       	mov	r31, r30
    1d44:	29 d0       	rcall	.+82     	; 0x1d98 <__divsf3_pse+0x92>
    1d46:	66 0f       	add	r22, r22
    1d48:	77 1f       	adc	r23, r23
    1d4a:	88 1f       	adc	r24, r24
    1d4c:	bb 1f       	adc	r27, r27
    1d4e:	26 17       	cp	r18, r22
    1d50:	37 07       	cpc	r19, r23
    1d52:	48 07       	cpc	r20, r24
    1d54:	ab 07       	cpc	r26, r27
    1d56:	b0 e8       	ldi	r27, 0x80	; 128
    1d58:	09 f0       	breq	.+2      	; 0x1d5c <__divsf3_pse+0x56>
    1d5a:	bb 0b       	sbc	r27, r27
    1d5c:	80 2d       	mov	r24, r0
    1d5e:	bf 01       	movw	r22, r30
    1d60:	ff 27       	eor	r31, r31
    1d62:	93 58       	subi	r25, 0x83	; 131
    1d64:	5f 4f       	sbci	r21, 0xFF	; 255
    1d66:	3a f0       	brmi	.+14     	; 0x1d76 <__divsf3_pse+0x70>
    1d68:	9e 3f       	cpi	r25, 0xFE	; 254
    1d6a:	51 05       	cpc	r21, r1
    1d6c:	78 f0       	brcs	.+30     	; 0x1d8c <__divsf3_pse+0x86>
    1d6e:	0c 94 75 0f 	jmp	0x1eea	; 0x1eea <__fp_inf>
    1d72:	0c 94 c0 0f 	jmp	0x1f80	; 0x1f80 <__fp_szero>
    1d76:	5f 3f       	cpi	r21, 0xFF	; 255
    1d78:	e4 f3       	brlt	.-8      	; 0x1d72 <__divsf3_pse+0x6c>
    1d7a:	98 3e       	cpi	r25, 0xE8	; 232
    1d7c:	d4 f3       	brlt	.-12     	; 0x1d72 <__divsf3_pse+0x6c>
    1d7e:	86 95       	lsr	r24
    1d80:	77 95       	ror	r23
    1d82:	67 95       	ror	r22
    1d84:	b7 95       	ror	r27
    1d86:	f7 95       	ror	r31
    1d88:	9f 5f       	subi	r25, 0xFF	; 255
    1d8a:	c9 f7       	brne	.-14     	; 0x1d7e <__divsf3_pse+0x78>
    1d8c:	88 0f       	add	r24, r24
    1d8e:	91 1d       	adc	r25, r1
    1d90:	96 95       	lsr	r25
    1d92:	87 95       	ror	r24
    1d94:	97 f9       	bld	r25, 7
    1d96:	08 95       	ret
    1d98:	e1 e0       	ldi	r30, 0x01	; 1
    1d9a:	66 0f       	add	r22, r22
    1d9c:	77 1f       	adc	r23, r23
    1d9e:	88 1f       	adc	r24, r24
    1da0:	bb 1f       	adc	r27, r27
    1da2:	62 17       	cp	r22, r18
    1da4:	73 07       	cpc	r23, r19
    1da6:	84 07       	cpc	r24, r20
    1da8:	ba 07       	cpc	r27, r26
    1daa:	20 f0       	brcs	.+8      	; 0x1db4 <__divsf3_pse+0xae>
    1dac:	62 1b       	sub	r22, r18
    1dae:	73 0b       	sbc	r23, r19
    1db0:	84 0b       	sbc	r24, r20
    1db2:	ba 0b       	sbc	r27, r26
    1db4:	ee 1f       	adc	r30, r30
    1db6:	88 f7       	brcc	.-30     	; 0x1d9a <__divsf3_pse+0x94>
    1db8:	e0 95       	com	r30
    1dba:	08 95       	ret

00001dbc <__fixsfsi>:
    1dbc:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <__fixunssfsi>
    1dc0:	68 94       	set
    1dc2:	b1 11       	cpse	r27, r1
    1dc4:	0c 94 c0 0f 	jmp	0x1f80	; 0x1f80 <__fp_szero>
    1dc8:	08 95       	ret

00001dca <__fixunssfsi>:
    1dca:	0e 94 a5 0f 	call	0x1f4a	; 0x1f4a <__fp_splitA>
    1dce:	88 f0       	brcs	.+34     	; 0x1df2 <__fixunssfsi+0x28>
    1dd0:	9f 57       	subi	r25, 0x7F	; 127
    1dd2:	98 f0       	brcs	.+38     	; 0x1dfa <__fixunssfsi+0x30>
    1dd4:	b9 2f       	mov	r27, r25
    1dd6:	99 27       	eor	r25, r25
    1dd8:	b7 51       	subi	r27, 0x17	; 23
    1dda:	b0 f0       	brcs	.+44     	; 0x1e08 <__fixunssfsi+0x3e>
__fixunssfsi():
    1ddc:	e1 f0       	breq	.+56     	; 0x1e16 <__fixunssfsi+0x4c>
    1dde:	66 0f       	add	r22, r22
    1de0:	77 1f       	adc	r23, r23
    1de2:	88 1f       	adc	r24, r24
    1de4:	99 1f       	adc	r25, r25
    1de6:	1a f0       	brmi	.+6      	; 0x1dee <__fixunssfsi+0x24>
    1de8:	ba 95       	dec	r27
    1dea:	c9 f7       	brne	.-14     	; 0x1dde <__fixunssfsi+0x14>
    1dec:	14 c0       	rjmp	.+40     	; 0x1e16 <__fixunssfsi+0x4c>
    1dee:	b1 30       	cpi	r27, 0x01	; 1
    1df0:	91 f0       	breq	.+36     	; 0x1e16 <__fixunssfsi+0x4c>
    1df2:	0e 94 bf 0f 	call	0x1f7e	; 0x1f7e <__fp_zero>
    1df6:	b1 e0       	ldi	r27, 0x01	; 1
    1df8:	08 95       	ret
    1dfa:	0c 94 bf 0f 	jmp	0x1f7e	; 0x1f7e <__fp_zero>
    1dfe:	67 2f       	mov	r22, r23
    1e00:	78 2f       	mov	r23, r24
    1e02:	88 27       	eor	r24, r24
    1e04:	b8 5f       	subi	r27, 0xF8	; 248
    1e06:	39 f0       	breq	.+14     	; 0x1e16 <__fixunssfsi+0x4c>
    1e08:	b9 3f       	cpi	r27, 0xF9	; 249
    1e0a:	cc f3       	brlt	.-14     	; 0x1dfe <__fixunssfsi+0x34>
    1e0c:	86 95       	lsr	r24
    1e0e:	77 95       	ror	r23
    1e10:	67 95       	ror	r22
    1e12:	b3 95       	inc	r27
    1e14:	d9 f7       	brne	.-10     	; 0x1e0c <__fixunssfsi+0x42>
    1e16:	3e f4       	brtc	.+14     	; 0x1e26 <__fixunssfsi+0x5c>
    1e18:	90 95       	com	r25
    1e1a:	80 95       	com	r24
    1e1c:	70 95       	com	r23
    1e1e:	61 95       	neg	r22
    1e20:	7f 4f       	sbci	r23, 0xFF	; 255
    1e22:	8f 4f       	sbci	r24, 0xFF	; 255
    1e24:	9f 4f       	sbci	r25, 0xFF	; 255
    1e26:	08 95       	ret

00001e28 <__floatunsisf>:
__floatunsisf():
    1e28:	e8 94       	clt
    1e2a:	09 c0       	rjmp	.+18     	; 0x1e3e <__floatsisf+0x12>

00001e2c <__floatsisf>:
    1e2c:	97 fb       	bst	r25, 7
    1e2e:	3e f4       	brtc	.+14     	; 0x1e3e <__floatsisf+0x12>
    1e30:	90 95       	com	r25
    1e32:	80 95       	com	r24
    1e34:	70 95       	com	r23
    1e36:	61 95       	neg	r22
    1e38:	7f 4f       	sbci	r23, 0xFF	; 255
    1e3a:	8f 4f       	sbci	r24, 0xFF	; 255
    1e3c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e3e:	99 23       	and	r25, r25
    1e40:	a9 f0       	breq	.+42     	; 0x1e6c <__floatsisf+0x40>
    1e42:	f9 2f       	mov	r31, r25
    1e44:	96 e9       	ldi	r25, 0x96	; 150
    1e46:	bb 27       	eor	r27, r27
    1e48:	93 95       	inc	r25
    1e4a:	f6 95       	lsr	r31
    1e4c:	87 95       	ror	r24
    1e4e:	77 95       	ror	r23
    1e50:	67 95       	ror	r22
    1e52:	b7 95       	ror	r27
    1e54:	f1 11       	cpse	r31, r1
    1e56:	f8 cf       	rjmp	.-16     	; 0x1e48 <__floatsisf+0x1c>
    1e58:	fa f4       	brpl	.+62     	; 0x1e98 <__floatsisf+0x6c>
    1e5a:	bb 0f       	add	r27, r27
    1e5c:	11 f4       	brne	.+4      	; 0x1e62 <__floatsisf+0x36>
    1e5e:	60 ff       	sbrs	r22, 0
    1e60:	1b c0       	rjmp	.+54     	; 0x1e98 <__floatsisf+0x6c>
    1e62:	6f 5f       	subi	r22, 0xFF	; 255
    1e64:	7f 4f       	sbci	r23, 0xFF	; 255
    1e66:	8f 4f       	sbci	r24, 0xFF	; 255
    1e68:	9f 4f       	sbci	r25, 0xFF	; 255
    1e6a:	16 c0       	rjmp	.+44     	; 0x1e98 <__floatsisf+0x6c>
    1e6c:	88 23       	and	r24, r24
    1e6e:	11 f0       	breq	.+4      	; 0x1e74 <__floatsisf+0x48>
    1e70:	96 e9       	ldi	r25, 0x96	; 150
    1e72:	11 c0       	rjmp	.+34     	; 0x1e96 <__floatsisf+0x6a>
    1e74:	77 23       	and	r23, r23
    1e76:	21 f0       	breq	.+8      	; 0x1e80 <__floatsisf+0x54>
    1e78:	9e e8       	ldi	r25, 0x8E	; 142
    1e7a:	87 2f       	mov	r24, r23
    1e7c:	76 2f       	mov	r23, r22
    1e7e:	05 c0       	rjmp	.+10     	; 0x1e8a <__floatsisf+0x5e>
    1e80:	66 23       	and	r22, r22
    1e82:	71 f0       	breq	.+28     	; 0x1ea0 <__floatsisf+0x74>
    1e84:	96 e8       	ldi	r25, 0x86	; 134
    1e86:	86 2f       	mov	r24, r22
    1e88:	70 e0       	ldi	r23, 0x00	; 0
    1e8a:	60 e0       	ldi	r22, 0x00	; 0
    1e8c:	2a f0       	brmi	.+10     	; 0x1e98 <__floatsisf+0x6c>
    1e8e:	9a 95       	dec	r25
    1e90:	66 0f       	add	r22, r22
    1e92:	77 1f       	adc	r23, r23
    1e94:	88 1f       	adc	r24, r24
    1e96:	da f7       	brpl	.-10     	; 0x1e8e <__floatsisf+0x62>
    1e98:	88 0f       	add	r24, r24
    1e9a:	96 95       	lsr	r25
    1e9c:	87 95       	ror	r24
    1e9e:	97 f9       	bld	r25, 7
    1ea0:	08 95       	ret

00001ea2 <__fp_cmp>:
__fp_cmp():
    1ea2:	99 0f       	add	r25, r25
    1ea4:	00 08       	sbc	r0, r0
    1ea6:	55 0f       	add	r21, r21
    1ea8:	aa 0b       	sbc	r26, r26
    1eaa:	e0 e8       	ldi	r30, 0x80	; 128
    1eac:	fe ef       	ldi	r31, 0xFE	; 254
    1eae:	16 16       	cp	r1, r22
    1eb0:	17 06       	cpc	r1, r23
    1eb2:	e8 07       	cpc	r30, r24
    1eb4:	f9 07       	cpc	r31, r25
    1eb6:	c0 f0       	brcs	.+48     	; 0x1ee8 <__fp_cmp+0x46>
    1eb8:	12 16       	cp	r1, r18
    1eba:	13 06       	cpc	r1, r19
    1ebc:	e4 07       	cpc	r30, r20
    1ebe:	f5 07       	cpc	r31, r21
    1ec0:	98 f0       	brcs	.+38     	; 0x1ee8 <__fp_cmp+0x46>
    1ec2:	62 1b       	sub	r22, r18
    1ec4:	73 0b       	sbc	r23, r19
    1ec6:	84 0b       	sbc	r24, r20
    1ec8:	95 0b       	sbc	r25, r21
    1eca:	39 f4       	brne	.+14     	; 0x1eda <__fp_cmp+0x38>
    1ecc:	0a 26       	eor	r0, r26
    1ece:	61 f0       	breq	.+24     	; 0x1ee8 <__fp_cmp+0x46>
    1ed0:	23 2b       	or	r18, r19
    1ed2:	24 2b       	or	r18, r20
    1ed4:	25 2b       	or	r18, r21
    1ed6:	21 f4       	brne	.+8      	; 0x1ee0 <__fp_cmp+0x3e>
    1ed8:	08 95       	ret
    1eda:	0a 26       	eor	r0, r26
    1edc:	09 f4       	brne	.+2      	; 0x1ee0 <__fp_cmp+0x3e>
    1ede:	a1 40       	sbci	r26, 0x01	; 1
    1ee0:	a6 95       	lsr	r26
    1ee2:	8f ef       	ldi	r24, 0xFF	; 255
    1ee4:	81 1d       	adc	r24, r1
    1ee6:	81 1d       	adc	r24, r1
    1ee8:	08 95       	ret

00001eea <__fp_inf>:
__fp_inf():
    1eea:	97 f9       	bld	r25, 7
    1eec:	9f 67       	ori	r25, 0x7F	; 127
    1eee:	80 e8       	ldi	r24, 0x80	; 128
    1ef0:	70 e0       	ldi	r23, 0x00	; 0
    1ef2:	60 e0       	ldi	r22, 0x00	; 0
    1ef4:	08 95       	ret

00001ef6 <__fp_nan>:
__fp_nan():
    1ef6:	9f ef       	ldi	r25, 0xFF	; 255
    1ef8:	80 ec       	ldi	r24, 0xC0	; 192
    1efa:	08 95       	ret

00001efc <__fp_pscA>:
__fp_pscA():
    1efc:	00 24       	eor	r0, r0
    1efe:	0a 94       	dec	r0
    1f00:	16 16       	cp	r1, r22
    1f02:	17 06       	cpc	r1, r23
    1f04:	18 06       	cpc	r1, r24
    1f06:	09 06       	cpc	r0, r25
    1f08:	08 95       	ret

00001f0a <__fp_pscB>:
__fp_pscB():
    1f0a:	00 24       	eor	r0, r0
    1f0c:	0a 94       	dec	r0
    1f0e:	12 16       	cp	r1, r18
    1f10:	13 06       	cpc	r1, r19
    1f12:	14 06       	cpc	r1, r20
    1f14:	05 06       	cpc	r0, r21
    1f16:	08 95       	ret

00001f18 <__fp_round>:
__fp_round():
    1f18:	09 2e       	mov	r0, r25
    1f1a:	03 94       	inc	r0
    1f1c:	00 0c       	add	r0, r0
    1f1e:	11 f4       	brne	.+4      	; 0x1f24 <__fp_round+0xc>
    1f20:	88 23       	and	r24, r24
    1f22:	52 f0       	brmi	.+20     	; 0x1f38 <__fp_round+0x20>
    1f24:	bb 0f       	add	r27, r27
    1f26:	40 f4       	brcc	.+16     	; 0x1f38 <__fp_round+0x20>
    1f28:	bf 2b       	or	r27, r31
    1f2a:	11 f4       	brne	.+4      	; 0x1f30 <__fp_round+0x18>
    1f2c:	60 ff       	sbrs	r22, 0
    1f2e:	04 c0       	rjmp	.+8      	; 0x1f38 <__fp_round+0x20>
    1f30:	6f 5f       	subi	r22, 0xFF	; 255
    1f32:	7f 4f       	sbci	r23, 0xFF	; 255
    1f34:	8f 4f       	sbci	r24, 0xFF	; 255
    1f36:	9f 4f       	sbci	r25, 0xFF	; 255
    1f38:	08 95       	ret

00001f3a <__fp_split3>:
__fp_split3():
    1f3a:	57 fd       	sbrc	r21, 7
    1f3c:	90 58       	subi	r25, 0x80	; 128
    1f3e:	44 0f       	add	r20, r20
    1f40:	55 1f       	adc	r21, r21
    1f42:	59 f0       	breq	.+22     	; 0x1f5a <__fp_splitA+0x10>
    1f44:	5f 3f       	cpi	r21, 0xFF	; 255
    1f46:	71 f0       	breq	.+28     	; 0x1f64 <__fp_splitA+0x1a>
    1f48:	47 95       	ror	r20

00001f4a <__fp_splitA>:
    1f4a:	88 0f       	add	r24, r24
    1f4c:	97 fb       	bst	r25, 7
    1f4e:	99 1f       	adc	r25, r25
    1f50:	61 f0       	breq	.+24     	; 0x1f6a <__fp_splitA+0x20>
    1f52:	9f 3f       	cpi	r25, 0xFF	; 255
    1f54:	79 f0       	breq	.+30     	; 0x1f74 <__fp_splitA+0x2a>
    1f56:	87 95       	ror	r24
    1f58:	08 95       	ret
    1f5a:	12 16       	cp	r1, r18
    1f5c:	13 06       	cpc	r1, r19
    1f5e:	14 06       	cpc	r1, r20
    1f60:	55 1f       	adc	r21, r21
    1f62:	f2 cf       	rjmp	.-28     	; 0x1f48 <__fp_split3+0xe>
    1f64:	46 95       	lsr	r20
    1f66:	f1 df       	rcall	.-30     	; 0x1f4a <__fp_splitA>
    1f68:	08 c0       	rjmp	.+16     	; 0x1f7a <__fp_splitA+0x30>
    1f6a:	16 16       	cp	r1, r22
    1f6c:	17 06       	cpc	r1, r23
    1f6e:	18 06       	cpc	r1, r24
    1f70:	99 1f       	adc	r25, r25
    1f72:	f1 cf       	rjmp	.-30     	; 0x1f56 <__fp_splitA+0xc>
    1f74:	86 95       	lsr	r24
    1f76:	71 05       	cpc	r23, r1
    1f78:	61 05       	cpc	r22, r1
    1f7a:	08 94       	sec
    1f7c:	08 95       	ret

00001f7e <__fp_zero>:
__fp_zero():
    1f7e:	e8 94       	clt

00001f80 <__fp_szero>:
    1f80:	bb 27       	eor	r27, r27
    1f82:	66 27       	eor	r22, r22
    1f84:	77 27       	eor	r23, r23
    1f86:	cb 01       	movw	r24, r22
    1f88:	97 f9       	bld	r25, 7
    1f8a:	08 95       	ret

00001f8c <__gesf2>:
__gesf2():
    1f8c:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <__fp_cmp>
    1f90:	08 f4       	brcc	.+2      	; 0x1f94 <__gesf2+0x8>
    1f92:	8f ef       	ldi	r24, 0xFF	; 255
    1f94:	08 95       	ret

00001f96 <__mulsf3>:
__mulsf3():
    1f96:	0e 94 de 0f 	call	0x1fbc	; 0x1fbc <__mulsf3x>
    1f9a:	0c 94 8c 0f 	jmp	0x1f18	; 0x1f18 <__fp_round>
    1f9e:	0e 94 7e 0f 	call	0x1efc	; 0x1efc <__fp_pscA>
    1fa2:	38 f0       	brcs	.+14     	; 0x1fb2 <__mulsf3+0x1c>
    1fa4:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <__fp_pscB>
    1fa8:	20 f0       	brcs	.+8      	; 0x1fb2 <__mulsf3+0x1c>
    1faa:	95 23       	and	r25, r21
    1fac:	11 f0       	breq	.+4      	; 0x1fb2 <__mulsf3+0x1c>
    1fae:	0c 94 75 0f 	jmp	0x1eea	; 0x1eea <__fp_inf>
    1fb2:	0c 94 7b 0f 	jmp	0x1ef6	; 0x1ef6 <__fp_nan>
    1fb6:	11 24       	eor	r1, r1
    1fb8:	0c 94 c0 0f 	jmp	0x1f80	; 0x1f80 <__fp_szero>

00001fbc <__mulsf3x>:
__mulsf3x():
    1fbc:	0e 94 9d 0f 	call	0x1f3a	; 0x1f3a <__fp_split3>
    1fc0:	70 f3       	brcs	.-36     	; 0x1f9e <__mulsf3+0x8>

00001fc2 <__mulsf3_pse>:
    1fc2:	95 9f       	mul	r25, r21
    1fc4:	c1 f3       	breq	.-16     	; 0x1fb6 <__mulsf3+0x20>
    1fc6:	95 0f       	add	r25, r21
    1fc8:	50 e0       	ldi	r21, 0x00	; 0
    1fca:	55 1f       	adc	r21, r21
    1fcc:	62 9f       	mul	r22, r18
    1fce:	f0 01       	movw	r30, r0
    1fd0:	72 9f       	mul	r23, r18
    1fd2:	bb 27       	eor	r27, r27
    1fd4:	f0 0d       	add	r31, r0
    1fd6:	b1 1d       	adc	r27, r1
    1fd8:	63 9f       	mul	r22, r19
    1fda:	aa 27       	eor	r26, r26
    1fdc:	f0 0d       	add	r31, r0
    1fde:	b1 1d       	adc	r27, r1
    1fe0:	aa 1f       	adc	r26, r26
    1fe2:	64 9f       	mul	r22, r20
    1fe4:	66 27       	eor	r22, r22
    1fe6:	b0 0d       	add	r27, r0
    1fe8:	a1 1d       	adc	r26, r1
    1fea:	66 1f       	adc	r22, r22
    1fec:	82 9f       	mul	r24, r18
    1fee:	22 27       	eor	r18, r18
    1ff0:	b0 0d       	add	r27, r0
    1ff2:	a1 1d       	adc	r26, r1
    1ff4:	62 1f       	adc	r22, r18
    1ff6:	73 9f       	mul	r23, r19
    1ff8:	b0 0d       	add	r27, r0
    1ffa:	a1 1d       	adc	r26, r1
    1ffc:	62 1f       	adc	r22, r18
    1ffe:	83 9f       	mul	r24, r19
    2000:	a0 0d       	add	r26, r0
    2002:	61 1d       	adc	r22, r1
    2004:	22 1f       	adc	r18, r18
    2006:	74 9f       	mul	r23, r20
    2008:	33 27       	eor	r19, r19
    200a:	a0 0d       	add	r26, r0
    200c:	61 1d       	adc	r22, r1
    200e:	23 1f       	adc	r18, r19
    2010:	84 9f       	mul	r24, r20
    2012:	60 0d       	add	r22, r0
    2014:	21 1d       	adc	r18, r1
    2016:	82 2f       	mov	r24, r18
    2018:	76 2f       	mov	r23, r22
    201a:	6a 2f       	mov	r22, r26
    201c:	11 24       	eor	r1, r1
    201e:	9f 57       	subi	r25, 0x7F	; 127
    2020:	50 40       	sbci	r21, 0x00	; 0
    2022:	9a f0       	brmi	.+38     	; 0x204a <__mulsf3_pse+0x88>
    2024:	f1 f0       	breq	.+60     	; 0x2062 <__mulsf3_pse+0xa0>
    2026:	88 23       	and	r24, r24
    2028:	4a f0       	brmi	.+18     	; 0x203c <__mulsf3_pse+0x7a>
    202a:	ee 0f       	add	r30, r30
    202c:	ff 1f       	adc	r31, r31
    202e:	bb 1f       	adc	r27, r27
    2030:	66 1f       	adc	r22, r22
    2032:	77 1f       	adc	r23, r23
    2034:	88 1f       	adc	r24, r24
    2036:	91 50       	subi	r25, 0x01	; 1
    2038:	50 40       	sbci	r21, 0x00	; 0
    203a:	a9 f7       	brne	.-22     	; 0x2026 <__mulsf3_pse+0x64>
    203c:	9e 3f       	cpi	r25, 0xFE	; 254
    203e:	51 05       	cpc	r21, r1
    2040:	80 f0       	brcs	.+32     	; 0x2062 <__mulsf3_pse+0xa0>
    2042:	0c 94 75 0f 	jmp	0x1eea	; 0x1eea <__fp_inf>
    2046:	0c 94 c0 0f 	jmp	0x1f80	; 0x1f80 <__fp_szero>
    204a:	5f 3f       	cpi	r21, 0xFF	; 255
    204c:	e4 f3       	brlt	.-8      	; 0x2046 <__mulsf3_pse+0x84>
    204e:	98 3e       	cpi	r25, 0xE8	; 232
    2050:	d4 f3       	brlt	.-12     	; 0x2046 <__mulsf3_pse+0x84>
    2052:	86 95       	lsr	r24
    2054:	77 95       	ror	r23
    2056:	67 95       	ror	r22
    2058:	b7 95       	ror	r27
    205a:	f7 95       	ror	r31
    205c:	e7 95       	ror	r30
    205e:	9f 5f       	subi	r25, 0xFF	; 255
    2060:	c1 f7       	brne	.-16     	; 0x2052 <__mulsf3_pse+0x90>
    2062:	fe 2b       	or	r31, r30
    2064:	88 0f       	add	r24, r24
    2066:	91 1d       	adc	r25, r1
    2068:	96 95       	lsr	r25
    206a:	87 95       	ror	r24
    206c:	97 f9       	bld	r25, 7
    206e:	08 95       	ret

00002070 <__unordsf2>:
    2070:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <__fp_cmp>
    2074:	88 0b       	sbc	r24, r24
    2076:	99 0b       	sbc	r25, r25
    2078:	08 95       	ret

0000207a <__udivmodsi4>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    207a:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    207c:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    207e:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    2080:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    2082:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    2084:	0d c0       	rjmp	.+26     	; 0x20a0 <__udivmodsi4_ep>

00002086 <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    2086:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    2088:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    208a:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    208c:	ff 1f       	adc	r31, r31
__udivmodsi4_loop():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    208e:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    2090:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    2092:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    2094:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    2096:	20 f0       	brcs	.+8      	; 0x20a0 <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    2098:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    209a:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    209c:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    209e:	f5 0b       	sbc	r31, r21

000020a0 <__udivmodsi4_ep>:
__udivmodsi4_ep():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    20a0:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    20a2:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    20a4:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    20a6:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    20a8:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    20aa:	69 f7       	brne	.-38     	; 0x2086 <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    20ac:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    20ae:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    20b0:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    20b2:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    20b4:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    20b6:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    20b8:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    20ba:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    20bc:	08 95       	ret

000020be <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    20be:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    20c0:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2328
    20c2:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2329
    20c4:	f4 91       	lpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2330
    20c6:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2331
    20c8:	09 94       	ijmp

000020ca <malloc>:
malloc():
    20ca:	0f 93       	push	r16
    20cc:	1f 93       	push	r17
    20ce:	cf 93       	push	r28
    20d0:	df 93       	push	r29
    20d2:	82 30       	cpi	r24, 0x02	; 2
    20d4:	91 05       	cpc	r25, r1
    20d6:	10 f4       	brcc	.+4      	; 0x20dc <malloc+0x12>
    20d8:	82 e0       	ldi	r24, 0x02	; 2
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	e0 91 14 03 	lds	r30, 0x0314	; 0x800314 <__flp>
    20e0:	f0 91 15 03 	lds	r31, 0x0315	; 0x800315 <__flp+0x1>
    20e4:	30 e0       	ldi	r19, 0x00	; 0
    20e6:	20 e0       	ldi	r18, 0x00	; 0
    20e8:	b0 e0       	ldi	r27, 0x00	; 0
    20ea:	a0 e0       	ldi	r26, 0x00	; 0
    20ec:	30 97       	sbiw	r30, 0x00	; 0
    20ee:	99 f4       	brne	.+38     	; 0x2116 <malloc+0x4c>
    20f0:	21 15       	cp	r18, r1
    20f2:	31 05       	cpc	r19, r1
    20f4:	09 f4       	brne	.+2      	; 0x20f8 <malloc+0x2e>
    20f6:	4a c0       	rjmp	.+148    	; 0x218c <malloc+0xc2>
    20f8:	28 1b       	sub	r18, r24
    20fa:	39 0b       	sbc	r19, r25
    20fc:	24 30       	cpi	r18, 0x04	; 4
    20fe:	31 05       	cpc	r19, r1
    2100:	d8 f5       	brcc	.+118    	; 0x2178 <malloc+0xae>
    2102:	8a 81       	ldd	r24, Y+2	; 0x02
    2104:	9b 81       	ldd	r25, Y+3	; 0x03
    2106:	61 15       	cp	r22, r1
    2108:	71 05       	cpc	r23, r1
    210a:	89 f1       	breq	.+98     	; 0x216e <malloc+0xa4>
    210c:	fb 01       	movw	r30, r22
    210e:	93 83       	std	Z+3, r25	; 0x03
    2110:	82 83       	std	Z+2, r24	; 0x02
    2112:	fe 01       	movw	r30, r28
    2114:	11 c0       	rjmp	.+34     	; 0x2138 <malloc+0x6e>
    2116:	40 81       	ld	r20, Z
    2118:	51 81       	ldd	r21, Z+1	; 0x01
    211a:	02 81       	ldd	r16, Z+2	; 0x02
    211c:	13 81       	ldd	r17, Z+3	; 0x03
    211e:	48 17       	cp	r20, r24
    2120:	59 07       	cpc	r21, r25
    2122:	e0 f0       	brcs	.+56     	; 0x215c <malloc+0x92>
    2124:	48 17       	cp	r20, r24
    2126:	59 07       	cpc	r21, r25
    2128:	99 f4       	brne	.+38     	; 0x2150 <malloc+0x86>
    212a:	10 97       	sbiw	r26, 0x00	; 0
    212c:	61 f0       	breq	.+24     	; 0x2146 <malloc+0x7c>
    212e:	12 96       	adiw	r26, 0x02	; 2
    2130:	0c 93       	st	X, r16
    2132:	12 97       	sbiw	r26, 0x02	; 2
    2134:	13 96       	adiw	r26, 0x03	; 3
    2136:	1c 93       	st	X, r17
    2138:	32 96       	adiw	r30, 0x02	; 2
    213a:	cf 01       	movw	r24, r30
    213c:	df 91       	pop	r29
    213e:	cf 91       	pop	r28
    2140:	1f 91       	pop	r17
    2142:	0f 91       	pop	r16
    2144:	08 95       	ret
    2146:	00 93 14 03 	sts	0x0314, r16	; 0x800314 <__flp>
    214a:	10 93 15 03 	sts	0x0315, r17	; 0x800315 <__flp+0x1>
    214e:	f4 cf       	rjmp	.-24     	; 0x2138 <malloc+0x6e>
    2150:	21 15       	cp	r18, r1
    2152:	31 05       	cpc	r19, r1
    2154:	51 f0       	breq	.+20     	; 0x216a <malloc+0xa0>
    2156:	42 17       	cp	r20, r18
    2158:	53 07       	cpc	r21, r19
    215a:	38 f0       	brcs	.+14     	; 0x216a <malloc+0xa0>
    215c:	a9 01       	movw	r20, r18
    215e:	db 01       	movw	r26, r22
    2160:	9a 01       	movw	r18, r20
    2162:	bd 01       	movw	r22, r26
    2164:	df 01       	movw	r26, r30
    2166:	f8 01       	movw	r30, r16
    2168:	c1 cf       	rjmp	.-126    	; 0x20ec <malloc+0x22>
    216a:	ef 01       	movw	r28, r30
    216c:	f9 cf       	rjmp	.-14     	; 0x2160 <malloc+0x96>
    216e:	90 93 15 03 	sts	0x0315, r25	; 0x800315 <__flp+0x1>
    2172:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <__flp>
    2176:	cd cf       	rjmp	.-102    	; 0x2112 <malloc+0x48>
    2178:	fe 01       	movw	r30, r28
    217a:	e2 0f       	add	r30, r18
    217c:	f3 1f       	adc	r31, r19
    217e:	81 93       	st	Z+, r24
    2180:	91 93       	st	Z+, r25
    2182:	22 50       	subi	r18, 0x02	; 2
    2184:	31 09       	sbc	r19, r1
    2186:	39 83       	std	Y+1, r19	; 0x01
    2188:	28 83       	st	Y, r18
    218a:	d7 cf       	rjmp	.-82     	; 0x213a <malloc+0x70>
    218c:	20 91 12 03 	lds	r18, 0x0312	; 0x800312 <__brkval>
    2190:	30 91 13 03 	lds	r19, 0x0313	; 0x800313 <__brkval+0x1>
    2194:	23 2b       	or	r18, r19
    2196:	41 f4       	brne	.+16     	; 0x21a8 <malloc+0xde>
    2198:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    219c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    21a0:	30 93 13 03 	sts	0x0313, r19	; 0x800313 <__brkval+0x1>
    21a4:	20 93 12 03 	sts	0x0312, r18	; 0x800312 <__brkval>
    21a8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    21ac:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    21b0:	21 15       	cp	r18, r1
    21b2:	31 05       	cpc	r19, r1
    21b4:	41 f4       	brne	.+16     	; 0x21c6 <malloc+0xfc>
    21b6:	2d b7       	in	r18, 0x3d	; 61
    21b8:	3e b7       	in	r19, 0x3e	; 62
    21ba:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    21be:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    21c2:	24 1b       	sub	r18, r20
    21c4:	35 0b       	sbc	r19, r21
    21c6:	e0 91 12 03 	lds	r30, 0x0312	; 0x800312 <__brkval>
    21ca:	f0 91 13 03 	lds	r31, 0x0313	; 0x800313 <__brkval+0x1>
    21ce:	e2 17       	cp	r30, r18
    21d0:	f3 07       	cpc	r31, r19
    21d2:	a0 f4       	brcc	.+40     	; 0x21fc <malloc+0x132>
    21d4:	2e 1b       	sub	r18, r30
    21d6:	3f 0b       	sbc	r19, r31
    21d8:	28 17       	cp	r18, r24
    21da:	39 07       	cpc	r19, r25
    21dc:	78 f0       	brcs	.+30     	; 0x21fc <malloc+0x132>
    21de:	ac 01       	movw	r20, r24
    21e0:	4e 5f       	subi	r20, 0xFE	; 254
    21e2:	5f 4f       	sbci	r21, 0xFF	; 255
    21e4:	24 17       	cp	r18, r20
    21e6:	35 07       	cpc	r19, r21
    21e8:	48 f0       	brcs	.+18     	; 0x21fc <malloc+0x132>
    21ea:	4e 0f       	add	r20, r30
    21ec:	5f 1f       	adc	r21, r31
    21ee:	50 93 13 03 	sts	0x0313, r21	; 0x800313 <__brkval+0x1>
    21f2:	40 93 12 03 	sts	0x0312, r20	; 0x800312 <__brkval>
    21f6:	81 93       	st	Z+, r24
    21f8:	91 93       	st	Z+, r25
    21fa:	9f cf       	rjmp	.-194    	; 0x213a <malloc+0x70>
    21fc:	f0 e0       	ldi	r31, 0x00	; 0
    21fe:	e0 e0       	ldi	r30, 0x00	; 0
    2200:	9c cf       	rjmp	.-200    	; 0x213a <malloc+0x70>

00002202 <free>:
free():
    2202:	cf 93       	push	r28
    2204:	df 93       	push	r29
    2206:	00 97       	sbiw	r24, 0x00	; 0
    2208:	e9 f0       	breq	.+58     	; 0x2244 <free+0x42>
    220a:	fc 01       	movw	r30, r24
    220c:	32 97       	sbiw	r30, 0x02	; 2
    220e:	13 82       	std	Z+3, r1	; 0x03
    2210:	12 82       	std	Z+2, r1	; 0x02
    2212:	a0 91 14 03 	lds	r26, 0x0314	; 0x800314 <__flp>
    2216:	b0 91 15 03 	lds	r27, 0x0315	; 0x800315 <__flp+0x1>
    221a:	ed 01       	movw	r28, r26
    221c:	30 e0       	ldi	r19, 0x00	; 0
    221e:	20 e0       	ldi	r18, 0x00	; 0
    2220:	10 97       	sbiw	r26, 0x00	; 0
    2222:	a1 f4       	brne	.+40     	; 0x224c <free+0x4a>
    2224:	20 81       	ld	r18, Z
    2226:	31 81       	ldd	r19, Z+1	; 0x01
    2228:	82 0f       	add	r24, r18
    222a:	93 1f       	adc	r25, r19
    222c:	20 91 12 03 	lds	r18, 0x0312	; 0x800312 <__brkval>
    2230:	30 91 13 03 	lds	r19, 0x0313	; 0x800313 <__brkval+0x1>
    2234:	28 17       	cp	r18, r24
    2236:	39 07       	cpc	r19, r25
    2238:	09 f0       	breq	.+2      	; 0x223c <free+0x3a>
    223a:	61 c0       	rjmp	.+194    	; 0x22fe <free+0xfc>
    223c:	f0 93 13 03 	sts	0x0313, r31	; 0x800313 <__brkval+0x1>
    2240:	e0 93 12 03 	sts	0x0312, r30	; 0x800312 <__brkval>
    2244:	df 91       	pop	r29
    2246:	cf 91       	pop	r28
    2248:	08 95       	ret
    224a:	ea 01       	movw	r28, r20
    224c:	ce 17       	cp	r28, r30
    224e:	df 07       	cpc	r29, r31
    2250:	e8 f5       	brcc	.+122    	; 0x22cc <free+0xca>
    2252:	4a 81       	ldd	r20, Y+2	; 0x02
    2254:	5b 81       	ldd	r21, Y+3	; 0x03
    2256:	9e 01       	movw	r18, r28
    2258:	41 15       	cp	r20, r1
    225a:	51 05       	cpc	r21, r1
    225c:	b1 f7       	brne	.-20     	; 0x224a <free+0x48>
    225e:	e9 01       	movw	r28, r18
    2260:	fb 83       	std	Y+3, r31	; 0x03
    2262:	ea 83       	std	Y+2, r30	; 0x02
    2264:	49 91       	ld	r20, Y+
    2266:	59 91       	ld	r21, Y+
    2268:	c4 0f       	add	r28, r20
    226a:	d5 1f       	adc	r29, r21
    226c:	ec 17       	cp	r30, r28
    226e:	fd 07       	cpc	r31, r29
    2270:	61 f4       	brne	.+24     	; 0x228a <free+0x88>
    2272:	80 81       	ld	r24, Z
    2274:	91 81       	ldd	r25, Z+1	; 0x01
    2276:	02 96       	adiw	r24, 0x02	; 2
    2278:	84 0f       	add	r24, r20
    227a:	95 1f       	adc	r25, r21
    227c:	e9 01       	movw	r28, r18
    227e:	99 83       	std	Y+1, r25	; 0x01
    2280:	88 83       	st	Y, r24
    2282:	82 81       	ldd	r24, Z+2	; 0x02
    2284:	93 81       	ldd	r25, Z+3	; 0x03
    2286:	9b 83       	std	Y+3, r25	; 0x03
    2288:	8a 83       	std	Y+2, r24	; 0x02
    228a:	f0 e0       	ldi	r31, 0x00	; 0
    228c:	e0 e0       	ldi	r30, 0x00	; 0
    228e:	12 96       	adiw	r26, 0x02	; 2
    2290:	8d 91       	ld	r24, X+
    2292:	9c 91       	ld	r25, X
    2294:	13 97       	sbiw	r26, 0x03	; 3
    2296:	00 97       	sbiw	r24, 0x00	; 0
    2298:	b9 f5       	brne	.+110    	; 0x2308 <free+0x106>
    229a:	2d 91       	ld	r18, X+
    229c:	3c 91       	ld	r19, X
    229e:	11 97       	sbiw	r26, 0x01	; 1
    22a0:	cd 01       	movw	r24, r26
    22a2:	02 96       	adiw	r24, 0x02	; 2
    22a4:	82 0f       	add	r24, r18
    22a6:	93 1f       	adc	r25, r19
    22a8:	20 91 12 03 	lds	r18, 0x0312	; 0x800312 <__brkval>
    22ac:	30 91 13 03 	lds	r19, 0x0313	; 0x800313 <__brkval+0x1>
    22b0:	28 17       	cp	r18, r24
    22b2:	39 07       	cpc	r19, r25
    22b4:	39 f6       	brne	.-114    	; 0x2244 <free+0x42>
    22b6:	30 97       	sbiw	r30, 0x00	; 0
    22b8:	51 f5       	brne	.+84     	; 0x230e <free+0x10c>
    22ba:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <__flp+0x1>
    22be:	10 92 14 03 	sts	0x0314, r1	; 0x800314 <__flp>
    22c2:	b0 93 13 03 	sts	0x0313, r27	; 0x800313 <__brkval+0x1>
    22c6:	a0 93 12 03 	sts	0x0312, r26	; 0x800312 <__brkval>
    22ca:	bc cf       	rjmp	.-136    	; 0x2244 <free+0x42>
    22cc:	d3 83       	std	Z+3, r29	; 0x03
    22ce:	c2 83       	std	Z+2, r28	; 0x02
    22d0:	40 81       	ld	r20, Z
    22d2:	51 81       	ldd	r21, Z+1	; 0x01
    22d4:	84 0f       	add	r24, r20
    22d6:	95 1f       	adc	r25, r21
    22d8:	c8 17       	cp	r28, r24
    22da:	d9 07       	cpc	r29, r25
    22dc:	61 f4       	brne	.+24     	; 0x22f6 <free+0xf4>
    22de:	4e 5f       	subi	r20, 0xFE	; 254
    22e0:	5f 4f       	sbci	r21, 0xFF	; 255
    22e2:	88 81       	ld	r24, Y
    22e4:	99 81       	ldd	r25, Y+1	; 0x01
    22e6:	48 0f       	add	r20, r24
    22e8:	59 1f       	adc	r21, r25
    22ea:	51 83       	std	Z+1, r21	; 0x01
    22ec:	40 83       	st	Z, r20
    22ee:	8a 81       	ldd	r24, Y+2	; 0x02
    22f0:	9b 81       	ldd	r25, Y+3	; 0x03
    22f2:	93 83       	std	Z+3, r25	; 0x03
    22f4:	82 83       	std	Z+2, r24	; 0x02
    22f6:	21 15       	cp	r18, r1
    22f8:	31 05       	cpc	r19, r1
    22fa:	09 f0       	breq	.+2      	; 0x22fe <free+0xfc>
    22fc:	b0 cf       	rjmp	.-160    	; 0x225e <free+0x5c>
    22fe:	f0 93 15 03 	sts	0x0315, r31	; 0x800315 <__flp+0x1>
    2302:	e0 93 14 03 	sts	0x0314, r30	; 0x800314 <__flp>
    2306:	9e cf       	rjmp	.-196    	; 0x2244 <free+0x42>
    2308:	fd 01       	movw	r30, r26
    230a:	dc 01       	movw	r26, r24
    230c:	c0 cf       	rjmp	.-128    	; 0x228e <free+0x8c>
    230e:	13 82       	std	Z+3, r1	; 0x03
    2310:	12 82       	std	Z+2, r1	; 0x02
    2312:	d7 cf       	rjmp	.-82     	; 0x22c2 <free+0xc0>

00002314 <realloc>:
realloc():
    2314:	b0 e0       	ldi	r27, 0x00	; 0
    2316:	a0 e0       	ldi	r26, 0x00	; 0
    2318:	e0 e9       	ldi	r30, 0x90	; 144
    231a:	f1 e1       	ldi	r31, 0x11	; 17
    231c:	0c 94 62 12 	jmp	0x24c4	; 0x24c4 <__prologue_saves__+0x4>
    2320:	8c 01       	movw	r16, r24
    2322:	00 97       	sbiw	r24, 0x00	; 0
    2324:	51 f4       	brne	.+20     	; 0x233a <realloc+0x26>
    2326:	cb 01       	movw	r24, r22
    2328:	0e 94 65 10 	call	0x20ca	; 0x20ca <malloc>
    232c:	8c 01       	movw	r16, r24
    232e:	c8 01       	movw	r24, r16
    2330:	cd b7       	in	r28, 0x3d	; 61
    2332:	de b7       	in	r29, 0x3e	; 62
    2334:	e0 e1       	ldi	r30, 0x10	; 16
    2336:	0c 94 7e 12 	jmp	0x24fc	; 0x24fc <__epilogue_restores__+0x4>
    233a:	fc 01       	movw	r30, r24
    233c:	e6 0f       	add	r30, r22
    233e:	f7 1f       	adc	r31, r23
    2340:	9c 01       	movw	r18, r24
    2342:	22 50       	subi	r18, 0x02	; 2
    2344:	31 09       	sbc	r19, r1
    2346:	e2 17       	cp	r30, r18
    2348:	f3 07       	cpc	r31, r19
    234a:	08 f4       	brcc	.+2      	; 0x234e <realloc+0x3a>
    234c:	9d c0       	rjmp	.+314    	; 0x2488 <realloc+0x174>
    234e:	d9 01       	movw	r26, r18
    2350:	cd 91       	ld	r28, X+
    2352:	dc 91       	ld	r29, X
    2354:	11 97       	sbiw	r26, 0x01	; 1
    2356:	c6 17       	cp	r28, r22
    2358:	d7 07       	cpc	r29, r23
    235a:	98 f0       	brcs	.+38     	; 0x2382 <realloc+0x6e>
    235c:	c5 30       	cpi	r28, 0x05	; 5
    235e:	d1 05       	cpc	r29, r1
    2360:	30 f3       	brcs	.-52     	; 0x232e <realloc+0x1a>
    2362:	ce 01       	movw	r24, r28
    2364:	04 97       	sbiw	r24, 0x04	; 4
    2366:	86 17       	cp	r24, r22
    2368:	97 07       	cpc	r25, r23
    236a:	08 f3       	brcs	.-62     	; 0x232e <realloc+0x1a>
    236c:	c6 1b       	sub	r28, r22
    236e:	d7 0b       	sbc	r29, r23
    2370:	22 97       	sbiw	r28, 0x02	; 2
    2372:	c1 93       	st	Z+, r28
    2374:	d1 93       	st	Z+, r29
    2376:	6d 93       	st	X+, r22
    2378:	7c 93       	st	X, r23
    237a:	cf 01       	movw	r24, r30
    237c:	0e 94 01 11 	call	0x2202	; 0x2202 <free>
    2380:	d6 cf       	rjmp	.-84     	; 0x232e <realloc+0x1a>
    2382:	5b 01       	movw	r10, r22
    2384:	ac 1a       	sub	r10, r28
    2386:	bd 0a       	sbc	r11, r29
    2388:	4c 01       	movw	r8, r24
    238a:	8c 0e       	add	r8, r28
    238c:	9d 1e       	adc	r9, r29
    238e:	a0 91 14 03 	lds	r26, 0x0314	; 0x800314 <__flp>
    2392:	b0 91 15 03 	lds	r27, 0x0315	; 0x800315 <__flp+0x1>
    2396:	51 2c       	mov	r5, r1
    2398:	41 2c       	mov	r4, r1
    239a:	f1 2c       	mov	r15, r1
    239c:	e1 2c       	mov	r14, r1
    239e:	10 97       	sbiw	r26, 0x00	; 0
    23a0:	31 f5       	brne	.+76     	; 0x23ee <realloc+0xda>
    23a2:	80 91 12 03 	lds	r24, 0x0312	; 0x800312 <__brkval>
    23a6:	90 91 13 03 	lds	r25, 0x0313	; 0x800313 <__brkval+0x1>
    23aa:	88 15       	cp	r24, r8
    23ac:	99 05       	cpc	r25, r9
    23ae:	09 f0       	breq	.+2      	; 0x23b2 <realloc+0x9e>
    23b0:	5c c0       	rjmp	.+184    	; 0x246a <realloc+0x156>
    23b2:	46 16       	cp	r4, r22
    23b4:	57 06       	cpc	r5, r23
    23b6:	08 f0       	brcs	.+2      	; 0x23ba <realloc+0xa6>
    23b8:	58 c0       	rjmp	.+176    	; 0x246a <realloc+0x156>
    23ba:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    23be:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    23c2:	00 97       	sbiw	r24, 0x00	; 0
    23c4:	41 f4       	brne	.+16     	; 0x23d6 <realloc+0xc2>
    23c6:	8d b7       	in	r24, 0x3d	; 61
    23c8:	9e b7       	in	r25, 0x3e	; 62
    23ca:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    23ce:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    23d2:	84 1b       	sub	r24, r20
    23d4:	95 0b       	sbc	r25, r21
    23d6:	e8 17       	cp	r30, r24
    23d8:	f9 07       	cpc	r31, r25
    23da:	08 f0       	brcs	.+2      	; 0x23de <realloc+0xca>
    23dc:	55 c0       	rjmp	.+170    	; 0x2488 <realloc+0x174>
    23de:	f0 93 13 03 	sts	0x0313, r31	; 0x800313 <__brkval+0x1>
    23e2:	e0 93 12 03 	sts	0x0312, r30	; 0x800312 <__brkval>
    23e6:	f9 01       	movw	r30, r18
    23e8:	71 83       	std	Z+1, r23	; 0x01
    23ea:	60 83       	st	Z, r22
    23ec:	a0 cf       	rjmp	.-192    	; 0x232e <realloc+0x1a>
    23ee:	8d 91       	ld	r24, X+
    23f0:	9c 91       	ld	r25, X
    23f2:	11 97       	sbiw	r26, 0x01	; 1
    23f4:	12 96       	adiw	r26, 0x02	; 2
    23f6:	6c 90       	ld	r6, X
    23f8:	12 97       	sbiw	r26, 0x02	; 2
    23fa:	13 96       	adiw	r26, 0x03	; 3
    23fc:	7c 90       	ld	r7, X
    23fe:	13 97       	sbiw	r26, 0x03	; 3
    2400:	a8 15       	cp	r26, r8
    2402:	b9 05       	cpc	r27, r9
    2404:	59 f5       	brne	.+86     	; 0x245c <realloc+0x148>
    2406:	6c 01       	movw	r12, r24
    2408:	42 e0       	ldi	r20, 0x02	; 2
    240a:	c4 0e       	add	r12, r20
    240c:	d1 1c       	adc	r13, r1
    240e:	ca 14       	cp	r12, r10
    2410:	db 04       	cpc	r13, r11
    2412:	20 f1       	brcs	.+72     	; 0x245c <realloc+0x148>
    2414:	ac 01       	movw	r20, r24
    2416:	4a 19       	sub	r20, r10
    2418:	5b 09       	sbc	r21, r11
    241a:	da 01       	movw	r26, r20
    241c:	12 96       	adiw	r26, 0x02	; 2
    241e:	15 97       	sbiw	r26, 0x05	; 5
    2420:	80 f0       	brcs	.+32     	; 0x2442 <realloc+0x12e>
    2422:	62 82       	std	Z+2, r6	; 0x02
    2424:	73 82       	std	Z+3, r7	; 0x03
    2426:	51 83       	std	Z+1, r21	; 0x01
    2428:	40 83       	st	Z, r20
    242a:	d9 01       	movw	r26, r18
    242c:	6d 93       	st	X+, r22
    242e:	7c 93       	st	X, r23
    2430:	e1 14       	cp	r14, r1
    2432:	f1 04       	cpc	r15, r1
    2434:	71 f0       	breq	.+28     	; 0x2452 <realloc+0x13e>
    2436:	d7 01       	movw	r26, r14
    2438:	13 96       	adiw	r26, 0x03	; 3
    243a:	fc 93       	st	X, r31
    243c:	ee 93       	st	-X, r30
    243e:	12 97       	sbiw	r26, 0x02	; 2
    2440:	76 cf       	rjmp	.-276    	; 0x232e <realloc+0x1a>
    2442:	22 96       	adiw	r28, 0x02	; 2
    2444:	8c 0f       	add	r24, r28
    2446:	9d 1f       	adc	r25, r29
    2448:	f9 01       	movw	r30, r18
    244a:	91 83       	std	Z+1, r25	; 0x01
    244c:	80 83       	st	Z, r24
    244e:	f3 01       	movw	r30, r6
    2450:	ef cf       	rjmp	.-34     	; 0x2430 <realloc+0x11c>
    2452:	f0 93 15 03 	sts	0x0315, r31	; 0x800315 <__flp+0x1>
    2456:	e0 93 14 03 	sts	0x0314, r30	; 0x800314 <__flp>
    245a:	69 cf       	rjmp	.-302    	; 0x232e <realloc+0x1a>
    245c:	48 16       	cp	r4, r24
    245e:	59 06       	cpc	r5, r25
    2460:	08 f4       	brcc	.+2      	; 0x2464 <realloc+0x150>
    2462:	2c 01       	movw	r4, r24
    2464:	7d 01       	movw	r14, r26
    2466:	d3 01       	movw	r26, r6
    2468:	9a cf       	rjmp	.-204    	; 0x239e <realloc+0x8a>
    246a:	cb 01       	movw	r24, r22
    246c:	0e 94 65 10 	call	0x20ca	; 0x20ca <malloc>
    2470:	7c 01       	movw	r14, r24
    2472:	00 97       	sbiw	r24, 0x00	; 0
    2474:	49 f0       	breq	.+18     	; 0x2488 <realloc+0x174>
    2476:	ae 01       	movw	r20, r28
    2478:	b8 01       	movw	r22, r16
    247a:	0e 94 47 12 	call	0x248e	; 0x248e <memcpy>
    247e:	c8 01       	movw	r24, r16
    2480:	0e 94 01 11 	call	0x2202	; 0x2202 <free>
    2484:	87 01       	movw	r16, r14
    2486:	53 cf       	rjmp	.-346    	; 0x232e <realloc+0x1a>
    2488:	10 e0       	ldi	r17, 0x00	; 0
    248a:	00 e0       	ldi	r16, 0x00	; 0
    248c:	50 cf       	rjmp	.-352    	; 0x232e <realloc+0x1a>

0000248e <memcpy>:
memcpy():
    248e:	fb 01       	movw	r30, r22
    2490:	dc 01       	movw	r26, r24
    2492:	02 c0       	rjmp	.+4      	; 0x2498 <memcpy+0xa>
    2494:	01 90       	ld	r0, Z+
    2496:	0d 92       	st	X+, r0
    2498:	41 50       	subi	r20, 0x01	; 1
    249a:	50 40       	sbci	r21, 0x00	; 0
    249c:	d8 f7       	brcc	.-10     	; 0x2494 <memcpy+0x6>
    249e:	08 95       	ret

000024a0 <strcmp>:
strcmp():
    24a0:	fb 01       	movw	r30, r22
    24a2:	dc 01       	movw	r26, r24
    24a4:	8d 91       	ld	r24, X+
    24a6:	01 90       	ld	r0, Z+
    24a8:	80 19       	sub	r24, r0
    24aa:	01 10       	cpse	r0, r1
    24ac:	d9 f3       	breq	.-10     	; 0x24a4 <strcmp+0x4>
    24ae:	99 0b       	sbc	r25, r25
    24b0:	08 95       	ret

000024b2 <strcpy>:
strcpy():
    24b2:	fb 01       	movw	r30, r22
    24b4:	dc 01       	movw	r26, r24
    24b6:	01 90       	ld	r0, Z+
    24b8:	0d 92       	st	X+, r0
    24ba:	00 20       	and	r0, r0
    24bc:	e1 f7       	brne	.-8      	; 0x24b6 <strcpy+0x4>
    24be:	08 95       	ret

000024c0 <__prologue_saves__>:
__prologue_saves__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2169
    24c0:	2f 92       	push	r2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2170
    24c2:	3f 92       	push	r3
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2171
    24c4:	4f 92       	push	r4
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2172
    24c6:	5f 92       	push	r5
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2173
    24c8:	6f 92       	push	r6
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2174
    24ca:	7f 92       	push	r7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2175
    24cc:	8f 92       	push	r8
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2176
    24ce:	9f 92       	push	r9
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2177
    24d0:	af 92       	push	r10
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2178
    24d2:	bf 92       	push	r11
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2179
    24d4:	cf 92       	push	r12
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2180
    24d6:	df 92       	push	r13
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2181
    24d8:	ef 92       	push	r14
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2182
    24da:	ff 92       	push	r15
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2183
    24dc:	0f 93       	push	r16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2184
    24de:	1f 93       	push	r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2185
    24e0:	cf 93       	push	r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2186
    24e2:	df 93       	push	r29
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2200
    24e4:	cd b7       	in	r28, 0x3d	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2201
    24e6:	de b7       	in	r29, 0x3e	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2202
    24e8:	ca 1b       	sub	r28, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2203
    24ea:	db 0b       	sbc	r29, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2204
    24ec:	0f b6       	in	r0, 0x3f	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2205
    24ee:	f8 94       	cli
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2206
    24f0:	de bf       	out	0x3e, r29	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2207
    24f2:	0f be       	out	0x3f, r0	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2208
    24f4:	cd bf       	out	0x3d, r28	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2211
    24f6:	09 94       	ijmp

000024f8 <__epilogue_restores__>:
__epilogue_restores__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2222
    24f8:	2a 88       	ldd	r2, Y+18	; 0x12
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2223
    24fa:	39 88       	ldd	r3, Y+17	; 0x11
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2224
    24fc:	48 88       	ldd	r4, Y+16	; 0x10
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2225
    24fe:	5f 84       	ldd	r5, Y+15	; 0x0f
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2226
    2500:	6e 84       	ldd	r6, Y+14	; 0x0e
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2227
    2502:	7d 84       	ldd	r7, Y+13	; 0x0d
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2228
    2504:	8c 84       	ldd	r8, Y+12	; 0x0c
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2229
    2506:	9b 84       	ldd	r9, Y+11	; 0x0b
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2230
    2508:	aa 84       	ldd	r10, Y+10	; 0x0a
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2231
    250a:	b9 84       	ldd	r11, Y+9	; 0x09
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2232
    250c:	c8 84       	ldd	r12, Y+8	; 0x08
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2233
    250e:	df 80       	ldd	r13, Y+7	; 0x07
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2234
    2510:	ee 80       	ldd	r14, Y+6	; 0x06
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2235
    2512:	fd 80       	ldd	r15, Y+5	; 0x05
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2236
    2514:	0c 81       	ldd	r16, Y+4	; 0x04
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2237
    2516:	1b 81       	ldd	r17, Y+3	; 0x03
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2238
    2518:	aa 81       	ldd	r26, Y+2	; 0x02
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2252
    251a:	b9 81       	ldd	r27, Y+1	; 0x01
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2253
    251c:	ce 0f       	add	r28, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2254
    251e:	d1 1d       	adc	r29, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2255
    2520:	0f b6       	in	r0, 0x3f	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2256
    2522:	f8 94       	cli
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2257
    2524:	de bf       	out	0x3e, r29	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2258
    2526:	0f be       	out	0x3f, r0	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2259
    2528:	cd bf       	out	0x3d, r28	; 61
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2260
    252a:	ed 01       	movw	r28, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2263
    252c:	08 95       	ret

0000252e <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    252e:	f8 94       	cli

00002530 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr5/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    2530:	ff cf       	rjmp	.-2      	; 0x2530 <__stop_program>
